import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import PropTypes from 'prop-types';
import React from 'react';
import partial from 'lodash/partial';
import { AuthenticationPage, buttons, shadows, colors, colorsRaw, lengths, zIndex } from 'decap-cms-ui-default';
import { jsx as ___EmotionJSX } from "@emotion/react";
const LoginButton = /*#__PURE__*/_styled("button", {
  target: "ek030u93",
  label: "LoginButton"
})(buttons.button, ";", shadows.dropDeep, ";", buttons.default, ";", buttons.gray, ";padding:0 30px;display:block;margin-top:20px;margin-left:auto;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const AuthForm = /*#__PURE__*/_styled("form", {
  target: "ek030u92",
  label: "AuthForm"
})(process.env.NODE_ENV === "production" ? {
  name: "bjv45a",
  styles: "width:350px;margin-top:-80px"
} : {
  name: "bjv45a",
  styles: "width:350px;margin-top:-80px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AuthInput = /*#__PURE__*/_styled("input", {
  target: "ek030u91",
  label: "AuthInput"
})("background-color:", colorsRaw.white, ";border-radius:", lengths.borderRadius, ";font-size:14px;padding:10px;margin-bottom:15px;margin-top:6px;width:100%;position:relative;z-index:", zIndex.zIndex1, ";&:focus{outline:none;box-shadow:inset 0 0 0 2px ", colors.active, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9OZXRsaWZ5QXV0aGVudGljYXRpb25QYWdlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQStCOEIiLCJmaWxlIjoiLi4vLi4vc3JjL05ldGxpZnlBdXRoZW50aWNhdGlvblBhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBwYXJ0aWFsIGZyb20gJ2xvZGFzaC9wYXJ0aWFsJztcbmltcG9ydCB7XG4gIEF1dGhlbnRpY2F0aW9uUGFnZSxcbiAgYnV0dG9ucyxcbiAgc2hhZG93cyxcbiAgY29sb3JzLFxuICBjb2xvcnNSYXcsXG4gIGxlbmd0aHMsXG4gIHpJbmRleCxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5jb25zdCBMb2dpbkJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke3NoYWRvd3MuZHJvcERlZXB9O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcblxuICBwYWRkaW5nOiAwIDMwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBtYXJnaW4tbGVmdDogYXV0bztcbmA7XG5cbmNvbnN0IEF1dGhGb3JtID0gc3R5bGVkLmZvcm1gXG4gIHdpZHRoOiAzNTBweDtcbiAgbWFyZ2luLXRvcDogLTgwcHg7XG5gO1xuXG5jb25zdCBBdXRoSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG5cbiAgZm9udC1zaXplOiAxNHB4O1xuICBwYWRkaW5nOiAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICBtYXJnaW4tdG9wOiA2cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6ICR7ekluZGV4LnpJbmRleDF9O1xuXG4gICY6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDAgMnB4ICR7Y29sb3JzLmFjdGl2ZX07XG4gIH1cbmA7XG5cbmNvbnN0IEVycm9yTWVzc2FnZSA9IHN0eWxlZC5wYFxuICBjb2xvcjogJHtjb2xvcnMuZXJyb3JUZXh0fTtcbmA7XG5cbmxldCBjb21wb25lbnQgPSBudWxsO1xuXG5pZiAod2luZG93Lm5ldGxpZnlJZGVudGl0eSkge1xuICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9uKCdsb2dpbicsIHVzZXIgPT4ge1xuICAgIGNvbXBvbmVudCAmJiBjb21wb25lbnQuaGFuZGxlSWRlbnRpdHlMb2dpbih1c2VyKTtcbiAgfSk7XG4gIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub24oJ2xvZ291dCcsICgpID0+IHtcbiAgICBjb21wb25lbnQgJiYgY29tcG9uZW50LmhhbmRsZUlkZW50aXR5TG9nb3V0KCk7XG4gIH0pO1xuICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9uKCdlcnJvcicsIGVyciA9PiB7XG4gICAgY29tcG9uZW50ICYmIGNvbXBvbmVudC5oYW5kbGVJZGVudGl0eUVycm9yKGVycik7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXRsaWZ5QXV0aGVudGljYXRpb25QYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgc3RhdGljIGF1dGhDbGllbnQ7XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkxvZ2luOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGluUHJvZ3Jlc3M6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ub2RlLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgY29tcG9uZW50ID0gdGhpcztcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIE1hbnVhbGx5IHZhbGlkYXRlIFByb3BUeXBlcyAtIFJlYWN0IDE5IGJyZWFraW5nIGNoYW5nZVxuICAgIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyhcbiAgICAgIE5ldGxpZnlBdXRoZW50aWNhdGlvblBhZ2UucHJvcFR5cGVzLFxuICAgICAgdGhpcy5wcm9wcyxcbiAgICAgICdwcm9wJyxcbiAgICAgICdHaXRHYXRld2F5QXV0aGVudGljYXRpb25QYWdlJyxcbiAgICApO1xuXG4gICAgaWYgKCF0aGlzLmxvZ2dlZEluICYmIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkgJiYgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTG9naW4od2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKTtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb21wb25lbnQgPSBudWxsO1xuICB9XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dpbiA9IHVzZXIgPT4ge1xuICAgIHRoaXMucHJvcHMub25Mb2dpbih1c2VyKTtcbiAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5LmNsb3NlKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dvdXQgPSAoKSA9PiB7XG4gICAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vcGVuKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlFcnJvciA9IGVyciA9PiB7XG4gICAgaWYgKGVycj8ubWVzc2FnZT8ubWF0Y2goL15GYWlsZWQgdG8gbG9hZCBzZXR0aW5ncyBmcm9tLitcXC5uZXRsaWZ5XFwvaWRlbnRpdHkkLykpIHtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcnM6IHsgaWRlbnRpdHk6IHRoaXMucHJvcHMudCgnYXV0aC5lcnJvcnMuaWRlbnRpdHlTZXR0aW5ncycpIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHkgPSAoKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY3VycmVudFVzZXIoKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgc3RhdGUgPSB7IGVtYWlsOiAnJywgcGFzc3dvcmQ6ICcnLCBlcnJvcnM6IHt9IH07XG5cbiAgaGFuZGxlQ2hhbmdlID0gKG5hbWUsIGUpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgLi4udGhpcy5zdGF0ZSwgW25hbWVdOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVMb2dpbiA9IGFzeW5jIGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBlcnJvcnMgPSB7fTtcbiAgICBpZiAoIWVtYWlsKSB7XG4gICAgICBlcnJvcnMuZW1haWwgPSB0KCdhdXRoLmVycm9ycy5lbWFpbCcpO1xuICAgIH1cbiAgICBpZiAoIXBhc3N3b3JkKSB7XG4gICAgICBlcnJvcnMucGFzc3dvcmQgPSB0KCdhdXRoLmVycm9ycy5wYXNzd29yZCcpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcnMgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IE5ldGxpZnlBdXRoZW50aWNhdGlvblBhZ2UuYXV0aENsaWVudCgpO1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IGNsaWVudC5sb2dpbih0aGlzLnN0YXRlLmVtYWlsLCB0aGlzLnN0YXRlLnBhc3N3b3JkLCB0cnVlKTtcbiAgICAgIHRoaXMucHJvcHMub25Mb2dpbih1c2VyKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGVycm9yczogeyBzZXJ2ZXI6IGVycm9yLmRlc2NyaXB0aW9uIHx8IGVycm9yLm1zZyB8fCBlcnJvciB9LFxuICAgICAgICBsb2dnaW5nSW46IGZhbHNlLFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGVycm9ycyB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IGVycm9yLCBpblByb2dyZXNzLCBjb25maWcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAod2luZG93Lm5ldGxpZnlJZGVudGl0eSkge1xuICAgICAgaWYgKGVycm9ycy5pZGVudGl0eSkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxBdXRoZW50aWNhdGlvblBhZ2VcbiAgICAgICAgICAgIGxvZ29Vcmw9e2NvbmZpZy5sb2dvX3VybH0gLy8gRGVwcmVjYXRlZCwgcmVwbGFjZWQgYnkgYGxvZ28uc3JjYFxuICAgICAgICAgICAgbG9nbz17Y29uZmlnLmxvZ299XG4gICAgICAgICAgICBzaXRlVXJsPXtjb25maWcuc2l0ZV91cmx9XG4gICAgICAgICAgICBvbkxvZ2luPXt0aGlzLmhhbmRsZUlkZW50aXR5fVxuICAgICAgICAgICAgcmVuZGVyUGFnZUNvbnRlbnQ9eygpID0+IChcbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBocmVmPVwiaHR0cHM6Ly9kb2NzLm5ldGxpZnkuY29tL3Zpc2l0b3ItYWNjZXNzL2dpdC1nYXRld2F5LyNzZXR1cC1hbmQtc2V0dGluZ3NcIlxuICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7ZXJyb3JzLmlkZW50aXR5fVxuICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgdD17dH1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8QXV0aGVudGljYXRpb25QYWdlXG4gICAgICAgICAgICBsb2dvVXJsPXtjb25maWcubG9nb191cmx9IC8vIERlcHJlY2F0ZWQsIHJlcGxhY2VkIGJ5IGBsb2dvLnNyY2BcbiAgICAgICAgICAgIGxvZ289e2NvbmZpZy5sb2dvfVxuICAgICAgICAgICAgc2l0ZVVybD17Y29uZmlnLnNpdGVfdXJsfVxuICAgICAgICAgICAgb25Mb2dpbj17dGhpcy5oYW5kbGVJZGVudGl0eX1cbiAgICAgICAgICAgIHJlbmRlckJ1dHRvbkNvbnRlbnQ9eygpID0+IHQoJ2F1dGgubG9naW5XaXRoTmV0bGlmeUlkZW50aXR5Jyl9XG4gICAgICAgICAgICB0PXt0fVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBdXRoZW50aWNhdGlvblBhZ2VcbiAgICAgICAgbG9nb1VybD17Y29uZmlnLmxvZ29fdXJsfSAvLyBEZXByZWNhdGVkLCByZXBsYWNlZCBieSBgbG9nby5zcmNgXG4gICAgICAgIGxvZ289e2NvbmZpZy5sb2dvfVxuICAgICAgICBzaXRlVXJsPXtjb25maWcuc2l0ZV91cmx9XG4gICAgICAgIHJlbmRlclBhZ2VDb250ZW50PXsoKSA9PiAoXG4gICAgICAgICAgPEF1dGhGb3JtIG9uU3VibWl0PXt0aGlzLmhhbmRsZUxvZ2lufT5cbiAgICAgICAgICAgIHshZXJyb3IgPyBudWxsIDogPEVycm9yTWVzc2FnZT57ZXJyb3J9PC9FcnJvck1lc3NhZ2U+fVxuICAgICAgICAgICAgeyFlcnJvcnMuc2VydmVyID8gbnVsbCA6IDxFcnJvck1lc3NhZ2U+e1N0cmluZyhlcnJvcnMuc2VydmVyKX08L0Vycm9yTWVzc2FnZT59XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMuZW1haWwgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtYWlsXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlQ2hhbmdlLCAnZW1haWwnKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMucGFzc3dvcmQgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhc3N3b3JkfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17cGFydGlhbCh0aGlzLmhhbmRsZUNoYW5nZSwgJ3Bhc3N3b3JkJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPExvZ2luQnV0dG9uIGRpc2FibGVkPXtpblByb2dyZXNzfT5cbiAgICAgICAgICAgICAge2luUHJvZ3Jlc3MgPyB0KCdhdXRoLmxvZ2dpbmdJbicpIDogdCgnYXV0aC5sb2dpbicpfVxuICAgICAgICAgICAgPC9Mb2dpbkJ1dHRvbj5cbiAgICAgICAgICA8L0F1dGhGb3JtPlxuICAgICAgICApfVxuICAgICAgICB0PXt0fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iXX0= */"));
const ErrorMessage = /*#__PURE__*/_styled("p", {
  target: "ek030u90",
  label: "ErrorMessage"
})("color:", colors.errorText, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
let component = null;
if (window.netlifyIdentity) {
  window.netlifyIdentity.on('login', user => {
    component && component.handleIdentityLogin(user);
  });
  window.netlifyIdentity.on('logout', () => {
    component && component.handleIdentityLogout();
  });
  window.netlifyIdentity.on('error', err => {
    component && component.handleIdentityError(err);
  });
}
export default class NetlifyAuthenticationPage extends React.Component {
  static authClient;
  static propTypes = {
    onLogin: PropTypes.func.isRequired,
    inProgress: PropTypes.bool.isRequired,
    error: PropTypes.node,
    config: PropTypes.object.isRequired,
    t: PropTypes.func.isRequired
  };
  constructor(props) {
    super(props);
    component = this;
  }
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(NetlifyAuthenticationPage.propTypes, this.props, 'prop', 'GitGatewayAuthenticationPage');
    if (!this.loggedIn && window.netlifyIdentity && window.netlifyIdentity.currentUser()) {
      this.props.onLogin(window.netlifyIdentity.currentUser());
      window.netlifyIdentity.close();
    }
  }
  componentWillUnmount() {
    component = null;
  }
  handleIdentityLogin = user => {
    this.props.onLogin(user);
    window.netlifyIdentity.close();
  };
  handleIdentityLogout = () => {
    window.netlifyIdentity.open();
  };
  handleIdentityError = err => {
    if (err?.message?.match(/^Failed to load settings from.+\.netlify\/identity$/)) {
      window.netlifyIdentity.close();
      this.setState({
        errors: {
          identity: this.props.t('auth.errors.identitySettings')
        }
      });
    }
  };
  handleIdentity = () => {
    const user = window.netlifyIdentity.currentUser();
    if (user) {
      this.props.onLogin(user);
    } else {
      window.netlifyIdentity.open();
    }
  };
  state = {
    email: '',
    password: '',
    errors: {}
  };
  handleChange = (name, e) => {
    this.setState({
      ...this.state,
      [name]: e.target.value
    });
  };
  handleLogin = async e => {
    e.preventDefault();
    const {
      email,
      password
    } = this.state;
    const {
      t
    } = this.props;
    const errors = {};
    if (!email) {
      errors.email = t('auth.errors.email');
    }
    if (!password) {
      errors.password = t('auth.errors.password');
    }
    if (Object.keys(errors).length > 0) {
      this.setState({
        errors
      });
      return;
    }
    try {
      const client = await NetlifyAuthenticationPage.authClient();
      const user = await client.login(this.state.email, this.state.password, true);
      this.props.onLogin(user);
    } catch (error) {
      this.setState({
        errors: {
          server: error.description || error.msg || error
        },
        loggingIn: false
      });
    }
  };
  render() {
    const {
      errors
    } = this.state;
    const {
      error,
      inProgress,
      config,
      t
    } = this.props;
    if (window.netlifyIdentity) {
      if (errors.identity) {
        return ___EmotionJSX(AuthenticationPage, {
          logoUrl: config.logo_url // Deprecated, replaced by `logo.src`
          ,
          logo: config.logo,
          siteUrl: config.site_url,
          onLogin: this.handleIdentity,
          renderPageContent: () => ___EmotionJSX("a", {
            href: "https://docs.netlify.com/visitor-access/git-gateway/#setup-and-settings",
            target: "_blank",
            rel: "noopener noreferrer"
          }, errors.identity),
          t: t
        });
      } else {
        return ___EmotionJSX(AuthenticationPage, {
          logoUrl: config.logo_url // Deprecated, replaced by `logo.src`
          ,
          logo: config.logo,
          siteUrl: config.site_url,
          onLogin: this.handleIdentity,
          renderButtonContent: () => t('auth.loginWithNetlifyIdentity'),
          t: t
        });
      }
    }
    return ___EmotionJSX(AuthenticationPage, {
      logoUrl: config.logo_url // Deprecated, replaced by `logo.src`
      ,
      logo: config.logo,
      siteUrl: config.site_url,
      renderPageContent: () => ___EmotionJSX(AuthForm, {
        onSubmit: this.handleLogin
      }, !error ? null : ___EmotionJSX(ErrorMessage, null, error), !errors.server ? null : ___EmotionJSX(ErrorMessage, null, String(errors.server)), ___EmotionJSX(ErrorMessage, null, errors.email || null), ___EmotionJSX(AuthInput, {
        type: "text",
        name: "email",
        placeholder: "Email",
        value: this.state.email,
        onChange: partial(this.handleChange, 'email')
      }), ___EmotionJSX(ErrorMessage, null, errors.password || null), ___EmotionJSX(AuthInput, {
        type: "password",
        name: "password",
        placeholder: "Password",
        value: this.state.password,
        onChange: partial(this.handleChange, 'password')
      }), ___EmotionJSX(LoginButton, {
        disabled: inProgress
      }, inProgress ? t('auth.loggingIn') : t('auth.login'))),
      t: t
    });
  }
}