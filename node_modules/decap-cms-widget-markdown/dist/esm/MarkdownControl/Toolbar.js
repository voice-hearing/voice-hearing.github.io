import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { css } from '@emotion/react';
import { List } from 'immutable';
import { Toggle, Dropdown, DropdownItem, DropdownButton, colors, transitions, lengths } from 'decap-cms-ui-default';
import ToolbarButton from './ToolbarButton';
import { jsx as ___EmotionJSX } from "@emotion/react";
const ToolbarContainer = /*#__PURE__*/_styled("div", {
  target: "e11cox783",
  label: "ToolbarContainer"
})("background-color:", colors.textFieldBorder, ";border-top-right-radius:", lengths.borderRadius, ";position:relative;display:flex;justify-content:space-between;align-items:center;padding:11px 14px;min-height:58px;transition:background-color ", transitions.main, ",color ", transitions.main, ";color:", colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdownWrapper = /*#__PURE__*/_styled("div", {
  target: "e11cox782",
  label: "ToolbarDropdownWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "11ffxfj",
  styles: "display:inline-block;position:relative"
} : {
  name: "11ffxfj",
  styles: "display:inline-block;position:relative/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarToggle = /*#__PURE__*/_styled("div", {
  target: "e11cox781",
  label: "ToolbarToggle"
})(process.env.NODE_ENV === "production" ? {
  name: "1qi6e7n",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px"
} : {
  name: "1qi6e7n",
  styles: "flex-shrink:0;display:flex;align-items:center;font-size:14px;margin:0 10px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledToggle = ToolbarToggle.withComponent(Toggle, {
  target: "e11cox784",
  label: "StyledToggle"
});
const ToolbarToggleLabel = /*#__PURE__*/_styled("span", {
  target: "e11cox780",
  label: "ToolbarToggleLabel"
})("display:inline-block;text-align:center;white-space:nowrap;line-height:20px;min-width:", props => props.offPosition ? '62px' : '70px', ";", props => props.isActive && /*#__PURE__*/css("font-weight:600;color:", colors.active, ";;label:ToolbarToggleLabel;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export default class Toolbar extends React.Component {
  static propTypes = {
    buttons: ImmutablePropTypes.list,
    editorComponents: ImmutablePropTypes.list,
    onToggleMode: PropTypes.func.isRequired,
    rawMode: PropTypes.bool,
    isShowModeToggle: PropTypes.bool.isRequired,
    plugins: ImmutablePropTypes.map,
    onSubmit: PropTypes.func,
    onAddAsset: PropTypes.func,
    getAsset: PropTypes.func,
    disabled: PropTypes.bool,
    onMarkClick: PropTypes.func,
    onBlockClick: PropTypes.func,
    onLinkClick: PropTypes.func,
    hasMark: PropTypes.func,
    hasInline: PropTypes.func,
    hasBlock: PropTypes.func,
    t: PropTypes.func.isRequired
  };
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(Toolbar.propTypes, this.props, 'prop', 'Toolbar');
  }
  isVisible = button => {
    const {
      buttons
    } = this.props;
    return !List.isList(buttons) || buttons.includes(button);
  };
  handleBlockClick = (event, type) => {
    if (event) {
      event.preventDefault();
    }
    this.props.onBlockClick(type);
  };
  handleMarkClick = (event, type) => {
    event.preventDefault();
    this.props.onMarkClick(type);
  };
  render() {
    const {
      onLinkClick,
      onToggleMode,
      rawMode,
      isShowModeToggle,
      plugins,
      disabled,
      onSubmit,
      hasMark = () => {},
      hasInline = () => {},
      hasBlock = () => {},
      hasQuote = () => {},
      hasListItems = () => {},
      editorComponents,
      t
    } = this.props;
    const isVisible = this.isVisible;
    const showEditorComponents = !editorComponents || editorComponents.size >= 1;
    function showPlugin({
      id
    }) {
      return editorComponents ? editorComponents.includes(id) : true;
    }
    const pluginsList = plugins ? plugins.toList().filter(showPlugin) : List();
    const headingOptions = {
      'heading-one': t('editor.editorWidgets.headingOptions.headingOne'),
      'heading-two': t('editor.editorWidgets.headingOptions.headingTwo'),
      'heading-three': t('editor.editorWidgets.headingOptions.headingThree'),
      'heading-four': t('editor.editorWidgets.headingOptions.headingFour'),
      'heading-five': t('editor.editorWidgets.headingOptions.headingFive'),
      'heading-six': t('editor.editorWidgets.headingOptions.headingSix')
    };
    return ___EmotionJSX(ToolbarContainer, null, ___EmotionJSX("div", null, isVisible('bold') && ___EmotionJSX(ToolbarButton, {
      type: "bold",
      label: t('editor.editorWidgets.markdown.bold'),
      icon: "bold",
      onClick: this.handleMarkClick,
      isActive: hasMark('bold'),
      disabled: disabled
    }), isVisible('italic') && ___EmotionJSX(ToolbarButton, {
      type: "italic",
      label: t('editor.editorWidgets.markdown.italic'),
      icon: "italic",
      onClick: this.handleMarkClick,
      isActive: hasMark('italic'),
      disabled: disabled
    }), isVisible('code') && ___EmotionJSX(ToolbarButton, {
      type: "code",
      label: t('editor.editorWidgets.markdown.code'),
      icon: "code",
      onClick: this.handleMarkClick,
      isActive: hasMark('code'),
      disabled: disabled
    }), isVisible('link') && ___EmotionJSX(ToolbarButton, {
      type: "link",
      label: t('editor.editorWidgets.markdown.link'),
      icon: "link",
      onClick: onLinkClick,
      isActive: hasInline('link'),
      disabled: disabled
    }), Object.keys(headingOptions).some(isVisible) && ___EmotionJSX(ToolbarDropdownWrapper, null, ___EmotionJSX(Dropdown, {
      dropdownWidth: "max-content",
      dropdownTopOverlap: "36px",
      renderButton: () => ___EmotionJSX(DropdownButton, null, ___EmotionJSX(ToolbarButton, {
        type: "headings",
        label: t('editor.editorWidgets.markdown.headings'),
        icon: "hOptions",
        disabled: disabled,
        isActive: !disabled && Object.keys(headingOptions).some(hasBlock)
      }))
    }, !disabled && Object.keys(headingOptions).map((optionKey, idx) => isVisible(optionKey) && ___EmotionJSX(DropdownItem, {
      key: idx,
      label: headingOptions[optionKey],
      className: hasBlock(optionKey) ? 'active' : '',
      onClick: () => this.handleBlockClick(null, optionKey)
    })))), isVisible('quote') && ___EmotionJSX(ToolbarButton, {
      type: "quote",
      label: t('editor.editorWidgets.markdown.quote'),
      icon: "quote",
      onClick: this.handleBlockClick,
      isActive: hasQuote('quote'),
      disabled: disabled
    }), isVisible('bulleted-list') && ___EmotionJSX(ToolbarButton, {
      type: "bulleted-list",
      label: t('editor.editorWidgets.markdown.bulletedList'),
      icon: "list-bulleted",
      onClick: this.handleBlockClick,
      isActive: hasListItems('bulleted-list'),
      disabled: disabled
    }), isVisible('numbered-list') && ___EmotionJSX(ToolbarButton, {
      type: "numbered-list",
      label: t('editor.editorWidgets.markdown.numberedList'),
      icon: "list-numbered",
      onClick: this.handleBlockClick,
      isActive: hasListItems('numbered-list'),
      disabled: disabled
    }), showEditorComponents && ___EmotionJSX(ToolbarDropdownWrapper, null, ___EmotionJSX(Dropdown, {
      dropdownTopOverlap: "36px",
      dropdownWidth: "max-content",
      renderButton: () => ___EmotionJSX(DropdownButton, null, ___EmotionJSX(ToolbarButton, {
        label: t('editor.editorWidgets.markdown.addComponent'),
        icon: "add-with",
        onClick: this.handleComponentsMenuToggle,
        disabled: disabled
      }))
    }, pluginsList.map((plugin, idx) => ___EmotionJSX(DropdownItem, {
      key: idx,
      label: plugin.label,
      onClick: () => onSubmit(plugin)
    }))))), isShowModeToggle && ___EmotionJSX(ToolbarToggle, null, ___EmotionJSX(ToolbarToggleLabel, {
      isActive: !rawMode,
      offPosition: true
    }, t('editor.editorWidgets.markdown.richText')), ___EmotionJSX(StyledToggle, {
      active: rawMode,
      onChange: onToggleMode
    }), ___EmotionJSX(ToolbarToggleLabel, {
      isActive: rawMode
    }, t('editor.editorWidgets.markdown.markdown'))));
  }
}