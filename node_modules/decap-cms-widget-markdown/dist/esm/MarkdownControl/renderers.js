import _styled from "@emotion/styled/base";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/* eslint-disable react/display-name */
import React from 'react';
import { css } from '@emotion/react';
import { colors, lengths } from 'decap-cms-ui-default';
import { useSelected } from 'slate-react';
import VoidBlock from './components/VoidBlock';
import Shortcode from './components/Shortcode';
import { jsx as ___EmotionJSX } from "@emotion/react";
const bottomMargin = '16px';
const headerStyles = `
  font-weight: 700;
  line-height: 1;
`;
const StyledH1 = /*#__PURE__*/_styled("h1", {
  target: "evlbpgx13",
  label: "StyledH1"
})(headerStyles, ";font-size:32px;margin-top:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH2 = /*#__PURE__*/_styled("h2", {
  target: "evlbpgx12",
  label: "StyledH2"
})(headerStyles, ";font-size:24px;margin-top:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH3 = /*#__PURE__*/_styled("h3", {
  target: "evlbpgx11",
  label: "StyledH3"
})(headerStyles, ";font-size:20px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH4 = /*#__PURE__*/_styled("h4", {
  target: "evlbpgx10",
  label: "StyledH4"
})(headerStyles, ";font-size:18px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH5 = /*#__PURE__*/_styled("h5", {
  target: "evlbpgx9",
  label: "StyledH5"
})(headerStyles, ";font-size:16px;margin-top:8px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledH6 = StyledH5.withComponent('h6', {
  target: "evlbpgx14",
  label: "StyledH6"
});
const StyledP = /*#__PURE__*/_styled("p", {
  target: "evlbpgx8",
  label: "StyledP"
})("margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledBlockQuote = /*#__PURE__*/_styled("blockquote", {
  target: "evlbpgx7",
  label: "StyledBlockQuote"
})("padding-left:16px;border-left:3px solid ", colors.background, ";margin-left:0;margin-right:0;margin-bottom:", bottomMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledCode = /*#__PURE__*/_styled("code", {
  target: "evlbpgx6",
  label: "StyledCode"
})("background-color:", colors.background, ";border-radius:", lengths.borderRadius, ";padding:0 2px;font-size:85%;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledUl = /*#__PURE__*/_styled("ul", {
  target: "evlbpgx5",
  label: "StyledUl"
})("margin-bottom:", bottomMargin, ";padding-left:30px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StyledOl = StyledUl.withComponent('ol', {
  target: "evlbpgx15",
  label: "StyledOl"
});
const StyledLi = /*#__PURE__*/_styled("li", {
  target: "evlbpgx4",
  label: "StyledLi"
})(process.env.NODE_ENV === "production" ? {
  name: "1smjpj0",
  styles: "&>p:first-of-type{margin-top:8px;}&>p:last-of-type{margin-bottom:8px;}"
} : {
  name: "1smjpj0",
  styles: "&>p:first-of-type{margin-top:8px;}&>p:last-of-type{margin-bottom:8px;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledA = /*#__PURE__*/_styled("a", {
  target: "evlbpgx3",
  label: "StyledA"
})(process.env.NODE_ENV === "production" ? {
  name: "11z7vuy",
  styles: "text-decoration:underline;font-size:inherit"
} : {
  name: "11z7vuy",
  styles: "text-decoration:underline;font-size:inherit/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledHr = /*#__PURE__*/_styled("hr", {
  target: "evlbpgx2",
  label: "StyledHr"
})(process.env.NODE_ENV === "production" ? {
  name: "1y2p2hw",
  styles: "border:1px solid;margin-bottom:16px"
} : {
  name: "1y2p2hw",
  styles: "border:1px solid;margin-bottom:16px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTable = /*#__PURE__*/_styled("table", {
  target: "evlbpgx1",
  label: "StyledTable"
})(process.env.NODE_ENV === "production" ? {
  name: "tkxk5i",
  styles: "border-collapse:collapse"
} : {
  name: "tkxk5i",
  styles: "border-collapse:collapse/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledTd = /*#__PURE__*/_styled("td", {
  target: "evlbpgx0",
  label: "StyledTd"
})(process.env.NODE_ENV === "production" ? {
  name: "zsehaa",
  styles: "border:2px solid black;padding:8px;text-align:left"
} : {
  name: "zsehaa",
  styles: "border:2px solid black;padding:8px;text-align:left/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});

/**
 * Slate uses React components to render each type of node that it receives.
 * This is the closest thing Slate has to a schema definition. The types are set
 * by us when we manually deserialize from Remark's MDAST to Slate's AST.
 */

/**
 * Mark Components
 */
function Bold(props) {
  return ___EmotionJSX("strong", null, props.children);
}
function Italic(props) {
  return ___EmotionJSX("em", null, props.children);
}
function Strikethrough(props) {
  return ___EmotionJSX("s", null, props.children);
}
function Code(props) {
  return ___EmotionJSX(StyledCode, null, props.children);
}

/**
 * Node Components
 */
function Paragraph(props) {
  return ___EmotionJSX(StyledP, props.attributes, props.children);
}
function ListItem(props) {
  return ___EmotionJSX(StyledLi, props.attributes, props.children);
}
function Quote(props) {
  return ___EmotionJSX(StyledBlockQuote, props.attributes, props.children);
}
function HeadingOne(props) {
  return ___EmotionJSX(StyledH1, props.attributes, props.children);
}
function HeadingTwo(props) {
  return ___EmotionJSX(StyledH2, props.attributes, props.children);
}
function HeadingThree(props) {
  return ___EmotionJSX(StyledH3, props.attributes, props.children);
}
function HeadingFour(props) {
  return ___EmotionJSX(StyledH4, props.attributes, props.children);
}
function HeadingFive(props) {
  return ___EmotionJSX(StyledH5, props.attributes, props.children);
}
function HeadingSix(props) {
  return ___EmotionJSX(StyledH6, props.attributes, props.children);
}
function Table(props) {
  return ___EmotionJSX(StyledTable, null, ___EmotionJSX("tbody", props.attributes, props.children));
}
function TableRow(props) {
  return ___EmotionJSX("tr", props.attributes, props.children);
}
function TableCell(props) {
  return ___EmotionJSX(StyledTd, props.attributes, props.children);
}
function ThematicBreak(props) {
  const isSelected = useSelected();
  return ___EmotionJSX("div", props.attributes, props.children, ___EmotionJSX("div", {
    contentEditable: false
  }, ___EmotionJSX(StyledHr, _extends({}, props.attributes, {
    css: isSelected && /*#__PURE__*/css("box-shadow:0 0 0 2px ", colors.active, ";border-radius:8px;color:", colors.active, ";;label:ThematicBreak;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }))));
}
function Break(props) {
  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX("br", props.attributes), props.children);
}
function BulletedList(props) {
  return ___EmotionJSX(StyledUl, props.attributes, props.children);
}
function NumberedList(props) {
  return ___EmotionJSX(StyledOl, _extends({}, props.attributes, {
    start: 1
  }), props.children);
}
function Link(props) {
  const url = props.element.url;
  const title = props.element.title || url;
  return ___EmotionJSX(StyledA, _extends({
    href: url,
    title: title
  }, props.attributes), props.children);
}
function Image(props) {
  const {
    url,
    title,
    alt
  } = props.element.data;
  const isSelected = useSelected();
  return ___EmotionJSX("span", props.attributes, props.children, ___EmotionJSX("img", _extends({
    src: url,
    title: title,
    alt: alt
  }, props.attributes, {
    css: isSelected && /*#__PURE__*/css("box-shadow:0 0 0 2px ", colors.active, ";;label:Image;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  })));
}
export function Leaf({
  attributes,
  children,
  leaf
}) {
  if (leaf.bold) {
    children = ___EmotionJSX(Bold, null, children);
  }
  if (leaf.italic) {
    children = ___EmotionJSX(Italic, null, children);
  }
  if (leaf.delete) {
    children = ___EmotionJSX(Strikethrough, null, children);
  }
  if (leaf.code) {
    children = ___EmotionJSX(Code, null, children);
  }

  // if (leaf.break) {
  //   children = <Break />;
  // }

  return ___EmotionJSX("span", attributes, children);
}
export function renderInline__DEPRECATED() {
  return props => {
    switch (props.node.type) {
      case 'link':
        return ___EmotionJSX(Link, props);
      case 'image':
        return ___EmotionJSX(Image, props);
      case 'break':
        return ___EmotionJSX(Break, props);
    }
  };
}
export function Element(props) {
  const {
    children,
    element,
    classNameWrapper,
    codeBlockComponent
  } = props;
  const style = {
    textAlign: element.align
  };
  switch (element.type) {
    case 'bulleted-list':
      return ___EmotionJSX(BulletedList, null, children);
    case 'quote':
      return ___EmotionJSX(Quote, null, children);
    case 'heading-one':
      return ___EmotionJSX(HeadingOne, null, children);
    case 'heading-two':
      return ___EmotionJSX(HeadingTwo, null, children);
    case 'heading-three':
      return ___EmotionJSX(HeadingThree, null, children);
    case 'heading-four':
      return ___EmotionJSX(HeadingFour, null, children);
    case 'heading-five':
      return ___EmotionJSX(HeadingFive, null, children);
    case 'heading-six':
      return ___EmotionJSX(HeadingSix, null, children);
    case 'list-item':
      return ___EmotionJSX(ListItem, null, children);
    case 'numbered-list':
      return ___EmotionJSX(NumberedList, null, children);
    case 'table':
      return ___EmotionJSX(Table, props);
    case 'table-row':
      return ___EmotionJSX(TableRow, props);
    case 'table-cell':
      return ___EmotionJSX(TableCell, props);
    case 'thematic-break':
      return ___EmotionJSX(VoidBlock, props, ___EmotionJSX(ThematicBreak, props));
    case 'link':
      return ___EmotionJSX(Link, props);
    case 'image':
      return ___EmotionJSX(Image, props);
    case 'break':
      return ___EmotionJSX(Break, props);
    case 'shortcode':
      if (element.id === 'code-block' && codeBlockComponent) {
        return ___EmotionJSX(VoidBlock, props, ___EmotionJSX(Shortcode, _extends({
          classNameWrapper: classNameWrapper,
          typeOverload: "code-block"
        }, props)));
      }
      return ___EmotionJSX(VoidBlock, props, ___EmotionJSX(Shortcode, props, children));
    default:
      return ___EmotionJSX(Paragraph, {
        style: style
      }, children);
  }
}