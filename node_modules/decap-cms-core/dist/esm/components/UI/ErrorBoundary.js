import _styled from "@emotion/styled/base";
import React from 'react';
import PropTypes from 'prop-types';
import { translate } from 'react-polyglot';
import yaml from 'yaml';
import truncate from 'lodash/truncate';
import copyToClipboard from 'copy-text-to-clipboard';
import { localForage } from 'decap-cms-lib-util';
import { buttons, colors } from 'decap-cms-ui-default';
import cleanStack from 'clean-stack';
import { jsx as ___EmotionJSX } from "@emotion/react";
const ISSUE_URL = 'https://github.com/decaporg/decap-cms/issues/new?';
function getIssueTemplate({
  version,
  provider,
  browser,
  config
}) {
  return `
**Describe the bug**

**To Reproduce**

**Expected behavior**

**Screenshots**

**Applicable Versions:**
 - Decap CMS version: \`${version}\`
 - Git provider: \`${provider}\`
 - Browser version: \`${browser}\`

**CMS configuration**
\`\`\`
${config}
\`\`\`

**Additional context**
`;
}
function buildIssueTemplate({
  config
}) {
  let version = '';
  if (typeof DECAP_CMS_VERSION === 'string') {
    version = `decap-cms@${DECAP_CMS_VERSION}`;
  } else if (typeof "3.8.3" === 'string') {
    version = `decap-cms-app@${"3.8.3"}`;
  }
  const template = getIssueTemplate({
    version,
    provider: config.backend.name,
    browser: navigator.userAgent,
    config: yaml.stringify(config)
  });
  return template;
}
function buildIssueUrl({
  title,
  config
}) {
  try {
    const body = buildIssueTemplate({
      config
    });
    const params = new URLSearchParams();
    params.append('title', truncate(title, {
      length: 100
    }));
    params.append('body', truncate(body, {
      length: 4000,
      omission: '\n...'
    }));
    params.append('labels', 'type: bug');
    return `${ISSUE_URL}${params.toString()}`;
  } catch (e) {
    console.log(e);
    return `${ISSUE_URL}template=bug_report.md`;
  }
}
const ErrorBoundaryContainer = /*#__PURE__*/_styled("div", {
  target: "emw4gx72",
  label: "ErrorBoundaryContainer"
})("padding:40px;h1{font-size:28px;color:", colors.text, ";}h2{font-size:20px;}strong{color:", colors.textLead, ";font-weight:500;}hr{width:200px;margin:30px 0;border:0;height:1px;background-color:", colors.text, ";}a{color:", colors.active, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBc0V5QyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeWFtbCBmcm9tICd5YW1sJztcbmltcG9ydCB0cnVuY2F0ZSBmcm9tICdsb2Rhc2gvdHJ1bmNhdGUnO1xuaW1wb3J0IGNvcHlUb0NsaXBib2FyZCBmcm9tICdjb3B5LXRleHQtdG8tY2xpcGJvYXJkJztcbmltcG9ydCB7IGxvY2FsRm9yYWdlIH0gZnJvbSAnZGVjYXAtY21zLWxpYi11dGlsJztcbmltcG9ydCB7IGJ1dHRvbnMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBjbGVhblN0YWNrIGZyb20gJ2NsZWFuLXN0YWNrJztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9kZWNhcG9yZy9kZWNhcC1jbXMvaXNzdWVzL25ldz8nO1xuXG5mdW5jdGlvbiBnZXRJc3N1ZVRlbXBsYXRlKHsgdmVyc2lvbiwgcHJvdmlkZXIsIGJyb3dzZXIsIGNvbmZpZyB9KSB7XG4gIHJldHVybiBgXG4qKkRlc2NyaWJlIHRoZSBidWcqKlxuXG4qKlRvIFJlcHJvZHVjZSoqXG5cbioqRXhwZWN0ZWQgYmVoYXZpb3IqKlxuXG4qKlNjcmVlbnNob3RzKipcblxuKipBcHBsaWNhYmxlIFZlcnNpb25zOioqXG4gLSBEZWNhcCBDTVMgdmVyc2lvbjogXFxgJHt2ZXJzaW9ufVxcYFxuIC0gR2l0IHByb3ZpZGVyOiBcXGAke3Byb3ZpZGVyfVxcYFxuIC0gQnJvd3NlciB2ZXJzaW9uOiBcXGAke2Jyb3dzZXJ9XFxgXG5cbioqQ01TIGNvbmZpZ3VyYXRpb24qKlxuXFxgXFxgXFxgXG4ke2NvbmZpZ31cblxcYFxcYFxcYFxuXG4qKkFkZGl0aW9uYWwgY29udGV4dCoqXG5gO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSkge1xuICBsZXQgdmVyc2lvbiA9ICcnO1xuICBpZiAodHlwZW9mIERFQ0FQX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgZGVjYXAtY21zQCR7REVDQVBfQ01TX1ZFUlNJT059YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgREVDQVBfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgZGVjYXAtY21zLWFwcEAke0RFQ0FQX0NNU19BUFBfVkVSU0lPTn1gO1xuICB9XG4gIGNvbnN0IHRlbXBsYXRlID0gZ2V0SXNzdWVUZW1wbGF0ZSh7XG4gICAgdmVyc2lvbixcbiAgICBwcm92aWRlcjogY29uZmlnLmJhY2tlbmQubmFtZSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zdHJpbmdpZnkoY29uZmlnKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVXJsKHsgdGl0bGUsIGNvbmZpZyB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCd0aXRsZScsIHRydW5jYXRlKHRpdGxlLCB7IGxlbmd0aDogMTAwIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdib2R5JywgdHJ1bmNhdGUoYm9keSwgeyBsZW5ndGg6IDQwMDAsIG9taXNzaW9uOiAnXFxuLi4uJyB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnbGFiZWxzJywgJ3R5cGU6IGJ1ZycpO1xuXG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH0ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfXRlbXBsYXRlPWJ1Z19yZXBvcnQubWRgO1xuICB9XG59XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuZnVuY3Rpb24gUmVjb3ZlcmVkRW50cnkoeyBlbnRyeSwgdCB9KSB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2U6ICcnLFxuICAgIGVycm9yVGl0bGU6ICcnLFxuICAgIGJhY2t1cDogJycsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBoYXNFcnJvcjogdHJ1ZSxcbiAgICAgIGVycm9yTWVzc2FnZTogY2xlYW5TdGFjayhlcnJvci5zdGFjaywgeyBiYXNlUGF0aDogd2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fCAnJyB9KSxcbiAgICAgIGVycm9yVGl0bGU6IGVycm9yLnRvU3RyaW5nKCksXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIE1hbnVhbGx5IHZhbGlkYXRlIFByb3BUeXBlcyAtIFJlYWN0IDE5IGJyZWFraW5nIGNoYW5nZVxuICAgIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyhFcnJvckJvdW5kYXJ5LnByb3BUeXBlcywgdGhpcy5wcm9wcywgJ3Byb3AnLCAnRXJyb3JCb3VuZGFyeScpO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCwgZXJyb3JUaXRsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvclRpdGxlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));
const PrivacyWarning = /*#__PURE__*/_styled("span", {
  target: "emw4gx71",
  label: "PrivacyWarning"
})("color:", colors.text, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0drQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeWFtbCBmcm9tICd5YW1sJztcbmltcG9ydCB0cnVuY2F0ZSBmcm9tICdsb2Rhc2gvdHJ1bmNhdGUnO1xuaW1wb3J0IGNvcHlUb0NsaXBib2FyZCBmcm9tICdjb3B5LXRleHQtdG8tY2xpcGJvYXJkJztcbmltcG9ydCB7IGxvY2FsRm9yYWdlIH0gZnJvbSAnZGVjYXAtY21zLWxpYi11dGlsJztcbmltcG9ydCB7IGJ1dHRvbnMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBjbGVhblN0YWNrIGZyb20gJ2NsZWFuLXN0YWNrJztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9kZWNhcG9yZy9kZWNhcC1jbXMvaXNzdWVzL25ldz8nO1xuXG5mdW5jdGlvbiBnZXRJc3N1ZVRlbXBsYXRlKHsgdmVyc2lvbiwgcHJvdmlkZXIsIGJyb3dzZXIsIGNvbmZpZyB9KSB7XG4gIHJldHVybiBgXG4qKkRlc2NyaWJlIHRoZSBidWcqKlxuXG4qKlRvIFJlcHJvZHVjZSoqXG5cbioqRXhwZWN0ZWQgYmVoYXZpb3IqKlxuXG4qKlNjcmVlbnNob3RzKipcblxuKipBcHBsaWNhYmxlIFZlcnNpb25zOioqXG4gLSBEZWNhcCBDTVMgdmVyc2lvbjogXFxgJHt2ZXJzaW9ufVxcYFxuIC0gR2l0IHByb3ZpZGVyOiBcXGAke3Byb3ZpZGVyfVxcYFxuIC0gQnJvd3NlciB2ZXJzaW9uOiBcXGAke2Jyb3dzZXJ9XFxgXG5cbioqQ01TIGNvbmZpZ3VyYXRpb24qKlxuXFxgXFxgXFxgXG4ke2NvbmZpZ31cblxcYFxcYFxcYFxuXG4qKkFkZGl0aW9uYWwgY29udGV4dCoqXG5gO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSkge1xuICBsZXQgdmVyc2lvbiA9ICcnO1xuICBpZiAodHlwZW9mIERFQ0FQX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgZGVjYXAtY21zQCR7REVDQVBfQ01TX1ZFUlNJT059YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgREVDQVBfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgZGVjYXAtY21zLWFwcEAke0RFQ0FQX0NNU19BUFBfVkVSU0lPTn1gO1xuICB9XG4gIGNvbnN0IHRlbXBsYXRlID0gZ2V0SXNzdWVUZW1wbGF0ZSh7XG4gICAgdmVyc2lvbixcbiAgICBwcm92aWRlcjogY29uZmlnLmJhY2tlbmQubmFtZSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zdHJpbmdpZnkoY29uZmlnKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVXJsKHsgdGl0bGUsIGNvbmZpZyB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCd0aXRsZScsIHRydW5jYXRlKHRpdGxlLCB7IGxlbmd0aDogMTAwIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdib2R5JywgdHJ1bmNhdGUoYm9keSwgeyBsZW5ndGg6IDQwMDAsIG9taXNzaW9uOiAnXFxuLi4uJyB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnbGFiZWxzJywgJ3R5cGU6IGJ1ZycpO1xuXG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH0ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfXRlbXBsYXRlPWJ1Z19yZXBvcnQubWRgO1xuICB9XG59XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuZnVuY3Rpb24gUmVjb3ZlcmVkRW50cnkoeyBlbnRyeSwgdCB9KSB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2U6ICcnLFxuICAgIGVycm9yVGl0bGU6ICcnLFxuICAgIGJhY2t1cDogJycsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBoYXNFcnJvcjogdHJ1ZSxcbiAgICAgIGVycm9yTWVzc2FnZTogY2xlYW5TdGFjayhlcnJvci5zdGFjaywgeyBiYXNlUGF0aDogd2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fCAnJyB9KSxcbiAgICAgIGVycm9yVGl0bGU6IGVycm9yLnRvU3RyaW5nKCksXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIE1hbnVhbGx5IHZhbGlkYXRlIFByb3BUeXBlcyAtIFJlYWN0IDE5IGJyZWFraW5nIGNoYW5nZVxuICAgIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyhFcnJvckJvdW5kYXJ5LnByb3BUeXBlcywgdGhpcy5wcm9wcywgJ3Byb3AnLCAnRXJyb3JCb3VuZGFyeScpO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCwgZXJyb3JUaXRsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvclRpdGxlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));
const CopyButton = /*#__PURE__*/_styled("button", {
  target: "emw4gx70",
  label: "CopyButton"
})(buttons.button, ";", buttons.default, ";", buttons.gray, ";display:block;margin:12px 0;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1VJL0Vycm9yQm91bmRhcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0dnQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9VSS9FcnJvckJvdW5kYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeWFtbCBmcm9tICd5YW1sJztcbmltcG9ydCB0cnVuY2F0ZSBmcm9tICdsb2Rhc2gvdHJ1bmNhdGUnO1xuaW1wb3J0IGNvcHlUb0NsaXBib2FyZCBmcm9tICdjb3B5LXRleHQtdG8tY2xpcGJvYXJkJztcbmltcG9ydCB7IGxvY2FsRm9yYWdlIH0gZnJvbSAnZGVjYXAtY21zLWxpYi11dGlsJztcbmltcG9ydCB7IGJ1dHRvbnMsIGNvbG9ycyB9IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCBjbGVhblN0YWNrIGZyb20gJ2NsZWFuLXN0YWNrJztcblxuY29uc3QgSVNTVUVfVVJMID0gJ2h0dHBzOi8vZ2l0aHViLmNvbS9kZWNhcG9yZy9kZWNhcC1jbXMvaXNzdWVzL25ldz8nO1xuXG5mdW5jdGlvbiBnZXRJc3N1ZVRlbXBsYXRlKHsgdmVyc2lvbiwgcHJvdmlkZXIsIGJyb3dzZXIsIGNvbmZpZyB9KSB7XG4gIHJldHVybiBgXG4qKkRlc2NyaWJlIHRoZSBidWcqKlxuXG4qKlRvIFJlcHJvZHVjZSoqXG5cbioqRXhwZWN0ZWQgYmVoYXZpb3IqKlxuXG4qKlNjcmVlbnNob3RzKipcblxuKipBcHBsaWNhYmxlIFZlcnNpb25zOioqXG4gLSBEZWNhcCBDTVMgdmVyc2lvbjogXFxgJHt2ZXJzaW9ufVxcYFxuIC0gR2l0IHByb3ZpZGVyOiBcXGAke3Byb3ZpZGVyfVxcYFxuIC0gQnJvd3NlciB2ZXJzaW9uOiBcXGAke2Jyb3dzZXJ9XFxgXG5cbioqQ01TIGNvbmZpZ3VyYXRpb24qKlxuXFxgXFxgXFxgXG4ke2NvbmZpZ31cblxcYFxcYFxcYFxuXG4qKkFkZGl0aW9uYWwgY29udGV4dCoqXG5gO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVGVtcGxhdGUoeyBjb25maWcgfSkge1xuICBsZXQgdmVyc2lvbiA9ICcnO1xuICBpZiAodHlwZW9mIERFQ0FQX0NNU19WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgZGVjYXAtY21zQCR7REVDQVBfQ01TX1ZFUlNJT059YDtcbiAgfSBlbHNlIGlmICh0eXBlb2YgREVDQVBfQ01TX0FQUF9WRVJTSU9OID09PSAnc3RyaW5nJykge1xuICAgIHZlcnNpb24gPSBgZGVjYXAtY21zLWFwcEAke0RFQ0FQX0NNU19BUFBfVkVSU0lPTn1gO1xuICB9XG4gIGNvbnN0IHRlbXBsYXRlID0gZ2V0SXNzdWVUZW1wbGF0ZSh7XG4gICAgdmVyc2lvbixcbiAgICBwcm92aWRlcjogY29uZmlnLmJhY2tlbmQubmFtZSxcbiAgICBicm93c2VyOiBuYXZpZ2F0b3IudXNlckFnZW50LFxuICAgIGNvbmZpZzogeWFtbC5zdHJpbmdpZnkoY29uZmlnKSxcbiAgfSk7XG5cbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBidWlsZElzc3VlVXJsKHsgdGl0bGUsIGNvbmZpZyB9KSB7XG4gIHRyeSB7XG4gICAgY29uc3QgYm9keSA9IGJ1aWxkSXNzdWVUZW1wbGF0ZSh7IGNvbmZpZyB9KTtcblxuICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBwYXJhbXMuYXBwZW5kKCd0aXRsZScsIHRydW5jYXRlKHRpdGxlLCB7IGxlbmd0aDogMTAwIH0pKTtcbiAgICBwYXJhbXMuYXBwZW5kKCdib2R5JywgdHJ1bmNhdGUoYm9keSwgeyBsZW5ndGg6IDQwMDAsIG9taXNzaW9uOiAnXFxuLi4uJyB9KSk7XG4gICAgcGFyYW1zLmFwcGVuZCgnbGFiZWxzJywgJ3R5cGU6IGJ1ZycpO1xuXG4gICAgcmV0dXJuIGAke0lTU1VFX1VSTH0ke3BhcmFtcy50b1N0cmluZygpfWA7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmxvZyhlKTtcbiAgICByZXR1cm4gYCR7SVNTVUVfVVJMfXRlbXBsYXRlPWJ1Z19yZXBvcnQubWRgO1xuICB9XG59XG5cbmNvbnN0IEVycm9yQm91bmRhcnlDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiA0MHB4O1xuXG4gIGgxIHtcbiAgICBmb250LXNpemU6IDI4cHg7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5cbiAgaDIge1xuICAgIGZvbnQtc2l6ZTogMjBweDtcbiAgfVxuXG4gIHN0cm9uZyB7XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgaHIge1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBtYXJnaW46IDMwcHggMDtcbiAgICBib3JkZXI6IDA7XG4gICAgaGVpZ2h0OiAxcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMudGV4dH07XG4gIH1cblxuICBhIHtcbiAgICBjb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgUHJpdmFjeVdhcm5pbmcgPSBzdHlsZWQuc3BhbmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuYDtcblxuY29uc3QgQ29weUJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG1hcmdpbjogMTJweCAwO1xuYDtcblxuZnVuY3Rpb24gUmVjb3ZlcmVkRW50cnkoeyBlbnRyeSwgdCB9KSB7XG4gIGNvbnNvbGUubG9nKGVudHJ5KTtcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPGhyIC8+XG4gICAgICA8aDI+e3QoJ3VpLmVycm9yQm91bmRhcnkucmVjb3ZlcmVkRW50cnkuaGVhZGluZycpfTwvaDI+XG4gICAgICA8c3Ryb25nPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlY292ZXJlZEVudHJ5Lndhcm5pbmcnKX08L3N0cm9uZz5cbiAgICAgIDxDb3B5QnV0dG9uIG9uQ2xpY2s9eygpID0+IGNvcHlUb0NsaXBib2FyZChlbnRyeSl9PlxuICAgICAgICB7dCgndWkuZXJyb3JCb3VuZGFyeS5yZWNvdmVyZWRFbnRyeS5jb3B5QnV0dG9uTGFiZWwnKX1cbiAgICAgIDwvQ29weUJ1dHRvbj5cbiAgICAgIDxwcmU+XG4gICAgICAgIDxjb2RlPntlbnRyeX08L2NvZGU+XG4gICAgICA8L3ByZT5cbiAgICA8Lz5cbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGNvbmZpZzogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0ge1xuICAgIGhhc0Vycm9yOiBmYWxzZSxcbiAgICBlcnJvck1lc3NhZ2U6ICcnLFxuICAgIGVycm9yVGl0bGU6ICcnLFxuICAgIGJhY2t1cDogJycsXG4gIH07XG5cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiB7XG4gICAgICBoYXNFcnJvcjogdHJ1ZSxcbiAgICAgIGVycm9yTWVzc2FnZTogY2xlYW5TdGFjayhlcnJvci5zdGFjaywgeyBiYXNlUGF0aDogd2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fCAnJyB9KSxcbiAgICAgIGVycm9yVGl0bGU6IGVycm9yLnRvU3RyaW5nKCksXG4gICAgfTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIE1hbnVhbGx5IHZhbGlkYXRlIFByb3BUeXBlcyAtIFJlYWN0IDE5IGJyZWFraW5nIGNoYW5nZVxuICAgIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyhFcnJvckJvdW5kYXJ5LnByb3BUeXBlcywgdGhpcy5wcm9wcywgJ3Byb3AnLCAnRXJyb3JCb3VuZGFyeScpO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvd0JhY2t1cCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UgIT09IG5leHRTdGF0ZS5lcnJvck1lc3NhZ2UgfHwgdGhpcy5zdGF0ZS5iYWNrdXAgIT09IG5leHRTdGF0ZS5iYWNrdXBcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNob3dCYWNrdXApIHtcbiAgICAgIGNvbnN0IGJhY2t1cCA9IGF3YWl0IGxvY2FsRm9yYWdlLmdldEl0ZW0oJ2JhY2t1cCcpO1xuICAgICAgYmFja3VwICYmIGNvbnNvbGUubG9nKGJhY2t1cCk7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgYmFja3VwIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGhhc0Vycm9yLCBlcnJvck1lc3NhZ2UsIGJhY2t1cCwgZXJyb3JUaXRsZSB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHNob3dCYWNrdXAsIHQgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFoYXNFcnJvcikge1xuICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8RXJyb3JCb3VuZGFyeUNvbnRhaW5lcj5cbiAgICAgICAgPGgxPnt0KCd1aS5lcnJvckJvdW5kYXJ5LnRpdGxlJyl9PC9oMT5cbiAgICAgICAgPHA+XG4gICAgICAgICAgPHNwYW4+e3QoJ3VpLmVycm9yQm91bmRhcnkuZGV0YWlscycpfTwvc3Bhbj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgaHJlZj17YnVpbGRJc3N1ZVVybCh7IHRpdGxlOiBlcnJvclRpdGxlLCBjb25maWc6IHRoaXMucHJvcHMuY29uZmlnIH0pfVxuICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgZGF0YS10ZXN0aWQ9XCJpc3N1ZS11cmxcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnJlcG9ydEl0Jyl9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3A+XG4gICAgICAgIDxwPlxuICAgICAgICAgIHt0KCd1aS5lcnJvckJvdW5kYXJ5LnByaXZhY3lXYXJuaW5nJylcbiAgICAgICAgICAgIC5zcGxpdCgnXFxuJylcbiAgICAgICAgICAgIC5tYXAoKGl0ZW0sIGluZGV4KSA9PiAoXG4gICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgPFByaXZhY3lXYXJuaW5nIGtleT17aW5kZXh9PntpdGVtfTwvUHJpdmFjeVdhcm5pbmc+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgIDwvcD5cbiAgICAgICAgPGhyIC8+XG4gICAgICAgIDxoMj57dCgndWkuZXJyb3JCb3VuZGFyeS5kZXRhaWxzSGVhZGluZycpfTwvaDI+XG4gICAgICAgIDxwPntlcnJvck1lc3NhZ2V9PC9wPlxuICAgICAgICB7YmFja3VwICYmIHNob3dCYWNrdXAgJiYgPFJlY292ZXJlZEVudHJ5IGVudHJ5PXtiYWNrdXB9IHQ9e3R9IC8+fVxuICAgICAgPC9FcnJvckJvdW5kYXJ5Q29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdHJhbnNsYXRlKCkoRXJyb3JCb3VuZGFyeSk7XG4iXX0= */"));
function RecoveredEntry({
  entry,
  t
}) {
  console.log(entry);
  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX("hr", null), ___EmotionJSX("h2", null, t('ui.errorBoundary.recoveredEntry.heading')), ___EmotionJSX("strong", null, t('ui.errorBoundary.recoveredEntry.warning')), ___EmotionJSX(CopyButton, {
    onClick: () => copyToClipboard(entry)
  }, t('ui.errorBoundary.recoveredEntry.copyButtonLabel')), ___EmotionJSX("pre", null, ___EmotionJSX("code", null, entry)));
}
export class ErrorBoundary extends React.Component {
  static propTypes = {
    children: PropTypes.node,
    t: PropTypes.func.isRequired,
    config: PropTypes.object.isRequired
  };
  state = {
    hasError: false,
    errorMessage: '',
    errorTitle: '',
    backup: ''
  };
  static getDerivedStateFromError(error) {
    console.error(error);
    return {
      hasError: true,
      errorMessage: cleanStack(error.stack, {
        basePath: window.location.origin || ''
      }),
      errorTitle: error.toString()
    };
  }
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(ErrorBoundary.propTypes, this.props, 'prop', 'ErrorBoundary');
  }
  shouldComponentUpdate(nextProps, nextState) {
    if (this.props.showBackup) {
      return this.state.errorMessage !== nextState.errorMessage || this.state.backup !== nextState.backup;
    }
    return true;
  }
  async componentDidUpdate() {
    if (this.props.showBackup) {
      const backup = await localForage.getItem('backup');
      backup && console.log(backup);
      this.setState({
        backup
      });
    }
  }
  render() {
    const {
      hasError,
      errorMessage,
      backup,
      errorTitle
    } = this.state;
    const {
      showBackup,
      t
    } = this.props;
    if (!hasError) {
      return this.props.children;
    }
    return ___EmotionJSX(ErrorBoundaryContainer, null, ___EmotionJSX("h1", null, t('ui.errorBoundary.title')), ___EmotionJSX("p", null, ___EmotionJSX("span", null, t('ui.errorBoundary.details')), ___EmotionJSX("a", {
      href: buildIssueUrl({
        title: errorTitle,
        config: this.props.config
      }),
      target: "_blank",
      rel: "noopener noreferrer",
      "data-testid": "issue-url"
    }, t('ui.errorBoundary.reportIt'))), ___EmotionJSX("p", null, t('ui.errorBoundary.privacyWarning').split('\n').map((item, index) => ___EmotionJSX(React.Fragment, null, ___EmotionJSX(PrivacyWarning, {
      key: index
    }, item), ___EmotionJSX("br", null)))), ___EmotionJSX("hr", null), ___EmotionJSX("h2", null, t('ui.errorBoundary.detailsHeading')), ___EmotionJSX("p", null, errorMessage), backup && showBackup && ___EmotionJSX(RecoveredEntry, {
      entry: backup,
      t: t
    }));
  }
}
export default translate()(ErrorBoundary);