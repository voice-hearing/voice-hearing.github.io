import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { css } from '@emotion/react';
import { translate } from 'react-polyglot';
import { Link } from 'react-router-dom';
import { Icon, Dropdown, DropdownItem, StyledDropdownButton, colorsRaw, colors, components, buttons, zIndex } from 'decap-cms-ui-default';
import { status } from '../../constants/publishModes';
import { SettingsDropdown } from '../UI';
import { jsx as ___EmotionJSX } from "@emotion/react";
const styles = {
  noOverflow: process.env.NODE_ENV === "production" ? {
    name: "1ctb18k-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;label:noOverflow;"
  } : {
    name: "1ctb18k-noOverflow",
    styles: "overflow:hidden;white-space:nowrap;text-overflow:ellipsis;label:noOverflow;/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVCaUIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG4gIHpJbmRleCxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IFNldHRpbmdzRHJvcGRvd24gfSBmcm9tICcuLi9VSSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbm9PdmVyZmxvdzogY3NzYFxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgYCxcbiAgYnV0dG9uTWFyZ2luOiBjc3NgXG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gIGAsXG4gIHRvb2xiYXJTZWN0aW9uOiBjc3NgXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXI6IDAgc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYCxcbiAgcHVibGlzaGVkQnV0dG9uOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbERhcmt9O1xuICBgLFxufTtcblxuY29uc3QgVG9vbHRpcFRleHQgPSBzdHlsZWQuZGl2YFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHdpZHRoOiAzMjFweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU1NTtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtYWxpZ246IHVuc2V0O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIHBhZGRpbmc6IDVweDtcblxuICAvKiBQb3NpdGlvbiB0aGUgdG9vbHRpcCB0ZXh0ICovXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMTtcbiAgdG9wOiAxNDUlO1xuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAtMzIwcHg7XG5cbiAgLyogRmFkZSBpbiB0b29sdGlwICovXG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcztcbmA7XG5cbmNvbnN0IFRvb2x0aXAgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgJjpob3ZlciArICR7VG9vbHRpcFRleHR9IHtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIG9wYWNpdHk6IDAuOTtcbiAgfVxuYDtcblxuY29uc3QgVG9vbHRpcENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmA7XG5cbmNvbnN0IERyb3Bkb3duQnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMubm9PdmVyZmxvd31cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGJveC1zaGFkb3c6IDAgMnB4IDZweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4wNSksIDAgMXB4IDNweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4xKSxcbiAgICAwIDJweCA1NHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgzMDB9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBoZWlnaHQ6IDY2cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWFpbiA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgZmxleDogMTA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMCAxMHB4O1xuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NZXRhID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBib3JkZXItbGVmdC13aWR0aDogMXB4O1xuICBwYWRkaW5nOiAwIDdweDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJEcm9wZG93biA9IHN0eWxlZChEcm9wZG93bilgXG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG5cbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuICB9XG5gO1xuXG5jb25zdCBCYWNrQXJyb3cgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDIxcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbmA7XG5cbmNvbnN0IEJhY2tDb2xsZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAxNHB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1cyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDZweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNVbmNoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VTdWNjZXNzfTtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNDaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlRGFuZ2VyfTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuICAke3N0eWxlcy5ub092ZXJmbG93fTtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxuYDtcblxuY29uc3QgRGVsZXRlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRSZWR9O1xuYDtcblxuY29uc3QgU2F2ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0Qmx1ZX07XG4gICZbZGlzYWJsZWRdIHtcbiAgICAke2J1dHRvbnMuZGlzYWJsZWR9O1xuICB9XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRUb29sYmFyQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaGVkQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBTdGF0dXNCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBQcmV2aWV3QnV0dG9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgYSxcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICB9XG5cbiAgJHtJY29ufSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuICB9XG5gO1xuXG5jb25zdCBSZWZyZXNoUHJldmlld0J1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG5cbiAgc3BhbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFByZXZpZXdMaW5rID0gUmVmcmVzaFByZXZpZXdCdXR0b24ud2l0aENvbXBvbmVudCgnYScpO1xuXG5jb25zdCBQdWJsaXNoRHJvcERvd25JdGVtID0gc3R5bGVkKERyb3Bkb3duSXRlbSlgXG4gIG1pbi13aWR0aDogaW5pdGlhbDtcbmA7XG5cbmNvbnN0IFN0YXR1c0Ryb3Bkb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnMuaW5mb1RleHR9O1xuICB9XG5gO1xuXG5leHBvcnQgY2xhc3MgRWRpdG9yVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNQZXJzaXN0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1B1Ymxpc2hpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzVXBkYXRpbmdTdGF0dXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRGVsZXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGVyc2lzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVuUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaGFzQ2hhbmdlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLFxuICAgIHVzZU9wZW5BdXRob3Jpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNOZXdFbnRyeTogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNNb2RpZmljYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIGN1cnJlbnRTdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25Mb2dvdXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvYWREZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZWRpdG9yQmFja0xpbms6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoRWRpdG9yVG9vbGJhci5wcm9wVHlwZXMsIHRoaXMucHJvcHMsICdwcm9wJywgJ0VkaXRvclRvb2xiYXInKTtcblxuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHNob3dEZWxldGUsIG9uRGVsZXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWRcbiAgICAgICAgICA/IHRoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KVxuICAgICAgICAgIDogdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7c2hvd0RlbGV0ZSA/IChcbiAgICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IHt9LCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHVybCwgc3RhdHVzLCBpc0ZldGNoaW5nIH0gPSBkZXBsb3lQcmV2aWV3O1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQsIGN1cnJlbnRTdGF0dXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzdGF0dXNUb0xvY2FsZUtleSA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogJ3N0YXR1c0luZm9Ub29sdGlwRHJhZnQnLFxuICAgICAgW3N0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBJblJldmlldycsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0tleSA9IE9iamVjdC5rZXlzKHN0YXR1c1RvTG9jYWxlS2V5KS5maW5kKGtleSA9PiBrZXkgPT09IGN1cnJlbnRTdGF0dXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbnRhaW5lcj5cbiAgICAgICAgPFRvb2x0aXA+XG4gICAgICAgICAgPEljb24gdHlwZT1cImluZm8tY2lyY2xlXCIgc2l6ZT1cInNtYWxsXCIgY2xhc3NOYW1lPVwidG9vbHRpcFwiIC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAge3N0YXR1c0tleSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXBUZXh0Pnt0KGBlZGl0b3IuZWRpdG9yVG9vbGJhci4ke3N0YXR1c1RvTG9jYWxlS2V5W3N0YXR1c0tleV19YCl9PC9Ub29sdGlwVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbHRpcENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvVHJhbnNsYXRpb24gPSB7XG4gICAgICBbc3RhdHVzLmdldCgnRFJBRlQnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJyldOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpLFxuICAgIH07XG5cbiAgICBjb25zdCBidXR0b25UZXh0ID0gaXNVcGRhdGluZ1N0YXR1c1xuICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51cGRhdGluZycpXG4gICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnN0YXR1cycsIHsgc3RhdHVzOiBzdGF0dXNUb1RyYW5zbGF0aW9uW2N1cnJlbnRTdGF0dXNdIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gPFN0YXR1c0J1dHRvbj57YnV0dG9uVGV4dH08L1N0YXR1c0J1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19SRVZJRVcnKX1cbiAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgJiYgdGhpcy5yZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCgpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjIwMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2h9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxQdWJsaXNoRHJvcERvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2gsIGNhbkRlbGV0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyB1blB1Ymxpc2gsIG9uRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2FuUHVibGlzaCB8fCBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwibWF4LWNvbnRlbnRcIlxuICAgICAgICBrZXk9XCJ0ZC1wdWJsaXNoLWNyZWF0ZVwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7Y2FuRGVsZXRlICYmIGNhblB1Ymxpc2ggJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICAnJ1xuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvbkR1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIm1heC1jb250ZW50XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV3RW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25QZXJzaXN0LCBvblBlcnNpc3RBbmROZXcsIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwibWF4LWNvbnRlbnRcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcbiAgICBjb25zdCBjYW5EZWxldGUgPSBjb2xsZWN0aW9uLmdldCgnZGVsZXRlJywgdHJ1ZSk7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgIGtleT1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX1cbiAgICAgID5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgIGN1cnJlbnRTdGF0dXNcbiAgICAgICAgPyBbXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PVwid29ya2Zsb3ctc3RhdHVzLWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMoKX1cbiAgICAgICAgICAgICAgeyFoYXNDaGFuZ2VkICYmIHRoaXMucmVuZGVyTmV3RW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+LFxuICAgICAgICAgIF1cbiAgICAgICAgOiAhaXNOZXdFbnRyeSAmJiAoXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PVwiZXhpc3RpbmctZW50cnktd29ya2Zsb3ctcHVibGlzaC1jb250cm9sc1wiPlxuICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoe1xuICAgICAgICAgICAgICAgIGNhbkNyZWF0ZSxcbiAgICAgICAgICAgICAgICBjYW5QdWJsaXNoLFxuICAgICAgICAgICAgICAgIGNhbkRlbGV0ZSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICksXG4gICAgICAoIXNob3dEZWxldGUgfHwgdXNlT3BlbkF1dGhvcmluZykgJiYgIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gPyBudWxsIDogKFxuICAgICAgICA8RGVsZXRlQnV0dG9uXG4gICAgICAgICAga2V5PVwiZGVsZXRlLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17aGFzVW5wdWJsaXNoZWRDaGFuZ2VzID8gb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMgOiBvbkRlbGV0ZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpc0RlbGV0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRpbmcnKSA6IGRlbGV0ZUxhYmVsfVxuICAgICAgICA8L0RlbGV0ZUJ1dHRvbj5cbiAgICAgICksXG4gICAgXTtcbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd0RlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnRTdGF0dXMsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY3VycmVudFN0YXR1cykge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdCdXR0b25MYWJlbCcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoIGNvbnRyb2wgZm9yIHB1Ymxpc2hlZCB3b3JrZmxvdyBlbnRyeS5cbiAgICAgKi9cbiAgICBpZiAoIWlzTmV3RW50cnkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXIsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgZGlzcGxheVVybCxcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIG9uTG9nb3V0Q2xpY2ssXG4gICAgICB0LFxuICAgICAgZWRpdG9yQmFja0xpbmssXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJDb250YWluZXI+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbkJhY2tMaW5rIHRvPXtlZGl0b3JCYWNrTGlua30+XG4gICAgICAgICAgPEJhY2tBcnJvdz7ihpA8L0JhY2tBcnJvdz5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEJhY2tDb2xsZWN0aW9uPlxuICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuYmFja0NvbGxlY3Rpb24nLCB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbkxhYmVsOiBjb2xsZWN0aW9uLmdldCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L0JhY2tDb2xsZWN0aW9uPlxuICAgICAgICAgICAge2hhc0NoYW5nZWQgPyAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzQ2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5zYXZlZENoYW5nZXMnKX08L0JhY2tTdGF0dXNDaGFuZ2VkPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNVbmNoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmNoYW5nZXNTYXZlZCcpfTwvQmFja1N0YXR1c1VuY2hhbmdlZD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25CYWNrTGluaz5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uTWFpbj5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvdyA/IHRoaXMucmVuZGVyV29ya2Zsb3dDb250cm9scygpIDogdGhpcy5yZW5kZXJTaW1wbGVDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93XG4gICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJXb3JrZmxvd0RlcGxveVByZXZpZXdDb250cm9scygpXG4gICAgICAgICAgICAgIDogdGhpcy5yZW5kZXJTaW1wbGVEZXBsb3lQcmV2aWV3Q29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICAgICAgPFNldHRpbmdzRHJvcGRvd25cbiAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICBpbWFnZVVybD17dXNlcj8uYXZhdGFyX3VybH1cbiAgICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICA8L1Rvb2xiYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFZGl0b3JUb29sYmFyKTtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  buttonMargin: process.env.NODE_ENV === "production" ? {
    name: "bx8mhy-buttonMargin",
    styles: "margin:0 10px;label:buttonMargin;"
  } : {
    name: "bx8mhy-buttonMargin",
    styles: "margin:0 10px;label:buttonMargin;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  },
  toolbarSection: /*#__PURE__*/css("height:100%;display:flex;align-items:center;border:0 solid ", colors.textFieldBorder, ";;label:toolbarSection;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  publishedButton: /*#__PURE__*/css("background-color:", colorsRaw.tealLight, ";color:", colorsRaw.tealDark, ";;label:publishedButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
const TooltipText = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo26",
  label: "TooltipText"
})(process.env.NODE_ENV === "production" ? {
  name: "1ykbu60",
  styles: "visibility:hidden;width:321px;background-color:#555;color:#fff;text-align:unset;border-radius:6px;padding:5px;position:absolute;z-index:1;top:145%;left:50%;margin-left:-320px;opacity:0;transition:opacity 0.3s"
} : {
  name: "1ykbu60",
  styles: "visibility:hidden;width:321px;background-color:#555;color:#fff;text-align:unset;border-radius:6px;padding:5px;position:absolute;z-index:1;top:145%;left:50%;margin-left:-320px;opacity:0;transition:opacity 0.3s/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const Tooltip = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo25",
  label: "Tooltip"
})("position:relative;display:inline-block;&:hover+", TooltipText, "{visibility:visible;opacity:0.9;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TooltipContainer = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo24",
  label: "TooltipContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "bjn8wh",
  styles: "position:relative"
} : {
  name: "bjn8wh",
  styles: "position:relative/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const DropdownButton = /*#__PURE__*/_styled(StyledDropdownButton, {
  target: "e1d2l9mo23",
  label: "DropdownButton"
})(styles.noOverflow, "@media (max-width: 1200px){padding-left:10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarContainer = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo22",
  label: "ToolbarContainer"
})("box-shadow:0 2px 6px 0 rgba(68, 74, 87, 0.05),0 1px 3px 0 rgba(68, 74, 87, 0.1),0 2px 54px rgba(0, 0, 0, 0.1);position:absolute;top:0;left:0;width:100%;min-width:800px;z-index:", zIndex.zIndex300, ";background-color:#fff;height:66px;display:flex;justify-content:space-between;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMain = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo21",
  label: "ToolbarSectionMain"
})(styles.toolbarSection, ";flex:10;display:flex;justify-content:space-between;padding:0 10px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSubSectionFirst = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo20",
  label: "ToolbarSubSectionFirst"
})(process.env.NODE_ENV === "production" ? {
  name: "s5xdrg",
  styles: "display:flex;align-items:center"
} : {
  name: "s5xdrg",
  styles: "display:flex;align-items:center/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSubSectionLast = /*#__PURE__*/_styled(ToolbarSubSectionFirst, {
  target: "e1d2l9mo19",
  label: "ToolbarSubSectionLast"
})(process.env.NODE_ENV === "production" ? {
  name: "1f60if8",
  styles: "justify-content:flex-end"
} : {
  name: "1f60if8",
  styles: "justify-content:flex-end/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ToolbarSectionBackLink = /*#__PURE__*/_styled(Link, {
  target: "e1d2l9mo18",
  label: "ToolbarSectionBackLink"
})(styles.toolbarSection, ";border-right-width:1px;font-weight:normal;padding:0 20px;&:hover,&:focus{background-color:#f1f2f4;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarSectionMeta = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo17",
  label: "ToolbarSectionMeta"
})(styles.toolbarSection, ";border-left-width:1px;padding:0 7px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ToolbarDropdown = /*#__PURE__*/_styled(Dropdown, {
  target: "e1d2l9mo16",
  label: "ToolbarDropdown"
})(styles.buttonMargin, ";", Icon, "{color:", colorsRaw.teal, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackArrow = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo15",
  label: "BackArrow"
})("color:", colors.textLead, ";font-size:21px;font-weight:600;margin-right:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackCollection = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo14",
  label: "BackCollection"
})("color:", colors.textLead, ";font-size:14px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatus = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo13",
  label: "BackStatus"
})(process.env.NODE_ENV === "production" ? {
  name: "j9a02z",
  styles: "margin-top:6px"
} : {
  name: "j9a02z",
  styles: "margin-top:6px/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTBKNkIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG4gIHpJbmRleCxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IFNldHRpbmdzRHJvcGRvd24gfSBmcm9tICcuLi9VSSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbm9PdmVyZmxvdzogY3NzYFxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgYCxcbiAgYnV0dG9uTWFyZ2luOiBjc3NgXG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gIGAsXG4gIHRvb2xiYXJTZWN0aW9uOiBjc3NgXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXI6IDAgc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYCxcbiAgcHVibGlzaGVkQnV0dG9uOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbERhcmt9O1xuICBgLFxufTtcblxuY29uc3QgVG9vbHRpcFRleHQgPSBzdHlsZWQuZGl2YFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHdpZHRoOiAzMjFweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU1NTtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtYWxpZ246IHVuc2V0O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIHBhZGRpbmc6IDVweDtcblxuICAvKiBQb3NpdGlvbiB0aGUgdG9vbHRpcCB0ZXh0ICovXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMTtcbiAgdG9wOiAxNDUlO1xuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAtMzIwcHg7XG5cbiAgLyogRmFkZSBpbiB0b29sdGlwICovXG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcztcbmA7XG5cbmNvbnN0IFRvb2x0aXAgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgJjpob3ZlciArICR7VG9vbHRpcFRleHR9IHtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIG9wYWNpdHk6IDAuOTtcbiAgfVxuYDtcblxuY29uc3QgVG9vbHRpcENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmA7XG5cbmNvbnN0IERyb3Bkb3duQnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMubm9PdmVyZmxvd31cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGJveC1zaGFkb3c6IDAgMnB4IDZweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4wNSksIDAgMXB4IDNweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4xKSxcbiAgICAwIDJweCA1NHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgzMDB9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBoZWlnaHQ6IDY2cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWFpbiA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgZmxleDogMTA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMCAxMHB4O1xuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NZXRhID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBib3JkZXItbGVmdC13aWR0aDogMXB4O1xuICBwYWRkaW5nOiAwIDdweDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJEcm9wZG93biA9IHN0eWxlZChEcm9wZG93bilgXG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG5cbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuICB9XG5gO1xuXG5jb25zdCBCYWNrQXJyb3cgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDIxcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbmA7XG5cbmNvbnN0IEJhY2tDb2xsZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAxNHB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1cyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDZweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNVbmNoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VTdWNjZXNzfTtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNDaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlRGFuZ2VyfTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuICAke3N0eWxlcy5ub092ZXJmbG93fTtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxuYDtcblxuY29uc3QgRGVsZXRlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRSZWR9O1xuYDtcblxuY29uc3QgU2F2ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0Qmx1ZX07XG4gICZbZGlzYWJsZWRdIHtcbiAgICAke2J1dHRvbnMuZGlzYWJsZWR9O1xuICB9XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRUb29sYmFyQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaGVkQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBTdGF0dXNCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBQcmV2aWV3QnV0dG9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgYSxcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICB9XG5cbiAgJHtJY29ufSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuICB9XG5gO1xuXG5jb25zdCBSZWZyZXNoUHJldmlld0J1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG5cbiAgc3BhbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFByZXZpZXdMaW5rID0gUmVmcmVzaFByZXZpZXdCdXR0b24ud2l0aENvbXBvbmVudCgnYScpO1xuXG5jb25zdCBQdWJsaXNoRHJvcERvd25JdGVtID0gc3R5bGVkKERyb3Bkb3duSXRlbSlgXG4gIG1pbi13aWR0aDogaW5pdGlhbDtcbmA7XG5cbmNvbnN0IFN0YXR1c0Ryb3Bkb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnMuaW5mb1RleHR9O1xuICB9XG5gO1xuXG5leHBvcnQgY2xhc3MgRWRpdG9yVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNQZXJzaXN0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1B1Ymxpc2hpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzVXBkYXRpbmdTdGF0dXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRGVsZXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGVyc2lzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVuUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaGFzQ2hhbmdlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLFxuICAgIHVzZU9wZW5BdXRob3Jpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNOZXdFbnRyeTogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNNb2RpZmljYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIGN1cnJlbnRTdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25Mb2dvdXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvYWREZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZWRpdG9yQmFja0xpbms6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoRWRpdG9yVG9vbGJhci5wcm9wVHlwZXMsIHRoaXMucHJvcHMsICdwcm9wJywgJ0VkaXRvclRvb2xiYXInKTtcblxuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHNob3dEZWxldGUsIG9uRGVsZXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWRcbiAgICAgICAgICA/IHRoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KVxuICAgICAgICAgIDogdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7c2hvd0RlbGV0ZSA/IChcbiAgICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IHt9LCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHVybCwgc3RhdHVzLCBpc0ZldGNoaW5nIH0gPSBkZXBsb3lQcmV2aWV3O1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQsIGN1cnJlbnRTdGF0dXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzdGF0dXNUb0xvY2FsZUtleSA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogJ3N0YXR1c0luZm9Ub29sdGlwRHJhZnQnLFxuICAgICAgW3N0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBJblJldmlldycsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0tleSA9IE9iamVjdC5rZXlzKHN0YXR1c1RvTG9jYWxlS2V5KS5maW5kKGtleSA9PiBrZXkgPT09IGN1cnJlbnRTdGF0dXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbnRhaW5lcj5cbiAgICAgICAgPFRvb2x0aXA+XG4gICAgICAgICAgPEljb24gdHlwZT1cImluZm8tY2lyY2xlXCIgc2l6ZT1cInNtYWxsXCIgY2xhc3NOYW1lPVwidG9vbHRpcFwiIC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAge3N0YXR1c0tleSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXBUZXh0Pnt0KGBlZGl0b3IuZWRpdG9yVG9vbGJhci4ke3N0YXR1c1RvTG9jYWxlS2V5W3N0YXR1c0tleV19YCl9PC9Ub29sdGlwVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbHRpcENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvVHJhbnNsYXRpb24gPSB7XG4gICAgICBbc3RhdHVzLmdldCgnRFJBRlQnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJyldOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpLFxuICAgIH07XG5cbiAgICBjb25zdCBidXR0b25UZXh0ID0gaXNVcGRhdGluZ1N0YXR1c1xuICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51cGRhdGluZycpXG4gICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnN0YXR1cycsIHsgc3RhdHVzOiBzdGF0dXNUb1RyYW5zbGF0aW9uW2N1cnJlbnRTdGF0dXNdIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gPFN0YXR1c0J1dHRvbj57YnV0dG9uVGV4dH08L1N0YXR1c0J1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19SRVZJRVcnKX1cbiAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgJiYgdGhpcy5yZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCgpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjIwMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2h9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxQdWJsaXNoRHJvcERvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2gsIGNhbkRlbGV0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyB1blB1Ymxpc2gsIG9uRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2FuUHVibGlzaCB8fCBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwibWF4LWNvbnRlbnRcIlxuICAgICAgICBrZXk9XCJ0ZC1wdWJsaXNoLWNyZWF0ZVwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7Y2FuRGVsZXRlICYmIGNhblB1Ymxpc2ggJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICAnJ1xuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvbkR1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIm1heC1jb250ZW50XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV3RW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25QZXJzaXN0LCBvblBlcnNpc3RBbmROZXcsIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwibWF4LWNvbnRlbnRcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcbiAgICBjb25zdCBjYW5EZWxldGUgPSBjb2xsZWN0aW9uLmdldCgnZGVsZXRlJywgdHJ1ZSk7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgIGtleT1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX1cbiAgICAgID5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgIGN1cnJlbnRTdGF0dXNcbiAgICAgICAgPyBbXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PVwid29ya2Zsb3ctc3RhdHVzLWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMoKX1cbiAgICAgICAgICAgICAgeyFoYXNDaGFuZ2VkICYmIHRoaXMucmVuZGVyTmV3RW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+LFxuICAgICAgICAgIF1cbiAgICAgICAgOiAhaXNOZXdFbnRyeSAmJiAoXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PVwiZXhpc3RpbmctZW50cnktd29ya2Zsb3ctcHVibGlzaC1jb250cm9sc1wiPlxuICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoe1xuICAgICAgICAgICAgICAgIGNhbkNyZWF0ZSxcbiAgICAgICAgICAgICAgICBjYW5QdWJsaXNoLFxuICAgICAgICAgICAgICAgIGNhbkRlbGV0ZSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICksXG4gICAgICAoIXNob3dEZWxldGUgfHwgdXNlT3BlbkF1dGhvcmluZykgJiYgIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gPyBudWxsIDogKFxuICAgICAgICA8RGVsZXRlQnV0dG9uXG4gICAgICAgICAga2V5PVwiZGVsZXRlLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17aGFzVW5wdWJsaXNoZWRDaGFuZ2VzID8gb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMgOiBvbkRlbGV0ZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpc0RlbGV0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRpbmcnKSA6IGRlbGV0ZUxhYmVsfVxuICAgICAgICA8L0RlbGV0ZUJ1dHRvbj5cbiAgICAgICksXG4gICAgXTtcbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd0RlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnRTdGF0dXMsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY3VycmVudFN0YXR1cykge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdCdXR0b25MYWJlbCcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoIGNvbnRyb2wgZm9yIHB1Ymxpc2hlZCB3b3JrZmxvdyBlbnRyeS5cbiAgICAgKi9cbiAgICBpZiAoIWlzTmV3RW50cnkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXIsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgZGlzcGxheVVybCxcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIG9uTG9nb3V0Q2xpY2ssXG4gICAgICB0LFxuICAgICAgZWRpdG9yQmFja0xpbmssXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJDb250YWluZXI+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbkJhY2tMaW5rIHRvPXtlZGl0b3JCYWNrTGlua30+XG4gICAgICAgICAgPEJhY2tBcnJvdz7ihpA8L0JhY2tBcnJvdz5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEJhY2tDb2xsZWN0aW9uPlxuICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuYmFja0NvbGxlY3Rpb24nLCB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbkxhYmVsOiBjb2xsZWN0aW9uLmdldCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L0JhY2tDb2xsZWN0aW9uPlxuICAgICAgICAgICAge2hhc0NoYW5nZWQgPyAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzQ2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5zYXZlZENoYW5nZXMnKX08L0JhY2tTdGF0dXNDaGFuZ2VkPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNVbmNoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmNoYW5nZXNTYXZlZCcpfTwvQmFja1N0YXR1c1VuY2hhbmdlZD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25CYWNrTGluaz5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uTWFpbj5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvdyA/IHRoaXMucmVuZGVyV29ya2Zsb3dDb250cm9scygpIDogdGhpcy5yZW5kZXJTaW1wbGVDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93XG4gICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJXb3JrZmxvd0RlcGxveVByZXZpZXdDb250cm9scygpXG4gICAgICAgICAgICAgIDogdGhpcy5yZW5kZXJTaW1wbGVEZXBsb3lQcmV2aWV3Q29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICAgICAgPFNldHRpbmdzRHJvcGRvd25cbiAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICBpbWFnZVVybD17dXNlcj8uYXZhdGFyX3VybH1cbiAgICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICA8L1Rvb2xiYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFZGl0b3JUb29sYmFyKTtcbiJdfQ== */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const BackStatusUnchanged = /*#__PURE__*/_styled(BackStatus, {
  target: "e1d2l9mo12",
  label: "BackStatusUnchanged"
})(components.textBadgeSuccess, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const BackStatusChanged = /*#__PURE__*/_styled(BackStatus, {
  target: "e1d2l9mo11",
  label: "BackStatusChanged"
})(components.textBadgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JUb29sYmFyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtLNEMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvRWRpdG9yL0VkaXRvclRvb2xiYXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQge1xuICBJY29uLFxuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgY29sb3JzUmF3LFxuICBjb2xvcnMsXG4gIGNvbXBvbmVudHMsXG4gIGJ1dHRvbnMsXG4gIHpJbmRleCxcbn0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IFNldHRpbmdzRHJvcGRvd24gfSBmcm9tICcuLi9VSSc7XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgbm9PdmVyZmxvdzogY3NzYFxuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgYCxcbiAgYnV0dG9uTWFyZ2luOiBjc3NgXG4gICAgbWFyZ2luOiAwIDEwcHg7XG4gIGAsXG4gIHRvb2xiYXJTZWN0aW9uOiBjc3NgXG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBib3JkZXI6IDAgc29saWQgJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgYCxcbiAgcHVibGlzaGVkQnV0dG9uOiBjc3NgXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbExpZ2h0fTtcbiAgICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbERhcmt9O1xuICBgLFxufTtcblxuY29uc3QgVG9vbHRpcFRleHQgPSBzdHlsZWQuZGl2YFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHdpZHRoOiAzMjFweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogIzU1NTtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtYWxpZ246IHVuc2V0O1xuICBib3JkZXItcmFkaXVzOiA2cHg7XG4gIHBhZGRpbmc6IDVweDtcblxuICAvKiBQb3NpdGlvbiB0aGUgdG9vbHRpcCB0ZXh0ICovXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogMTtcbiAgdG9wOiAxNDUlO1xuICBsZWZ0OiA1MCU7XG4gIG1hcmdpbi1sZWZ0OiAtMzIwcHg7XG5cbiAgLyogRmFkZSBpbiB0b29sdGlwICovXG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IG9wYWNpdHkgMC4zcztcbmA7XG5cbmNvbnN0IFRvb2x0aXAgPSBzdHlsZWQuZGl2YFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgJjpob3ZlciArICR7VG9vbHRpcFRleHR9IHtcbiAgICB2aXNpYmlsaXR5OiB2aXNpYmxlO1xuICAgIG9wYWNpdHk6IDAuOTtcbiAgfVxuYDtcblxuY29uc3QgVG9vbHRpcENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmA7XG5cbmNvbnN0IERyb3Bkb3duQnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMubm9PdmVyZmxvd31cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIGJveC1zaGFkb3c6IDAgMnB4IDZweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4wNSksIDAgMXB4IDNweCAwIHJnYmEoNjgsIDc0LCA4NywgMC4xKSxcbiAgICAwIDJweCA1NHB4IHJnYmEoMCwgMCwgMCwgMC4xKTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAxMDAlO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgzMDB9O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICBoZWlnaHQ6IDY2cHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IFRvb2xiYXJTZWN0aW9uTWFpbiA9IHN0eWxlZC5kaXZgXG4gICR7c3R5bGVzLnRvb2xiYXJTZWN0aW9ufTtcbiAgZmxleDogMTA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgcGFkZGluZzogMCAxMHB4O1xuYDtcblxuY29uc3QgVG9vbGJhclN1YlNlY3Rpb25GaXJzdCA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5gO1xuXG5jb25zdCBUb29sYmFyU3ViU2VjdGlvbkxhc3QgPSBzdHlsZWQoVG9vbGJhclN1YlNlY3Rpb25GaXJzdClgXG4gIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG5gO1xuXG5jb25zdCBUb29sYmFyU2VjdGlvbkJhY2tMaW5rID0gc3R5bGVkKExpbmspYFxuICAke3N0eWxlcy50b29sYmFyU2VjdGlvbn07XG4gIGJvcmRlci1yaWdodC13aWR0aDogMXB4O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICBwYWRkaW5nOiAwIDIwcHg7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YxZjJmNDtcbiAgfVxuYDtcblxuY29uc3QgVG9vbGJhclNlY3Rpb25NZXRhID0gc3R5bGVkLmRpdmBcbiAgJHtzdHlsZXMudG9vbGJhclNlY3Rpb259O1xuICBib3JkZXItbGVmdC13aWR0aDogMXB4O1xuICBwYWRkaW5nOiAwIDdweDtcbmA7XG5cbmNvbnN0IFRvb2xiYXJEcm9wZG93biA9IHN0eWxlZChEcm9wZG93bilgXG4gICR7c3R5bGVzLmJ1dHRvbk1hcmdpbn07XG5cbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LnRlYWx9O1xuICB9XG5gO1xuXG5jb25zdCBCYWNrQXJyb3cgPSBzdHlsZWQuZGl2YFxuICBjb2xvcjogJHtjb2xvcnMudGV4dExlYWR9O1xuICBmb250LXNpemU6IDIxcHg7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIG1hcmdpbi1yaWdodDogMTZweDtcbmA7XG5cbmNvbnN0IEJhY2tDb2xsZWN0aW9uID0gc3R5bGVkLmRpdmBcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgZm9udC1zaXplOiAxNHB4O1xuYDtcblxuY29uc3QgQmFja1N0YXR1cyA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbi10b3A6IDZweDtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNVbmNoYW5nZWQgPSBzdHlsZWQoQmFja1N0YXR1cylgXG4gICR7Y29tcG9uZW50cy50ZXh0QmFkZ2VTdWNjZXNzfTtcbmA7XG5cbmNvbnN0IEJhY2tTdGF0dXNDaGFuZ2VkID0gc3R5bGVkKEJhY2tTdGF0dXMpYFxuICAke2NvbXBvbmVudHMudGV4dEJhZGdlRGFuZ2VyfTtcbmA7XG5cbmNvbnN0IFRvb2xiYXJCdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke3N0eWxlcy5idXR0b25NYXJnaW59O1xuICAke3N0eWxlcy5ub092ZXJmbG93fTtcbiAgZGlzcGxheTogYmxvY2s7XG5cbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEyMDBweCkge1xuICAgIHBhZGRpbmc6IDAgMTBweDtcbiAgfVxuYDtcblxuY29uc3QgRGVsZXRlQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke2J1dHRvbnMubGlnaHRSZWR9O1xuYDtcblxuY29uc3QgU2F2ZUJ1dHRvbiA9IHN0eWxlZChUb29sYmFyQnV0dG9uKWBcbiAgJHtidXR0b25zLmxpZ2h0Qmx1ZX07XG4gICZbZGlzYWJsZWRdIHtcbiAgICAke2J1dHRvbnMuZGlzYWJsZWR9O1xuICB9XG5gO1xuXG5jb25zdCBQdWJsaXNoZWRUb29sYmFyQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgJHtzdHlsZXMucHVibGlzaGVkQnV0dG9ufVxuYDtcblxuY29uc3QgUHVibGlzaGVkQnV0dG9uID0gc3R5bGVkKFRvb2xiYXJCdXR0b24pYFxuICAke3N0eWxlcy5wdWJsaXNoZWRCdXR0b259XG5gO1xuXG5jb25zdCBQdWJsaXNoQnV0dG9uID0gc3R5bGVkKERyb3Bkb3duQnV0dG9uKWBcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBTdGF0dXNCdXR0b24gPSBzdHlsZWQoRHJvcGRvd25CdXR0b24pYFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy50ZWFsTGlnaHR9O1xuICBjb2xvcjogJHtjb2xvcnNSYXcudGVhbH07XG5gO1xuXG5jb25zdCBQcmV2aWV3QnV0dG9uQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgYSxcbiAgJHtJY29ufSB7XG4gICAgY29sb3I6ICR7Y29sb3JzUmF3LmJsdWV9O1xuICB9XG5cbiAgJHtJY29ufSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHRvcDogMXB4O1xuICB9XG5gO1xuXG5jb25zdCBSZWZyZXNoUHJldmlld0J1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gIGJhY2tncm91bmQ6IG5vbmU7XG4gIGJvcmRlcjogMDtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBjb2xvcjogJHtjb2xvcnNSYXcuYmx1ZX07XG5cbiAgc3BhbiB7XG4gICAgbWFyZ2luLXJpZ2h0OiA2cHg7XG4gIH1cbmA7XG5cbmNvbnN0IFByZXZpZXdMaW5rID0gUmVmcmVzaFByZXZpZXdCdXR0b24ud2l0aENvbXBvbmVudCgnYScpO1xuXG5jb25zdCBQdWJsaXNoRHJvcERvd25JdGVtID0gc3R5bGVkKERyb3Bkb3duSXRlbSlgXG4gIG1pbi13aWR0aDogaW5pdGlhbDtcbmA7XG5cbmNvbnN0IFN0YXR1c0Ryb3Bkb3duSXRlbSA9IHN0eWxlZChEcm9wZG93bkl0ZW0pYFxuICAke0ljb259IHtcbiAgICBjb2xvcjogJHtjb2xvcnMuaW5mb1RleHR9O1xuICB9XG5gO1xuXG5leHBvcnQgY2xhc3MgRWRpdG9yVG9vbGJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgaXNQZXJzaXN0aW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc1B1Ymxpc2hpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzVXBkYXRpbmdTdGF0dXM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzRGVsZXRpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uUGVyc2lzdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblBlcnNpc3RBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QZXJzaXN0QW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25DaGFuZ2VTdGF0dXM6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVuUHVibGlzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkR1cGxpY2F0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvblB1Ymxpc2hBbmROZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgb25QdWJsaXNoQW5kRHVwbGljYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHVzZXI6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaGFzQ2hhbmdlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLFxuICAgIHVzZU9wZW5BdXRob3Jpbmc6IFByb3BUeXBlcy5ib29sLFxuICAgIGhhc1VucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNOZXdFbnRyeTogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNNb2RpZmljYXRpb246IFByb3BUeXBlcy5ib29sLFxuICAgIGN1cnJlbnRTdGF0dXM6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb25Mb2dvdXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBkZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvYWREZXBsb3lQcmV2aWV3OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgZWRpdG9yQmFja0xpbms6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoRWRpdG9yVG9vbGJhci5wcm9wVHlwZXMsIHRoaXMucHJvcHMsICdwcm9wJywgJ0VkaXRvclRvb2xiYXInKTtcblxuICAgIGNvbnN0IHsgaXNOZXdFbnRyeSwgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5KSB7XG4gICAgICBsb2FkRGVwbG95UHJldmlldyh7IG1heEF0dGVtcHRzOiAzIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBjb25zdCB7IGlzTmV3RW50cnksIGlzUGVyc2lzdGluZywgbG9hZERlcGxveVByZXZpZXcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFpc05ld0VudHJ5ICYmIHByZXZQcm9wcy5pc1BlcnNpc3RpbmcgJiYgIWlzUGVyc2lzdGluZykge1xuICAgICAgbG9hZERlcGxveVByZXZpZXcoeyBtYXhBdHRlbXB0czogMyB9KTtcbiAgICB9XG4gIH1cblxuICByZW5kZXJTaW1wbGVDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHNob3dEZWxldGUsIG9uRGVsZXRlLCB0IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7IWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWRcbiAgICAgICAgICA/IHRoaXMucmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KVxuICAgICAgICAgIDogdGhpcy5yZW5kZXJOZXdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSB9KX1cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICB7c2hvd0RlbGV0ZSA/IChcbiAgICAgICAgICAgIDxEZWxldGVCdXR0b24gb25DbGljaz17b25EZWxldGV9Pnt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVFbnRyeScpfTwvRGVsZXRlQnV0dG9uPlxuICAgICAgICAgICkgOiBudWxsfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzID0gbGFiZWwgPT4ge1xuICAgIGNvbnN0IHsgZGVwbG95UHJldmlldyA9IHt9LCBsb2FkRGVwbG95UHJldmlldywgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IHVybCwgc3RhdHVzLCBpc0ZldGNoaW5nIH0gPSBkZXBsb3lQcmV2aWV3O1xuXG4gICAgaWYgKCFzdGF0dXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkZXBsb3lQcmV2aWV3UmVhZHkgPSBzdGF0dXMgPT09ICdTVUNDRVNTJyAmJiAhaXNGZXRjaGluZztcbiAgICByZXR1cm4gKFxuICAgICAgPFByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgICAgIHtkZXBsb3lQcmV2aWV3UmVhZHkgPyAoXG4gICAgICAgICAgPFByZXZpZXdMaW5rIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIiB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPXt1cmx9PlxuICAgICAgICAgICAgPHNwYW4+e2xhYmVsfTwvc3Bhbj5cbiAgICAgICAgICAgIDxJY29uIHR5cGU9XCJuZXctdGFiXCIgc2l6ZT1cInhzbWFsbFwiIC8+XG4gICAgICAgICAgPC9QcmV2aWV3TGluaz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8UmVmcmVzaFByZXZpZXdCdXR0b24gb25DbGljaz17bG9hZERlcGxveVByZXZpZXd9PlxuICAgICAgICAgICAgPHNwYW4+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdQZW5kaW5nQnV0dG9uTGFiZWwnKX08L3NwYW4+XG4gICAgICAgICAgICA8SWNvbiB0eXBlPVwicmVmcmVzaFwiIHNpemU9XCJ4c21hbGxcIiAvPlxuICAgICAgICAgIDwvUmVmcmVzaFByZXZpZXdCdXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L1ByZXZpZXdCdXR0b25Db250YWluZXI+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCA9ICgpID0+IHtcbiAgICBjb25zdCB7IHQsIGN1cnJlbnRTdGF0dXMgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzdGF0dXNUb0xvY2FsZUtleSA9IHtcbiAgICAgIFtzdGF0dXMuZ2V0KCdEUkFGVCcpXTogJ3N0YXR1c0luZm9Ub29sdGlwRHJhZnQnLFxuICAgICAgW3N0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJyldOiAnc3RhdHVzSW5mb1Rvb2x0aXBJblJldmlldycsXG4gICAgfTtcblxuICAgIGNvbnN0IHN0YXR1c0tleSA9IE9iamVjdC5rZXlzKHN0YXR1c1RvTG9jYWxlS2V5KS5maW5kKGtleSA9PiBrZXkgPT09IGN1cnJlbnRTdGF0dXMpO1xuICAgIHJldHVybiAoXG4gICAgICA8VG9vbHRpcENvbnRhaW5lcj5cbiAgICAgICAgPFRvb2x0aXA+XG4gICAgICAgICAgPEljb24gdHlwZT1cImluZm8tY2lyY2xlXCIgc2l6ZT1cInNtYWxsXCIgY2xhc3NOYW1lPVwidG9vbHRpcFwiIC8+XG4gICAgICAgIDwvVG9vbHRpcD5cbiAgICAgICAge3N0YXR1c0tleSAmJiAoXG4gICAgICAgICAgPFRvb2x0aXBUZXh0Pnt0KGBlZGl0b3IuZWRpdG9yVG9vbGJhci4ke3N0YXR1c1RvTG9jYWxlS2V5W3N0YXR1c0tleV19YCl9PC9Ub29sdGlwVGV4dD5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbHRpcENvbnRhaW5lcj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMgPSAoKSA9PiB7XG4gICAgY29uc3QgeyBpc1VwZGF0aW5nU3RhdHVzLCBvbkNoYW5nZVN0YXR1cywgY3VycmVudFN0YXR1cywgdCwgdXNlT3BlbkF1dGhvcmluZyB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHN0YXR1c1RvVHJhbnNsYXRpb24gPSB7XG4gICAgICBbc3RhdHVzLmdldCgnRFJBRlQnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRyYWZ0JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19SRVZJRVcnKV06IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3JyksXG4gICAgICBbc3RhdHVzLmdldCgnUEVORElOR19QVUJMSVNIJyldOiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpLFxuICAgIH07XG5cbiAgICBjb25zdCBidXR0b25UZXh0ID0gaXNVcGRhdGluZ1N0YXR1c1xuICAgICAgPyB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51cGRhdGluZycpXG4gICAgICA6IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnN0YXR1cycsIHsgc3RhdHVzOiBzdGF0dXNUb1RyYW5zbGF0aW9uW2N1cnJlbnRTdGF0dXNdIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTIwcHhcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gPFN0YXR1c0J1dHRvbj57YnV0dG9uVGV4dH08L1N0YXR1c0J1dHRvbj59XG4gICAgICAgID5cbiAgICAgICAgICA8U3RhdHVzRHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKX1cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQ2hhbmdlU3RhdHVzKCdEUkFGVCcpfVxuICAgICAgICAgICAgaWNvbj17Y3VycmVudFN0YXR1cyA9PT0gc3RhdHVzLmdldCgnRFJBRlQnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmluUmV2aWV3Jyl9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbkNoYW5nZVN0YXR1cygnUEVORElOR19SRVZJRVcnKX1cbiAgICAgICAgICAgIGljb249e2N1cnJlbnRTdGF0dXMgPT09IHN0YXR1cy5nZXQoJ1BFTkRJTkdfUkVWSUVXJykgPyAnY2hlY2snIDogbnVsbH1cbiAgICAgICAgICAvPlxuICAgICAgICAgIHt1c2VPcGVuQXV0aG9yaW5nID8gKFxuICAgICAgICAgICAgJydcbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPFN0YXR1c0Ryb3Bkb3duSXRlbVxuICAgICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucmVhZHknKX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gb25DaGFuZ2VTdGF0dXMoJ1BFTkRJTkdfUFVCTElTSCcpfVxuICAgICAgICAgICAgICBpY29uPXtjdXJyZW50U3RhdHVzID09PSBzdGF0dXMuZ2V0KCdQRU5ESU5HX1BVQkxJU0gnKSA/ICdjaGVjaycgOiBudWxsfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1Rvb2xiYXJEcm9wZG93bj5cbiAgICAgICAge3VzZU9wZW5BdXRob3JpbmcgJiYgdGhpcy5yZW5kZXJTdGF0dXNJbmZvVG9vbHRpcCgpfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJOZXdFbnRyeVdvcmtmbG93UHVibGlzaENvbnRyb2xzID0gKHsgY2FuQ3JlYXRlLCBjYW5QdWJsaXNoIH0pID0+IHtcbiAgICBjb25zdCB7IGlzUHVibGlzaGluZywgb25QdWJsaXNoLCBvblB1Ymxpc2hBbmROZXcsIG9uUHVibGlzaEFuZER1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiBjYW5QdWJsaXNoID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIjIwMHB4XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICB7aXNQdWJsaXNoaW5nXG4gICAgICAgICAgICAgID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgIDwvUHVibGlzaEJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgaWNvbkRpcmVjdGlvbj1cInJpZ2h0XCJcbiAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2h9XG4gICAgICAgIC8+XG4gICAgICAgIHtjYW5DcmVhdGUgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxQdWJsaXNoRHJvcERvd25JdGVtXG4gICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgICBvbkNsaWNrPXtvblB1Ymxpc2hBbmROZXd9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFB1Ymxpc2hEcm9wRG93bkl0ZW1cbiAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9e29uUHVibGlzaEFuZER1cGxpY2F0ZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiBudWxsfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgICcnXG4gICAgKTtcbiAgfTtcblxuICByZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUsIGNhblB1Ymxpc2gsIGNhbkRlbGV0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyB1blB1Ymxpc2gsIG9uRHVwbGljYXRlLCBpc1BlcnNpc3RpbmcsIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gY2FuUHVibGlzaCB8fCBjYW5DcmVhdGUgPyAoXG4gICAgICA8VG9vbGJhckRyb3Bkb3duXG4gICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICBkcm9wZG93bldpZHRoPVwibWF4LWNvbnRlbnRcIlxuICAgICAgICBrZXk9XCJ0ZC1wdWJsaXNoLWNyZWF0ZVwiXG4gICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgIDxQdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICAgICAge2lzUGVyc2lzdGluZ1xuICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnVucHVibGlzaGluZycpXG4gICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaGVkJyl9XG4gICAgICAgICAgPC9QdWJsaXNoZWRUb29sYmFyQnV0dG9uPlxuICAgICAgICApfVxuICAgICAgPlxuICAgICAgICB7Y2FuRGVsZXRlICYmIGNhblB1Ymxpc2ggJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci51bnB1Ymxpc2gnKX1cbiAgICAgICAgICAgIGljb249XCJhcnJvd1wiXG4gICAgICAgICAgICBpY29uRGlyZWN0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgb25DbGljaz17dW5QdWJsaXNofVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICAgIHtjYW5DcmVhdGUgJiYgKFxuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9vbGJhckRyb3Bkb3duPlxuICAgICkgOiAoXG4gICAgICAnJ1xuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyRXhpc3RpbmdFbnRyeVNpbXBsZVB1Ymxpc2hDb250cm9scyA9ICh7IGNhbkNyZWF0ZSB9KSA9PiB7XG4gICAgY29uc3QgeyBvbkR1cGxpY2F0ZSwgdCB9ID0gdGhpcy5wcm9wcztcbiAgICByZXR1cm4gY2FuQ3JlYXRlID8gKFxuICAgICAgPFRvb2xiYXJEcm9wZG93blxuICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgZHJvcGRvd25XaWR0aD1cIm1heC1jb250ZW50XCJcbiAgICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiAoXG4gICAgICAgICAgPFB1Ymxpc2hlZFRvb2xiYXJCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkVG9vbGJhckJ1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgID5cbiAgICAgICAge1xuICAgICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kdXBsaWNhdGUnKX1cbiAgICAgICAgICAgIGljb249XCJhZGRcIlxuICAgICAgICAgICAgb25DbGljaz17b25EdXBsaWNhdGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgfVxuICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgKSA6IChcbiAgICAgIDxQdWJsaXNoZWRCdXR0b24+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hlZCcpfTwvUHVibGlzaGVkQnV0dG9uPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyTmV3RW50cnlTaW1wbGVQdWJsaXNoQ29udHJvbHMgPSAoeyBjYW5DcmVhdGUgfSkgPT4ge1xuICAgIGNvbnN0IHsgb25QZXJzaXN0LCBvblBlcnNpc3RBbmROZXcsIG9uUGVyc2lzdEFuZER1cGxpY2F0ZSwgaXNQZXJzaXN0aW5nLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxUb29sYmFyRHJvcGRvd25cbiAgICAgICAgICBkcm9wZG93blRvcE92ZXJsYXA9XCI0MHB4XCJcbiAgICAgICAgICBkcm9wZG93bldpZHRoPVwibWF4LWNvbnRlbnRcIlxuICAgICAgICAgIHJlbmRlckJ1dHRvbj17KCkgPT4gKFxuICAgICAgICAgICAgPFB1Ymxpc2hCdXR0b24+XG4gICAgICAgICAgICAgIHtpc1BlcnNpc3RpbmdcbiAgICAgICAgICAgICAgICA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hpbmcnKVxuICAgICAgICAgICAgICAgIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaCcpfVxuICAgICAgICAgICAgPC9QdWJsaXNoQnV0dG9uPlxuICAgICAgICAgICl9XG4gICAgICAgID5cbiAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICBsYWJlbD17dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIucHVibGlzaE5vdycpfVxuICAgICAgICAgICAgaWNvbj1cImFycm93XCJcbiAgICAgICAgICAgIGljb25EaXJlY3Rpb249XCJyaWdodFwiXG4gICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3R9XG4gICAgICAgICAgLz5cbiAgICAgICAgICB7Y2FuQ3JlYXRlID8gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgIGxhYmVsPXt0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5wdWJsaXNoQW5kQ3JlYXRlTmV3Jyl9XG4gICAgICAgICAgICAgICAgaWNvbj1cImFkZFwiXG4gICAgICAgICAgICAgICAgb25DbGljaz17b25QZXJzaXN0QW5kTmV3fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgbGFiZWw9e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnB1Ymxpc2hBbmREdXBsaWNhdGUnKX1cbiAgICAgICAgICAgICAgICBpY29uPVwiYWRkXCJcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXtvblBlcnNpc3RBbmREdXBsaWNhdGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgPC9Ub29sYmFyRHJvcGRvd24+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlclNpbXBsZURlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGhhc0NoYW5nZWQsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoIWlzTmV3RW50cnkgJiYgIWhhc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyV29ya2Zsb3dDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBvblBlcnNpc3QsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgc2hvd0RlbGV0ZSxcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBoYXNVbnB1Ymxpc2hlZENoYW5nZXMsXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaXNQZXJzaXN0aW5nLFxuICAgICAgaXNEZWxldGluZyxcbiAgICAgIGlzTmV3RW50cnksXG4gICAgICBpc01vZGlmaWNhdGlvbixcbiAgICAgIGN1cnJlbnRTdGF0dXMsXG4gICAgICBjb2xsZWN0aW9uLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNhbkNyZWF0ZSA9IGNvbGxlY3Rpb24uZ2V0KCdjcmVhdGUnKTtcbiAgICBjb25zdCBjYW5QdWJsaXNoID0gY29sbGVjdGlvbi5nZXQoJ3B1Ymxpc2gnKSAmJiAhdXNlT3BlbkF1dGhvcmluZztcbiAgICBjb25zdCBjYW5EZWxldGUgPSBjb2xsZWN0aW9uLmdldCgnZGVsZXRlJywgdHJ1ZSk7XG5cbiAgICBjb25zdCBkZWxldGVMYWJlbCA9XG4gICAgICAoaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmXG4gICAgICAgIGlzTW9kaWZpY2F0aW9uICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlcycpKSB8fFxuICAgICAgKGhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJlxuICAgICAgICAoaXNOZXdFbnRyeSB8fCAhaXNNb2RpZmljYXRpb24pICYmXG4gICAgICAgIHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlbGV0ZVVucHVibGlzaGVkRW50cnknKSkgfHxcbiAgICAgICghaGFzVW5wdWJsaXNoZWRDaGFuZ2VzICYmICFpc01vZGlmaWNhdGlvbiAmJiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZWxldGVQdWJsaXNoZWRFbnRyeScpKTtcblxuICAgIHJldHVybiBbXG4gICAgICA8U2F2ZUJ1dHRvblxuICAgICAgICBkaXNhYmxlZD17IWhhc0NoYW5nZWR9XG4gICAgICAgIGtleT1cInNhdmUtYnV0dG9uXCJcbiAgICAgICAgb25DbGljaz17KCkgPT4gaGFzQ2hhbmdlZCAmJiBvblBlcnNpc3QoKX1cbiAgICAgID5cbiAgICAgICAge2lzUGVyc2lzdGluZyA/IHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLnNhdmluZycpIDogdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuc2F2ZScpfVxuICAgICAgPC9TYXZlQnV0dG9uPixcbiAgICAgIGN1cnJlbnRTdGF0dXNcbiAgICAgICAgPyBbXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PVwid29ya2Zsb3ctc3RhdHVzLWNvbnRyb2xzXCI+XG4gICAgICAgICAgICAgIHt0aGlzLnJlbmRlcldvcmtmbG93U3RhdHVzQ29udHJvbHMoKX1cbiAgICAgICAgICAgICAgeyFoYXNDaGFuZ2VkICYmIHRoaXMucmVuZGVyTmV3RW50cnlXb3JrZmxvd1B1Ymxpc2hDb250cm9scyh7IGNhbkNyZWF0ZSwgY2FuUHVibGlzaCB9KX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+LFxuICAgICAgICAgIF1cbiAgICAgICAgOiAhaXNOZXdFbnRyeSAmJiAoXG4gICAgICAgICAgICA8UmVhY3QuRnJhZ21lbnQga2V5PVwiZXhpc3RpbmctZW50cnktd29ya2Zsb3ctcHVibGlzaC1jb250cm9sc1wiPlxuICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJFeGlzdGluZ0VudHJ5V29ya2Zsb3dQdWJsaXNoQ29udHJvbHMoe1xuICAgICAgICAgICAgICAgIGNhbkNyZWF0ZSxcbiAgICAgICAgICAgICAgICBjYW5QdWJsaXNoLFxuICAgICAgICAgICAgICAgIGNhbkRlbGV0ZSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICksXG4gICAgICAoIXNob3dEZWxldGUgfHwgdXNlT3BlbkF1dGhvcmluZykgJiYgIWhhc1VucHVibGlzaGVkQ2hhbmdlcyAmJiAhaXNNb2RpZmljYXRpb24gPyBudWxsIDogKFxuICAgICAgICA8RGVsZXRlQnV0dG9uXG4gICAgICAgICAga2V5PVwiZGVsZXRlLWJ1dHRvblwiXG4gICAgICAgICAgb25DbGljaz17aGFzVW5wdWJsaXNoZWRDaGFuZ2VzID8gb25EZWxldGVVbnB1Ymxpc2hlZENoYW5nZXMgOiBvbkRlbGV0ZX1cbiAgICAgICAgPlxuICAgICAgICAgIHtpc0RlbGV0aW5nID8gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZGVsZXRpbmcnKSA6IGRlbGV0ZUxhYmVsfVxuICAgICAgICA8L0RlbGV0ZUJ1dHRvbj5cbiAgICAgICksXG4gICAgXTtcbiAgfTtcblxuICByZW5kZXJXb3JrZmxvd0RlcGxveVByZXZpZXdDb250cm9scyA9ICgpID0+IHtcbiAgICBjb25zdCB7IGN1cnJlbnRTdGF0dXMsIGlzTmV3RW50cnksIHQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoY3VycmVudFN0YXR1cykge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyRGVwbG95UHJldmlld0NvbnRyb2xzKHQoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmRlcGxveVByZXZpZXdCdXR0b25MYWJlbCcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQdWJsaXNoIGNvbnRyb2wgZm9yIHB1Ymxpc2hlZCB3b3JrZmxvdyBlbnRyeS5cbiAgICAgKi9cbiAgICBpZiAoIWlzTmV3RW50cnkpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlckRlcGxveVByZXZpZXdDb250cm9scyh0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5kZXBsb3lCdXR0b25MYWJlbCcpKTtcbiAgICB9XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHVzZXIsXG4gICAgICBoYXNDaGFuZ2VkLFxuICAgICAgZGlzcGxheVVybCxcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIG9uTG9nb3V0Q2xpY2ssXG4gICAgICB0LFxuICAgICAgZWRpdG9yQmFja0xpbmssXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFRvb2xiYXJDb250YWluZXI+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbkJhY2tMaW5rIHRvPXtlZGl0b3JCYWNrTGlua30+XG4gICAgICAgICAgPEJhY2tBcnJvdz7ihpA8L0JhY2tBcnJvdz5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEJhY2tDb2xsZWN0aW9uPlxuICAgICAgICAgICAgICB7dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuYmFja0NvbGxlY3Rpb24nLCB7XG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbkxhYmVsOiBjb2xsZWN0aW9uLmdldCgnbGFiZWwnKSxcbiAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICA8L0JhY2tDb2xsZWN0aW9uPlxuICAgICAgICAgICAge2hhc0NoYW5nZWQgPyAoXG4gICAgICAgICAgICAgIDxCYWNrU3RhdHVzQ2hhbmdlZD57dCgnZWRpdG9yLmVkaXRvclRvb2xiYXIudW5zYXZlZENoYW5nZXMnKX08L0JhY2tTdGF0dXNDaGFuZ2VkPlxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPEJhY2tTdGF0dXNVbmNoYW5nZWQ+e3QoJ2VkaXRvci5lZGl0b3JUb29sYmFyLmNoYW5nZXNTYXZlZCcpfTwvQmFja1N0YXR1c1VuY2hhbmdlZD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvVG9vbGJhclNlY3Rpb25CYWNrTGluaz5cbiAgICAgICAgPFRvb2xiYXJTZWN0aW9uTWFpbj5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICAgIHtoYXNXb3JrZmxvdyA/IHRoaXMucmVuZGVyV29ya2Zsb3dDb250cm9scygpIDogdGhpcy5yZW5kZXJTaW1wbGVDb250cm9scygpfVxuICAgICAgICAgIDwvVG9vbGJhclN1YlNlY3Rpb25GaXJzdD5cbiAgICAgICAgICA8VG9vbGJhclN1YlNlY3Rpb25MYXN0PlxuICAgICAgICAgICAge2hhc1dvcmtmbG93XG4gICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJXb3JrZmxvd0RlcGxveVByZXZpZXdDb250cm9scygpXG4gICAgICAgICAgICAgIDogdGhpcy5yZW5kZXJTaW1wbGVEZXBsb3lQcmV2aWV3Q29udHJvbHMoKX1cbiAgICAgICAgICA8L1Rvb2xiYXJTdWJTZWN0aW9uTGFzdD5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1haW4+XG4gICAgICAgIDxUb29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICAgICAgPFNldHRpbmdzRHJvcGRvd25cbiAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICBpbWFnZVVybD17dXNlcj8uYXZhdGFyX3VybH1cbiAgICAgICAgICAgIG9uTG9nb3V0Q2xpY2s9e29uTG9nb3V0Q2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9Ub29sYmFyU2VjdGlvbk1ldGE+XG4gICAgICA8L1Rvb2xiYXJDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0cmFuc2xhdGUoKShFZGl0b3JUb29sYmFyKTtcbiJdfQ== */"));
const ToolbarButton = /*#__PURE__*/_styled("button", {
  target: "e1d2l9mo10",
  label: "ToolbarButton"
})(buttons.button, ";", buttons.default, ";", styles.buttonMargin, ";", styles.noOverflow, ";display:block;@media (max-width: 1200px){padding:0 10px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const DeleteButton = /*#__PURE__*/_styled(ToolbarButton, {
  target: "e1d2l9mo9",
  label: "DeleteButton"
})(buttons.lightRed, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SaveButton = /*#__PURE__*/_styled(ToolbarButton, {
  target: "e1d2l9mo8",
  label: "SaveButton"
})(buttons.lightBlue, ";&[disabled]{", buttons.disabled, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedToolbarButton = /*#__PURE__*/_styled(DropdownButton, {
  target: "e1d2l9mo7",
  label: "PublishedToolbarButton"
})(styles.publishedButton, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishedButton = /*#__PURE__*/_styled(ToolbarButton, {
  target: "e1d2l9mo6",
  label: "PublishedButton"
})(styles.publishedButton, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PublishButton = /*#__PURE__*/_styled(DropdownButton, {
  target: "e1d2l9mo5",
  label: "PublishButton"
})("background-color:", colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const StatusButton = /*#__PURE__*/_styled(DropdownButton, {
  target: "e1d2l9mo4",
  label: "StatusButton"
})("background-color:", colorsRaw.tealLight, ";color:", colorsRaw.teal, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewButtonContainer = /*#__PURE__*/_styled("div", {
  target: "e1d2l9mo3",
  label: "PreviewButtonContainer"
})("margin-right:12px;color:", colorsRaw.blue, ";display:flex;align-items:center;a,", Icon, "{color:", colorsRaw.blue, ";}", Icon, "{position:relative;top:1px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const RefreshPreviewButton = /*#__PURE__*/_styled("button", {
  target: "e1d2l9mo2",
  label: "RefreshPreviewButton"
})("background:none;border:0;cursor:pointer;color:", colorsRaw.blue, ";span{margin-right:6px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const PreviewLink = RefreshPreviewButton.withComponent('a', {
  target: "e1d2l9mo27",
  label: "PreviewLink"
});
const PublishDropDownItem = /*#__PURE__*/_styled(DropdownItem, {
  target: "e1d2l9mo1",
  label: "PublishDropDownItem"
})(process.env.NODE_ENV === "production" ? {
  name: "svxjwj",
  styles: "min-width:initial"
} : {
  name: "svxjwj",
  styles: "min-width:initial/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StatusDropdownItem = /*#__PURE__*/_styled(DropdownItem, {
  target: "e1d2l9mo0",
  label: "StatusDropdownItem"
})(Icon, "{color:", colors.infoText, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
export class EditorToolbar extends React.Component {
  static propTypes = {
    isPersisting: PropTypes.bool,
    isPublishing: PropTypes.bool,
    isUpdatingStatus: PropTypes.bool,
    isDeleting: PropTypes.bool,
    onPersist: PropTypes.func.isRequired,
    onPersistAndNew: PropTypes.func.isRequired,
    onPersistAndDuplicate: PropTypes.func.isRequired,
    showDelete: PropTypes.bool.isRequired,
    onDelete: PropTypes.func.isRequired,
    onDeleteUnpublishedChanges: PropTypes.func.isRequired,
    onChangeStatus: PropTypes.func.isRequired,
    onPublish: PropTypes.func.isRequired,
    unPublish: PropTypes.func.isRequired,
    onDuplicate: PropTypes.func.isRequired,
    onPublishAndNew: PropTypes.func.isRequired,
    onPublishAndDuplicate: PropTypes.func.isRequired,
    user: PropTypes.object,
    hasChanged: PropTypes.bool,
    displayUrl: PropTypes.string,
    collection: ImmutablePropTypes.map.isRequired,
    hasWorkflow: PropTypes.bool,
    useOpenAuthoring: PropTypes.bool,
    hasUnpublishedChanges: PropTypes.bool,
    isNewEntry: PropTypes.bool,
    isModification: PropTypes.bool,
    currentStatus: PropTypes.string,
    onLogoutClick: PropTypes.func.isRequired,
    deployPreview: PropTypes.object,
    loadDeployPreview: PropTypes.func.isRequired,
    t: PropTypes.func.isRequired,
    editorBackLink: PropTypes.string.isRequired
  };
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(EditorToolbar.propTypes, this.props, 'prop', 'EditorToolbar');
    const {
      isNewEntry,
      loadDeployPreview
    } = this.props;
    if (!isNewEntry) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }
  componentDidUpdate(prevProps) {
    const {
      isNewEntry,
      isPersisting,
      loadDeployPreview
    } = this.props;
    if (!isNewEntry && prevProps.isPersisting && !isPersisting) {
      loadDeployPreview({
        maxAttempts: 3
      });
    }
  }
  renderSimpleControls = () => {
    const {
      collection,
      hasChanged,
      isNewEntry,
      showDelete,
      onDelete,
      t
    } = this.props;
    const canCreate = collection.get('create');
    return ___EmotionJSX(React.Fragment, null, !isNewEntry && !hasChanged ? this.renderExistingEntrySimplePublishControls({
      canCreate
    }) : this.renderNewEntrySimplePublishControls({
      canCreate
    }), ___EmotionJSX("div", null, showDelete ? ___EmotionJSX(DeleteButton, {
      onClick: onDelete
    }, t('editor.editorToolbar.deleteEntry')) : null));
  };
  renderDeployPreviewControls = label => {
    const {
      deployPreview = {},
      loadDeployPreview,
      t
    } = this.props;
    const {
      url,
      status,
      isFetching
    } = deployPreview;
    if (!status) {
      return;
    }
    const deployPreviewReady = status === 'SUCCESS' && !isFetching;
    return ___EmotionJSX(PreviewButtonContainer, null, deployPreviewReady ? ___EmotionJSX(PreviewLink, {
      rel: "noopener noreferrer",
      target: "_blank",
      href: url
    }, ___EmotionJSX("span", null, label), ___EmotionJSX(Icon, {
      type: "new-tab",
      size: "xsmall"
    })) : ___EmotionJSX(RefreshPreviewButton, {
      onClick: loadDeployPreview
    }, ___EmotionJSX("span", null, t('editor.editorToolbar.deployPreviewPendingButtonLabel')), ___EmotionJSX(Icon, {
      type: "refresh",
      size: "xsmall"
    })));
  };
  renderStatusInfoTooltip = () => {
    const {
      t,
      currentStatus
    } = this.props;
    const statusToLocaleKey = {
      [status.get('DRAFT')]: 'statusInfoTooltipDraft',
      [status.get('PENDING_REVIEW')]: 'statusInfoTooltipInReview'
    };
    const statusKey = Object.keys(statusToLocaleKey).find(key => key === currentStatus);
    return ___EmotionJSX(TooltipContainer, null, ___EmotionJSX(Tooltip, null, ___EmotionJSX(Icon, {
      type: "info-circle",
      size: "small",
      className: "tooltip"
    })), statusKey && ___EmotionJSX(TooltipText, null, t(`editor.editorToolbar.${statusToLocaleKey[statusKey]}`)));
  };
  renderWorkflowStatusControls = () => {
    const {
      isUpdatingStatus,
      onChangeStatus,
      currentStatus,
      t,
      useOpenAuthoring
    } = this.props;
    const statusToTranslation = {
      [status.get('DRAFT')]: t('editor.editorToolbar.draft'),
      [status.get('PENDING_REVIEW')]: t('editor.editorToolbar.inReview'),
      [status.get('PENDING_PUBLISH')]: t('editor.editorToolbar.ready')
    };
    const buttonText = isUpdatingStatus ? t('editor.editorToolbar.updating') : t('editor.editorToolbar.status', {
      status: statusToTranslation[currentStatus]
    });
    return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(ToolbarDropdown, {
      dropdownTopOverlap: "40px",
      dropdownWidth: "120px",
      renderButton: () => ___EmotionJSX(StatusButton, null, buttonText)
    }, ___EmotionJSX(StatusDropdownItem, {
      label: t('editor.editorToolbar.draft'),
      onClick: () => onChangeStatus('DRAFT'),
      icon: currentStatus === status.get('DRAFT') ? 'check' : null
    }), ___EmotionJSX(StatusDropdownItem, {
      label: t('editor.editorToolbar.inReview'),
      onClick: () => onChangeStatus('PENDING_REVIEW'),
      icon: currentStatus === status.get('PENDING_REVIEW') ? 'check' : null
    }), useOpenAuthoring ? '' : ___EmotionJSX(StatusDropdownItem, {
      label: t('editor.editorToolbar.ready'),
      onClick: () => onChangeStatus('PENDING_PUBLISH'),
      icon: currentStatus === status.get('PENDING_PUBLISH') ? 'check' : null
    })), useOpenAuthoring && this.renderStatusInfoTooltip());
  };
  renderNewEntryWorkflowPublishControls = ({
    canCreate,
    canPublish
  }) => {
    const {
      isPublishing,
      onPublish,
      onPublishAndNew,
      onPublishAndDuplicate,
      t
    } = this.props;
    return canPublish ? ___EmotionJSX(ToolbarDropdown, {
      dropdownTopOverlap: "40px",
      dropdownWidth: "200px",
      renderButton: () => ___EmotionJSX(PublishButton, null, isPublishing ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
    }, ___EmotionJSX(PublishDropDownItem, {
      label: t('editor.editorToolbar.publishNow'),
      icon: "arrow",
      iconDirection: "right",
      onClick: onPublish
    }), canCreate ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(PublishDropDownItem, {
      label: t('editor.editorToolbar.publishAndCreateNew'),
      icon: "add",
      onClick: onPublishAndNew
    }), ___EmotionJSX(PublishDropDownItem, {
      label: t('editor.editorToolbar.publishAndDuplicate'),
      icon: "add",
      onClick: onPublishAndDuplicate
    })) : null) : '';
  };
  renderExistingEntryWorkflowPublishControls = ({
    canCreate,
    canPublish,
    canDelete
  }) => {
    const {
      unPublish,
      onDuplicate,
      isPersisting,
      t
    } = this.props;
    return canPublish || canCreate ? ___EmotionJSX(ToolbarDropdown, {
      dropdownTopOverlap: "40px",
      dropdownWidth: "max-content",
      key: "td-publish-create",
      renderButton: () => ___EmotionJSX(PublishedToolbarButton, null, isPersisting ? t('editor.editorToolbar.unpublishing') : t('editor.editorToolbar.published'))
    }, canDelete && canPublish && ___EmotionJSX(DropdownItem, {
      label: t('editor.editorToolbar.unpublish'),
      icon: "arrow",
      iconDirection: "right",
      onClick: unPublish
    }), canCreate && ___EmotionJSX(DropdownItem, {
      label: t('editor.editorToolbar.duplicate'),
      icon: "add",
      onClick: onDuplicate
    })) : '';
  };
  renderExistingEntrySimplePublishControls = ({
    canCreate
  }) => {
    const {
      onDuplicate,
      t
    } = this.props;
    return canCreate ? ___EmotionJSX(ToolbarDropdown, {
      dropdownTopOverlap: "40px",
      dropdownWidth: "max-content",
      renderButton: () => ___EmotionJSX(PublishedToolbarButton, null, t('editor.editorToolbar.published'))
    }, ___EmotionJSX(DropdownItem, {
      label: t('editor.editorToolbar.duplicate'),
      icon: "add",
      onClick: onDuplicate
    })) : ___EmotionJSX(PublishedButton, null, t('editor.editorToolbar.published'));
  };
  renderNewEntrySimplePublishControls = ({
    canCreate
  }) => {
    const {
      onPersist,
      onPersistAndNew,
      onPersistAndDuplicate,
      isPersisting,
      t
    } = this.props;
    return ___EmotionJSX("div", null, ___EmotionJSX(ToolbarDropdown, {
      dropdownTopOverlap: "40px",
      dropdownWidth: "max-content",
      renderButton: () => ___EmotionJSX(PublishButton, null, isPersisting ? t('editor.editorToolbar.publishing') : t('editor.editorToolbar.publish'))
    }, ___EmotionJSX(DropdownItem, {
      label: t('editor.editorToolbar.publishNow'),
      icon: "arrow",
      iconDirection: "right",
      onClick: onPersist
    }), canCreate ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(DropdownItem, {
      label: t('editor.editorToolbar.publishAndCreateNew'),
      icon: "add",
      onClick: onPersistAndNew
    }), ___EmotionJSX(DropdownItem, {
      label: t('editor.editorToolbar.publishAndDuplicate'),
      icon: "add",
      onClick: onPersistAndDuplicate
    })) : null));
  };
  renderSimpleDeployPreviewControls = () => {
    const {
      hasChanged,
      isNewEntry,
      t
    } = this.props;
    if (!isNewEntry && !hasChanged) {
      return this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel'));
    }
  };
  renderWorkflowControls = () => {
    const {
      onPersist,
      onDelete,
      onDeleteUnpublishedChanges,
      showDelete,
      hasChanged,
      hasUnpublishedChanges,
      useOpenAuthoring,
      isPersisting,
      isDeleting,
      isNewEntry,
      isModification,
      currentStatus,
      collection,
      t
    } = this.props;
    const canCreate = collection.get('create');
    const canPublish = collection.get('publish') && !useOpenAuthoring;
    const canDelete = collection.get('delete', true);
    const deleteLabel = hasUnpublishedChanges && isModification && t('editor.editorToolbar.deleteUnpublishedChanges') || hasUnpublishedChanges && (isNewEntry || !isModification) && t('editor.editorToolbar.deleteUnpublishedEntry') || !hasUnpublishedChanges && !isModification && t('editor.editorToolbar.deletePublishedEntry');
    return [___EmotionJSX(SaveButton, {
      disabled: !hasChanged,
      key: "save-button",
      onClick: () => hasChanged && onPersist()
    }, isPersisting ? t('editor.editorToolbar.saving') : t('editor.editorToolbar.save')), currentStatus ? [___EmotionJSX(React.Fragment, {
      key: "workflow-status-controls"
    }, this.renderWorkflowStatusControls(), !hasChanged && this.renderNewEntryWorkflowPublishControls({
      canCreate,
      canPublish
    }))] : !isNewEntry && ___EmotionJSX(React.Fragment, {
      key: "existing-entry-workflow-publish-controls"
    }, this.renderExistingEntryWorkflowPublishControls({
      canCreate,
      canPublish,
      canDelete
    })), (!showDelete || useOpenAuthoring) && !hasUnpublishedChanges && !isModification ? null : ___EmotionJSX(DeleteButton, {
      key: "delete-button",
      onClick: hasUnpublishedChanges ? onDeleteUnpublishedChanges : onDelete
    }, isDeleting ? t('editor.editorToolbar.deleting') : deleteLabel)];
  };
  renderWorkflowDeployPreviewControls = () => {
    const {
      currentStatus,
      isNewEntry,
      t
    } = this.props;
    if (currentStatus) {
      return this.renderDeployPreviewControls(t('editor.editorToolbar.deployPreviewButtonLabel'));
    }

    /**
     * Publish control for published workflow entry.
     */
    if (!isNewEntry) {
      return this.renderDeployPreviewControls(t('editor.editorToolbar.deployButtonLabel'));
    }
  };
  render() {
    const {
      user,
      hasChanged,
      displayUrl,
      collection,
      hasWorkflow,
      onLogoutClick,
      t,
      editorBackLink
    } = this.props;
    return ___EmotionJSX(ToolbarContainer, null, ___EmotionJSX(ToolbarSectionBackLink, {
      to: editorBackLink
    }, ___EmotionJSX(BackArrow, null, "\u2190"), ___EmotionJSX("div", null, ___EmotionJSX(BackCollection, null, t('editor.editorToolbar.backCollection', {
      collectionLabel: collection.get('label')
    })), hasChanged ? ___EmotionJSX(BackStatusChanged, null, t('editor.editorToolbar.unsavedChanges')) : ___EmotionJSX(BackStatusUnchanged, null, t('editor.editorToolbar.changesSaved')))), ___EmotionJSX(ToolbarSectionMain, null, ___EmotionJSX(ToolbarSubSectionFirst, null, hasWorkflow ? this.renderWorkflowControls() : this.renderSimpleControls()), ___EmotionJSX(ToolbarSubSectionLast, null, hasWorkflow ? this.renderWorkflowDeployPreviewControls() : this.renderSimpleDeployPreviewControls())), ___EmotionJSX(ToolbarSectionMeta, null, ___EmotionJSX(SettingsDropdown, {
      displayUrl: displayUrl,
      imageUrl: user?.avatar_url,
      onLogoutClick: onLogoutClick
    })));
  }
}
export default translate()(EditorToolbar);