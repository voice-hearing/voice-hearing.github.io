import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { css } from '@emotion/react';
import { buttons, colors, Dropdown, DropdownItem, StyledDropdownButton, text } from 'decap-cms-ui-default';
import EditorControl from './EditorControl';
import { getI18nInfo, getLocaleDataPath, hasI18n, isFieldDuplicate, isFieldHidden, isFieldTranslatable } from '../../../lib/i18n';
import { jsx as ___EmotionJSX } from "@emotion/react";
const ControlPaneContainer = /*#__PURE__*/_styled("div", {
  target: "e11hw0lx4",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1n0x6o4",
  styles: "max-width:800px;margin:0 auto;padding-bottom:16px;font-size:16px"
} : {
  name: "1n0x6o4",
  styles: "max-width:800px;margin:0 auto;padding-bottom:16px;font-size:16px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LocaleButton = /*#__PURE__*/_styled(StyledDropdownButton, {
  target: "e11hw0lx3",
  label: "LocaleButton"
})(buttons.button, ";", buttons.medium, ";color:", colors.controlLabel, ";background:", colors.textFieldBorder, ";height:100%;&:after{top:11px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const LocaleButtonWrapper = /*#__PURE__*/_styled("div", {
  target: "e11hw0lx2",
  label: "LocaleButtonWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const LocaleRowWrapper = /*#__PURE__*/_styled("div", {
  target: "e11hw0lx1",
  label: "LocaleRowWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "zjik7",
  styles: "display:flex"
} : {
  name: "zjik7",
  styles: "display:flex/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledDropdown = /*#__PURE__*/_styled(Dropdown, {
  target: "e11hw0lx0",
  label: "StyledDropdown"
})(process.env.NODE_ENV === "production" ? {
  name: "1hfmrg2",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;margin-right:20px"
} : {
  name: "1hfmrg2",
  styles: "width:max-content;margin-top:20px;margin-bottom:20px;margin-right:20px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function LocaleDropdown({
  locales,
  dropdownText,
  onLocaleChange
}) {
  return ___EmotionJSX(StyledDropdown, {
    renderButton: () => {
      return ___EmotionJSX(LocaleButtonWrapper, null, ___EmotionJSX(LocaleButton, null, dropdownText));
    }
  }, locales.map(l => ___EmotionJSX(DropdownItem, {
    css: /*#__PURE__*/css(text.fieldLabel, ";;label:LocaleDropdown;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1RWtCIiwiZmlsZSI6Ii4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JDb250cm9sUGFuZS9FZGl0b3JDb250cm9sUGFuZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7XG4gIGJ1dHRvbnMsXG4gIGNvbG9ycyxcbiAgRHJvcGRvd24sXG4gIERyb3Bkb3duSXRlbSxcbiAgU3R5bGVkRHJvcGRvd25CdXR0b24sXG4gIHRleHQsXG59IGZyb20gJ2RlY2FwLWNtcy11aS1kZWZhdWx0JztcblxuaW1wb3J0IEVkaXRvckNvbnRyb2wgZnJvbSAnLi9FZGl0b3JDb250cm9sJztcbmltcG9ydCB7XG4gIGdldEkxOG5JbmZvLFxuICBnZXRMb2NhbGVEYXRhUGF0aCxcbiAgaGFzSTE4bixcbiAgaXNGaWVsZER1cGxpY2F0ZSxcbiAgaXNGaWVsZEhpZGRlbixcbiAgaXNGaWVsZFRyYW5zbGF0YWJsZSxcbn0gZnJvbSAnLi4vLi4vLi4vbGliL2kxOG4nO1xuXG5jb25zdCBDb250cm9sUGFuZUNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1heC13aWR0aDogODAwcHg7XG4gIG1hcmdpbjogMCBhdXRvO1xuICBwYWRkaW5nLWJvdHRvbTogMTZweDtcbiAgZm9udC1zaXplOiAxNnB4O1xuYDtcblxuY29uc3QgTG9jYWxlQnV0dG9uID0gc3R5bGVkKFN0eWxlZERyb3Bkb3duQnV0dG9uKWBcbiAgJHtidXR0b25zLmJ1dHRvbn07XG4gICR7YnV0dG9ucy5tZWRpdW19O1xuICBjb2xvcjogJHtjb2xvcnMuY29udHJvbExhYmVsfTtcbiAgYmFja2dyb3VuZDogJHtjb2xvcnMudGV4dEZpZWxkQm9yZGVyfTtcbiAgaGVpZ2h0OiAxMDAlO1xuXG4gICY6YWZ0ZXIge1xuICAgIHRvcDogMTFweDtcbiAgfVxuYDtcblxuY29uc3QgTG9jYWxlQnV0dG9uV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG5gO1xuXG5jb25zdCBMb2NhbGVSb3dXcmFwcGVyID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbmA7XG5cbmNvbnN0IFN0eWxlZERyb3Bkb3duID0gc3R5bGVkKERyb3Bkb3duKWBcbiAgd2lkdGg6IG1heC1jb250ZW50O1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG5gO1xuXG5mdW5jdGlvbiBMb2NhbGVEcm9wZG93bih7IGxvY2FsZXMsIGRyb3Bkb3duVGV4dCwgb25Mb2NhbGVDaGFuZ2UgfSkge1xuICByZXR1cm4gKFxuICAgIDxTdHlsZWREcm9wZG93blxuICAgICAgcmVuZGVyQnV0dG9uPXsoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPExvY2FsZUJ1dHRvbldyYXBwZXI+XG4gICAgICAgICAgICA8TG9jYWxlQnV0dG9uPntkcm9wZG93blRleHR9PC9Mb2NhbGVCdXR0b24+XG4gICAgICAgICAgPC9Mb2NhbGVCdXR0b25XcmFwcGVyPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICA+XG4gICAgICB7bG9jYWxlcy5tYXAobCA9PiAoXG4gICAgICAgIDxEcm9wZG93bkl0ZW1cbiAgICAgICAgICBjc3M9e2Nzc2BcbiAgICAgICAgICAgICR7dGV4dC5maWVsZExhYmVsfVxuICAgICAgICAgIGB9XG4gICAgICAgICAga2V5PXtsfVxuICAgICAgICAgIGxhYmVsPXtsfVxuICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uTG9jYWxlQ2hhbmdlKGwpfVxuICAgICAgICAvPlxuICAgICAgKSl9XG4gICAgPC9TdHlsZWREcm9wZG93bj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0RmllbGRWYWx1ZSh7IGZpZWxkLCBlbnRyeSwgaXNUcmFuc2xhdGFibGUsIGxvY2FsZSB9KSB7XG4gIGlmIChmaWVsZC5nZXQoJ21ldGEnKSkge1xuICAgIHJldHVybiBlbnRyeS5nZXRJbihbJ21ldGEnLCBmaWVsZC5nZXQoJ25hbWUnKV0pO1xuICB9XG5cbiAgaWYgKGlzVHJhbnNsYXRhYmxlKSB7XG4gICAgY29uc3QgZGF0YVBhdGggPSBnZXRMb2NhbGVEYXRhUGF0aChsb2NhbGUpO1xuICAgIHJldHVybiBlbnRyeS5nZXRJbihbLi4uZGF0YVBhdGgsIGZpZWxkLmdldCgnbmFtZScpXSk7XG4gIH1cblxuICByZXR1cm4gZW50cnkuZ2V0SW4oWydkYXRhJywgZmllbGQuZ2V0KCduYW1lJyldKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udHJvbFBhbmUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBzZWxlY3RlZExvY2FsZTogdGhpcy5wcm9wcy5sb2NhbGUsXG4gIH07XG5cbiAgY2hpbGRSZWZzID0ge307XG5cbiAgY29udHJvbFJlZiA9IChmaWVsZCwgd3JhcHBlZENvbnRyb2wpID0+IHtcbiAgICBpZiAoIXdyYXBwZWRDb250cm9sKSByZXR1cm47XG4gICAgY29uc3QgbmFtZSA9IGZpZWxkLmdldCgnbmFtZScpO1xuICAgIHRoaXMuY2hpbGRSZWZzW25hbWVdID0gd3JhcHBlZENvbnRyb2w7XG4gIH07XG5cbiAgZ2V0Q29udHJvbFJlZiA9IGZpZWxkID0+IHdyYXBwZWRDb250cm9sID0+IHtcbiAgICB0aGlzLmNvbnRyb2xSZWYoZmllbGQsIHdyYXBwZWRDb250cm9sKTtcbiAgfTtcblxuICBoYW5kbGVMb2NhbGVDaGFuZ2UgPSB2YWwgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZExvY2FsZTogdmFsIH0pO1xuICAgIHRoaXMucHJvcHMub25Mb2NhbGVDaGFuZ2UodmFsKTtcbiAgfTtcblxuICBjb3B5RnJvbU90aGVyTG9jYWxlID1cbiAgICAoeyB0YXJnZXRMb2NhbGUsIHQgfSkgPT5cbiAgICBzb3VyY2VMb2NhbGUgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICAhd2luZG93LmNvbmZpcm0oXG4gICAgICAgICAgdCgnZWRpdG9yLmVkaXRvckNvbnRyb2xQYW5lLmkxOG4uY29weUZyb21Mb2NhbGVDb25maXJtJywge1xuICAgICAgICAgICAgbG9jYWxlOiBzb3VyY2VMb2NhbGUudG9VcHBlckNhc2UoKSxcbiAgICAgICAgICB9KSxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgZW50cnksIGNvbGxlY3Rpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgICBjb25zdCB7IGxvY2FsZXMsIGRlZmF1bHRMb2NhbGUgfSA9IGdldEkxOG5JbmZvKGNvbGxlY3Rpb24pO1xuXG4gICAgICBjb25zdCBsb2NhbGUgPSB0aGlzLnN0YXRlLnNlbGVjdGVkTG9jYWxlO1xuICAgICAgY29uc3QgaTE4biA9IGxvY2FsZXMgJiYge1xuICAgICAgICBjdXJyZW50TG9jYWxlOiBsb2NhbGUsXG4gICAgICAgIGxvY2FsZXMsXG4gICAgICAgIGRlZmF1bHRMb2NhbGUsXG4gICAgICB9O1xuXG4gICAgICB0aGlzLnByb3BzLmZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcbiAgICAgICAgaWYgKGlzRmllbGRUcmFuc2xhdGFibGUoZmllbGQsIHRhcmdldExvY2FsZSwgc291cmNlTG9jYWxlKSkge1xuICAgICAgICAgIGNvbnN0IGNvcHlWYWx1ZSA9IGdldEZpZWxkVmFsdWUoe1xuICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICBlbnRyeSxcbiAgICAgICAgICAgIGxvY2FsZTogc291cmNlTG9jYWxlLFxuICAgICAgICAgICAgaXNUcmFuc2xhdGFibGU6IHNvdXJjZUxvY2FsZSAhPT0gZGVmYXVsdExvY2FsZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoY29weVZhbHVlKSB0aGlzLnByb3BzLm9uQ2hhbmdlKGZpZWxkLCBjb3B5VmFsdWUsIHVuZGVmaW5lZCwgaTE4bik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgdmFsaWRhdGUgPSBhc3luYyAoKSA9PiB7XG4gICAgdGhpcy5wcm9wcy5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XG4gICAgICBpZiAoZmllbGQuZ2V0KCd3aWRnZXQnKSA9PT0gJ2hpZGRlbicpIHJldHVybjtcbiAgICAgIGNvbnN0IGNvbnRyb2wgPSB0aGlzLmNoaWxkUmVmc1tmaWVsZC5nZXQoJ25hbWUnKV07XG4gICAgICBjb25zdCB2YWxpZGF0ZUZuID0gY29udHJvbD8uaW5uZXJXcmFwcGVkQ29udHJvbD8udmFsaWRhdGUgPz8gY29udHJvbD8udmFsaWRhdGU7XG4gICAgICBpZiAodmFsaWRhdGVGbikge1xuICAgICAgICB2YWxpZGF0ZUZuKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgc3dpdGNoVG9EZWZhdWx0TG9jYWxlID0gKCkgPT4ge1xuICAgIGlmIChoYXNJMThuKHRoaXMucHJvcHMuY29sbGVjdGlvbikpIHtcbiAgICAgIGNvbnN0IHsgZGVmYXVsdExvY2FsZSB9ID0gZ2V0STE4bkluZm8odGhpcy5wcm9wcy5jb2xsZWN0aW9uKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHRoaXMuc2V0U3RhdGUoeyBzZWxlY3RlZExvY2FsZTogZGVmYXVsdExvY2FsZSB9LCByZXNvbHZlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgZm9jdXMocGF0aCkge1xuICAgIGNvbnN0IFtmaWVsZE5hbWUsIC4uLnJlbWFpbmluZ1BhdGhdID0gcGF0aC5zcGxpdCgnLicpO1xuICAgIGNvbnN0IGNvbnRyb2wgPSB0aGlzLmNoaWxkUmVmc1tmaWVsZE5hbWVdO1xuICAgIGlmIChjb250cm9sPy5mb2N1cykge1xuICAgICAgY29udHJvbC5mb2N1cyhyZW1haW5pbmdQYXRoLmpvaW4oJy4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgZW50cnksIGZpZWxkcywgZmllbGRzTWV0YURhdGEsIGZpZWxkc0Vycm9ycywgb25DaGFuZ2UsIG9uVmFsaWRhdGUsIHQgfSA9XG4gICAgICB0aGlzLnByb3BzO1xuXG4gICAgaWYgKCFjb2xsZWN0aW9uIHx8ICFmaWVsZHMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChlbnRyeS5zaXplID09PSAwIHx8IGVudHJ5LmdldCgncGFydGlhbCcpID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB7IGxvY2FsZXMsIGRlZmF1bHRMb2NhbGUgfSA9IGdldEkxOG5JbmZvKGNvbGxlY3Rpb24pO1xuICAgIGNvbnN0IGxvY2FsZSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRMb2NhbGU7XG4gICAgY29uc3QgaTE4biA9IGxvY2FsZXMgJiYge1xuICAgICAgY3VycmVudExvY2FsZTogbG9jYWxlLFxuICAgICAgbG9jYWxlcyxcbiAgICAgIGRlZmF1bHRMb2NhbGUsXG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Q29udHJvbFBhbmVDb250YWluZXI+XG4gICAgICAgIHtsb2NhbGVzICYmIChcbiAgICAgICAgICA8TG9jYWxlUm93V3JhcHBlcj5cbiAgICAgICAgICAgIDxMb2NhbGVEcm9wZG93blxuICAgICAgICAgICAgICBsb2NhbGVzPXtsb2NhbGVzfVxuICAgICAgICAgICAgICBkcm9wZG93blRleHQ9e3QoJ2VkaXRvci5lZGl0b3JDb250cm9sUGFuZS5pMThuLndyaXRpbmdJbkxvY2FsZScsIHtcbiAgICAgICAgICAgICAgICBsb2NhbGU6IGxvY2FsZS50b1VwcGVyQ2FzZSgpLFxuICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgb25Mb2NhbGVDaGFuZ2U9e3RoaXMuaGFuZGxlTG9jYWxlQ2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxMb2NhbGVEcm9wZG93blxuICAgICAgICAgICAgICBsb2NhbGVzPXtsb2NhbGVzLmZpbHRlcihsID0+IGwgIT09IGxvY2FsZSl9XG4gICAgICAgICAgICAgIGRyb3Bkb3duVGV4dD17dCgnZWRpdG9yLmVkaXRvckNvbnRyb2xQYW5lLmkxOG4uY29weUZyb21Mb2NhbGUnKX1cbiAgICAgICAgICAgICAgb25Mb2NhbGVDaGFuZ2U9e3RoaXMuY29weUZyb21PdGhlckxvY2FsZSh7IHRhcmdldExvY2FsZTogbG9jYWxlLCB0IH0pfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0xvY2FsZVJvd1dyYXBwZXI+XG4gICAgICAgICl9XG4gICAgICAgIHtmaWVsZHNcbiAgICAgICAgICAuZmlsdGVyKGYgPT4gZi5nZXQoJ3dpZGdldCcpICE9PSAnaGlkZGVuJylcbiAgICAgICAgICAubWFwKChmaWVsZCwgaSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNUcmFuc2xhdGFibGUgPSBpc0ZpZWxkVHJhbnNsYXRhYmxlKGZpZWxkLCBsb2NhbGUsIGRlZmF1bHRMb2NhbGUpO1xuICAgICAgICAgICAgY29uc3QgaXNEdXBsaWNhdGUgPSBpc0ZpZWxkRHVwbGljYXRlKGZpZWxkLCBsb2NhbGUsIGRlZmF1bHRMb2NhbGUpO1xuICAgICAgICAgICAgY29uc3QgaXNIaWRkZW4gPSBpc0ZpZWxkSGlkZGVuKGZpZWxkLCBsb2NhbGUsIGRlZmF1bHRMb2NhbGUpO1xuICAgICAgICAgICAgY29uc3Qga2V5ID0gaTE4biA/IGAke2xvY2FsZX1fJHtpfWAgOiBpO1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8RWRpdG9yQ29udHJvbFxuICAgICAgICAgICAgICAgIGtleT17a2V5fVxuICAgICAgICAgICAgICAgIGZpZWxkPXtmaWVsZH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17Z2V0RmllbGRWYWx1ZSh7XG4gICAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICAgIGVudHJ5LFxuICAgICAgICAgICAgICAgICAgbG9jYWxlLFxuICAgICAgICAgICAgICAgICAgaXNUcmFuc2xhdGFibGUsXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgZmllbGRzTWV0YURhdGE9e2ZpZWxkc01ldGFEYXRhfVxuICAgICAgICAgICAgICAgIGZpZWxkc0Vycm9ycz17ZmllbGRzRXJyb3JzfVxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZmllbGQsIG5ld1ZhbHVlLCBuZXdNZXRhZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgb25DaGFuZ2UoZmllbGQsIG5ld1ZhbHVlLCBuZXdNZXRhZGF0YSwgaTE4bik7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBvblZhbGlkYXRlPXtvblZhbGlkYXRlfVxuICAgICAgICAgICAgICAgIGNvbnRyb2xSZWY9e3RoaXMuZ2V0Q29udHJvbFJlZihmaWVsZCl9XG4gICAgICAgICAgICAgICAgZW50cnk9e2VudHJ5fVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgaXNEaXNhYmxlZD17aXNEdXBsaWNhdGV9XG4gICAgICAgICAgICAgICAgaXNIaWRkZW49e2lzSGlkZGVufVxuICAgICAgICAgICAgICAgIGlzRmllbGREdXBsaWNhdGU9e2ZpZWxkID0+IGlzRmllbGREdXBsaWNhdGUoZmllbGQsIGxvY2FsZSwgZGVmYXVsdExvY2FsZSl9XG4gICAgICAgICAgICAgICAgaXNGaWVsZEhpZGRlbj17ZmllbGQgPT4gaXNGaWVsZEhpZGRlbihmaWVsZCwgbG9jYWxlLCBkZWZhdWx0TG9jYWxlKX1cbiAgICAgICAgICAgICAgICBsb2NhbGU9e2xvY2FsZX1cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSl9XG4gICAgICA8L0NvbnRyb2xQYW5lQ29udGFpbmVyPlxuICAgICk7XG4gIH1cbn1cblxuQ29udHJvbFBhbmUucHJvcFR5cGVzID0ge1xuICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGVudHJ5OiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIGZpZWxkczogSW1tdXRhYmxlUHJvcFR5cGVzLmxpc3QuaXNSZXF1aXJlZCxcbiAgZmllbGRzTWV0YURhdGE6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZmllbGRzRXJyb3JzOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBsb2NhbGU6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuIl19 */")),
    key: l,
    label: l,
    onClick: () => onLocaleChange(l)
  })));
}
function getFieldValue({
  field,
  entry,
  isTranslatable,
  locale
}) {
  if (field.get('meta')) {
    return entry.getIn(['meta', field.get('name')]);
  }
  if (isTranslatable) {
    const dataPath = getLocaleDataPath(locale);
    return entry.getIn([...dataPath, field.get('name')]);
  }
  return entry.getIn(['data', field.get('name')]);
}
export default class ControlPane extends React.Component {
  state = {
    selectedLocale: this.props.locale
  };
  childRefs = {};
  controlRef = (field, wrappedControl) => {
    if (!wrappedControl) return;
    const name = field.get('name');
    this.childRefs[name] = wrappedControl;
  };
  getControlRef = field => wrappedControl => {
    this.controlRef(field, wrappedControl);
  };
  handleLocaleChange = val => {
    this.setState({
      selectedLocale: val
    });
    this.props.onLocaleChange(val);
  };
  copyFromOtherLocale = ({
    targetLocale,
    t
  }) => sourceLocale => {
    if (!window.confirm(t('editor.editorControlPane.i18n.copyFromLocaleConfirm', {
      locale: sourceLocale.toUpperCase()
    }))) {
      return;
    }
    const {
      entry,
      collection
    } = this.props;
    const {
      locales,
      defaultLocale
    } = getI18nInfo(collection);
    const locale = this.state.selectedLocale;
    const i18n = locales && {
      currentLocale: locale,
      locales,
      defaultLocale
    };
    this.props.fields.forEach(field => {
      if (isFieldTranslatable(field, targetLocale, sourceLocale)) {
        const copyValue = getFieldValue({
          field,
          entry,
          locale: sourceLocale,
          isTranslatable: sourceLocale !== defaultLocale
        });
        if (copyValue) this.props.onChange(field, copyValue, undefined, i18n);
      }
    });
  };
  validate = async () => {
    this.props.fields.forEach(field => {
      if (field.get('widget') === 'hidden') return;
      const control = this.childRefs[field.get('name')];
      const validateFn = control?.innerWrappedControl?.validate ?? control?.validate;
      if (validateFn) {
        validateFn();
      }
    });
  };
  switchToDefaultLocale = () => {
    if (hasI18n(this.props.collection)) {
      const {
        defaultLocale
      } = getI18nInfo(this.props.collection);
      return new Promise(resolve => this.setState({
        selectedLocale: defaultLocale
      }, resolve));
    } else {
      return Promise.resolve();
    }
  };
  focus(path) {
    const [fieldName, ...remainingPath] = path.split('.');
    const control = this.childRefs[fieldName];
    if (control?.focus) {
      control.focus(remainingPath.join('.'));
    }
  }
  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      onChange,
      onValidate,
      t
    } = this.props;
    if (!collection || !fields) {
      return null;
    }
    if (entry.size === 0 || entry.get('partial') === true) {
      return null;
    }
    const {
      locales,
      defaultLocale
    } = getI18nInfo(collection);
    const locale = this.state.selectedLocale;
    const i18n = locales && {
      currentLocale: locale,
      locales,
      defaultLocale
    };
    return ___EmotionJSX(ControlPaneContainer, null, locales && ___EmotionJSX(LocaleRowWrapper, null, ___EmotionJSX(LocaleDropdown, {
      locales: locales,
      dropdownText: t('editor.editorControlPane.i18n.writingInLocale', {
        locale: locale.toUpperCase()
      }),
      onLocaleChange: this.handleLocaleChange
    }), ___EmotionJSX(LocaleDropdown, {
      locales: locales.filter(l => l !== locale),
      dropdownText: t('editor.editorControlPane.i18n.copyFromLocale'),
      onLocaleChange: this.copyFromOtherLocale({
        targetLocale: locale,
        t
      })
    })), fields.filter(f => f.get('widget') !== 'hidden').map((field, i) => {
      const isTranslatable = isFieldTranslatable(field, locale, defaultLocale);
      const isDuplicate = isFieldDuplicate(field, locale, defaultLocale);
      const isHidden = isFieldHidden(field, locale, defaultLocale);
      const key = i18n ? `${locale}_${i}` : i;
      return ___EmotionJSX(EditorControl, {
        key: key,
        field: field,
        value: getFieldValue({
          field,
          entry,
          locale,
          isTranslatable
        }),
        fieldsMetaData: fieldsMetaData,
        fieldsErrors: fieldsErrors,
        onChange: (field, newValue, newMetadata) => {
          onChange(field, newValue, newMetadata, i18n);
        },
        onValidate: onValidate,
        controlRef: this.getControlRef(field),
        entry: entry,
        collection: collection,
        isDisabled: isDuplicate,
        isHidden: isHidden,
        isFieldDuplicate: field => isFieldDuplicate(field, locale, defaultLocale),
        isFieldHidden: field => isFieldHidden(field, locale, defaultLocale),
        locale: locale
      });
    }));
  }
}
ControlPane.propTypes = {
  collection: ImmutablePropTypes.map.isRequired,
  entry: ImmutablePropTypes.map.isRequired,
  fields: ImmutablePropTypes.list.isRequired,
  fieldsMetaData: ImmutablePropTypes.map.isRequired,
  fieldsErrors: ImmutablePropTypes.map.isRequired,
  onChange: PropTypes.func.isRequired,
  onValidate: PropTypes.func.isRequired,
  locale: PropTypes.string
};