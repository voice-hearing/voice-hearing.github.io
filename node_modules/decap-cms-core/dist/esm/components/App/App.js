import _styled from "@emotion/styled/base";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import PropTypes from 'prop-types';
import React from 'react';
import { translate } from 'react-polyglot';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { connect } from 'react-redux';
import { Route, Switch, Redirect } from 'react-router-dom';
import TopBarProgress from 'react-topbar-progress-indicator';
import { Loader, colors } from 'decap-cms-ui-default';
import { loginUser, logoutUser } from '../../actions/auth';
import { currentBackend } from '../../backend';
import { createNewEntry } from '../../actions/collections';
import { openMediaLibrary } from '../../actions/mediaLibrary';
import MediaLibrary from '../MediaLibrary/MediaLibrary';
import { Notifications } from '../UI';
import { history } from '../../routing/history';
import { SIMPLE, EDITORIAL_WORKFLOW } from '../../constants/publishModes';
import Collection from '../Collection/Collection';
import Workflow from '../Workflow/Workflow';
import Editor from '../Editor/Editor';
import NotFoundPage from './NotFoundPage';
import Header from './Header';
import { jsx as ___EmotionJSX } from "@emotion/react";
TopBarProgress.config({
  barColors: {
    0: colors.active,
    '1.0': colors.active
  },
  shadowBlur: 0,
  barThickness: 2
});
const AppMainContainer = /*#__PURE__*/_styled("div", {
  target: "eh2m33j2",
  label: "AppMainContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "y0stlg",
  styles: "min-width:800px;max-width:1440px;margin:0 auto"
} : {
  name: "y0stlg",
  styles: "min-width:800px;max-width:1440px;margin:0 auto/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorContainer = /*#__PURE__*/_styled("div", {
  target: "eh2m33j1",
  label: "ErrorContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "3zy121",
  styles: "margin:20px"
} : {
  name: "3zy121",
  styles: "margin:20px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const ErrorCodeBlock = /*#__PURE__*/_styled("pre", {
  target: "eh2m33j0",
  label: "ErrorCodeBlock"
})(process.env.NODE_ENV === "production" ? {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5"
} : {
  name: "1dps4tx",
  styles: "margin-left:20px;font-size:15px;line-height:1.5/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function getDefaultPath(collections) {
  const first = collections.filter(collection => collection.get('hide') !== true).first();
  if (first) {
    return `/collections/${first.get('name')}`;
  } else {
    throw new Error('Could not find a non hidden collection');
  }
}
function RouteInCollection({
  collections,
  render,
  ...props
}) {
  const defaultPath = getDefaultPath(collections);
  return ___EmotionJSX(Route, _extends({}, props, {
    render: routeProps => {
      const collectionExists = collections.get(routeProps.match.params.name);
      return collectionExists ? render(routeProps) : ___EmotionJSX(Redirect, {
        to: defaultPath
      });
    }
  }));
}
class App extends React.Component {
  static propTypes = {
    auth: PropTypes.object.isRequired,
    config: PropTypes.object.isRequired,
    collections: ImmutablePropTypes.map.isRequired,
    loginUser: PropTypes.func.isRequired,
    logoutUser: PropTypes.func.isRequired,
    user: PropTypes.object,
    isFetching: PropTypes.bool.isRequired,
    publishMode: PropTypes.oneOf([SIMPLE, EDITORIAL_WORKFLOW]),
    siteId: PropTypes.string,
    useMediaLibrary: PropTypes.bool,
    openMediaLibrary: PropTypes.func.isRequired,
    showMediaButton: PropTypes.bool,
    t: PropTypes.func.isRequired
  };
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(App.propTypes, this.props, 'prop', 'App');
  }
  configError(config) {
    const t = this.props.t;
    return ___EmotionJSX(ErrorContainer, null, ___EmotionJSX("h1", null, t('app.app.errorHeader')), ___EmotionJSX("div", null, ___EmotionJSX("strong", null, t('app.app.configErrors'), ":"), ___EmotionJSX(ErrorCodeBlock, null, config.error), ___EmotionJSX("span", null, t('app.app.checkConfigYml'))));
  }
  handleLogin(credentials) {
    this.props.loginUser(credentials);
  }
  authenticating() {
    const {
      auth,
      t
    } = this.props;
    const backend = currentBackend(this.props.config);
    if (backend == null) {
      return ___EmotionJSX("div", null, ___EmotionJSX("h1", null, t('app.app.waitingBackend')));
    }
    return ___EmotionJSX("div", null, ___EmotionJSX(Notifications, null), /*#__PURE__*/React.createElement(backend.authComponent(), {
      onLogin: this.handleLogin.bind(this),
      error: auth.error,
      inProgress: auth.isFetching,
      siteId: this.props.config.backend.site_domain,
      base_url: this.props.config.backend.base_url,
      authEndpoint: this.props.config.backend.auth_endpoint,
      config: this.props.config,
      clearHash: () => history.replace('/'),
      t
    }));
  }
  handleLinkClick(event, handler, ...args) {
    event.preventDefault();
    handler(...args);
  }
  render() {
    const {
      user,
      config,
      collections,
      logoutUser,
      isFetching,
      publishMode,
      useMediaLibrary,
      openMediaLibrary,
      t,
      showMediaButton
    } = this.props;
    if (config === null) {
      return null;
    }
    if (config.error) {
      return this.configError(config);
    }
    if (config.isFetching) {
      return ___EmotionJSX(Loader, {
        active: true
      }, t('app.app.loadingConfig'));
    }
    if (user == null) {
      return this.authenticating(t);
    }
    const defaultPath = getDefaultPath(collections);
    const hasWorkflow = publishMode === EDITORIAL_WORKFLOW;
    return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(Notifications, null), ___EmotionJSX(Header, {
      user: user,
      collections: collections,
      onCreateEntryClick: createNewEntry,
      onLogoutClick: logoutUser,
      openMediaLibrary: openMediaLibrary,
      hasWorkflow: hasWorkflow,
      displayUrl: config.display_url,
      logoUrl: config.logo_url // Deprecated, replaced by `logo.src`
      ,
      logo: config.logo,
      isTestRepo: config.backend.name === 'test-repo',
      showMediaButton: showMediaButton
    }), ___EmotionJSX(AppMainContainer, null, isFetching && ___EmotionJSX(TopBarProgress, null), ___EmotionJSX(Switch, null, ___EmotionJSX(Redirect, {
      exact: true,
      from: "/",
      to: defaultPath
    }), ___EmotionJSX(Redirect, {
      exact: true,
      from: "/search/",
      to: defaultPath
    }), ___EmotionJSX(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name/search/",
      render: ({
        match
      }) => ___EmotionJSX(Redirect, {
        to: `/collections/${match.params.name}`
      })
    }), ___EmotionJSX(Redirect
    // This happens on Identity + Invite Only + External Provider email not matching
    // the registered user
    , {
      from: "/error=access_denied&error_description=Signups+not+allowed+for+this+instance",
      to: defaultPath
    }), hasWorkflow ? ___EmotionJSX(Route, {
      path: "/workflow",
      component: Workflow
    }) : null, ___EmotionJSX(RouteInCollection, {
      exact: true,
      collections: collections,
      path: "/collections/:name",
      render: props => ___EmotionJSX(Collection, props)
    }), ___EmotionJSX(RouteInCollection, {
      path: "/collections/:name/new",
      collections: collections,
      render: props => ___EmotionJSX(Editor, _extends({}, props, {
        newRecord: true
      }))
    }), ___EmotionJSX(RouteInCollection, {
      path: "/collections/:name/entries/*",
      collections: collections,
      render: props => ___EmotionJSX(Editor, props)
    }), ___EmotionJSX(RouteInCollection, {
      path: "/collections/:name/search/:searchTerm",
      collections: collections,
      render: props => ___EmotionJSX(Collection, _extends({}, props, {
        isSearchResults: true,
        isSingleSearchResult: true
      }))
    }), ___EmotionJSX(RouteInCollection, {
      collections: collections,
      path: "/collections/:name/filter/:filterTerm*",
      render: props => ___EmotionJSX(Collection, props)
    }), ___EmotionJSX(Route, {
      path: "/search/:searchTerm",
      render: props => ___EmotionJSX(Collection, _extends({}, props, {
        isSearchResults: true
      }))
    }), ___EmotionJSX(RouteInCollection, {
      path: "/edit/:name/:entryName",
      collections: collections,
      render: ({
        match
      }) => {
        const {
          name,
          entryName
        } = match.params;
        return ___EmotionJSX(Redirect, {
          to: `/collections/${name}/entries/${entryName}`
        });
      }
    }), ___EmotionJSX(Route, {
      component: NotFoundPage
    })), useMediaLibrary ? ___EmotionJSX(MediaLibrary, null) : null));
  }
}
function mapStateToProps(state) {
  const {
    auth,
    config,
    collections,
    globalUI,
    mediaLibrary
  } = state;
  const user = auth.user;
  const isFetching = globalUI.isFetching;
  const publishMode = config.publish_mode;
  const useMediaLibrary = !mediaLibrary.get('externalLibrary');
  const showMediaButton = mediaLibrary.get('showMediaButton');
  return {
    auth,
    config,
    collections,
    user,
    isFetching,
    publishMode,
    showMediaButton,
    useMediaLibrary
  };
}
const mapDispatchToProps = {
  openMediaLibrary,
  loginUser,
  logoutUser
};
export default connect(mapStateToProps, mapDispatchToProps)(translate()(App));