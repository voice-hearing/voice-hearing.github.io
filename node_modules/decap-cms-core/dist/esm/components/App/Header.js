import _styled from "@emotion/styled/base";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import PropTypes from 'prop-types';
import React from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { css } from '@emotion/react';
import { translate } from 'react-polyglot';
import { NavLink } from 'react-router-dom';
import { Icon, Dropdown, DropdownItem, StyledDropdownButton, colors, lengths, shadows, buttons, zIndex } from 'decap-cms-ui-default';
import { connect } from 'react-redux';
import { SettingsDropdown } from '../UI';
import { checkBackendStatus } from '../../actions/status';
import { jsx as ___EmotionJSX } from "@emotion/react";
const styles = {
  buttonActive: /*#__PURE__*/css("color:", colors.active, ";;label:buttonActive;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
function AppHeader(props) {
  return ___EmotionJSX("header", _extends({
    css: /*#__PURE__*/css(shadows.dropMain, ";position:sticky;width:100%;top:0;background-color:", colors.foreground, ";z-index:", zIndex.zIndex300, ";height:", lengths.topBarHeight, ";;label:AppHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  }, props));
}
const AppHeaderContent = /*#__PURE__*/_styled("div", {
  target: "e1rbzf6g5",
  label: "AppHeaderContent"
})(process.env.NODE_ENV === "production" ? {
  name: "jxf21e",
  styles: "display:flex;justify-content:space-between;min-width:800px;max-width:1440px;padding:0 12px;margin:0 auto"
} : {
  name: "jxf21e",
  styles: "display:flex;justify-content:space-between;min-width:800px;max-width:1440px;padding:0 12px;margin:0 auto/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0FwcC9IZWFkZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOENtQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BcHAvSGVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHtcbiAgSWNvbixcbiAgRHJvcGRvd24sXG4gIERyb3Bkb3duSXRlbSxcbiAgU3R5bGVkRHJvcGRvd25CdXR0b24sXG4gIGNvbG9ycyxcbiAgbGVuZ3RocyxcbiAgc2hhZG93cyxcbiAgYnV0dG9ucyxcbiAgekluZGV4LFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuXG5pbXBvcnQgeyBTZXR0aW5nc0Ryb3Bkb3duIH0gZnJvbSAnLi4vVUknO1xuaW1wb3J0IHsgY2hlY2tCYWNrZW5kU3RhdHVzIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9zdGF0dXMnO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIGJ1dHRvbkFjdGl2ZTogY3NzYFxuICAgIGNvbG9yOiAke2NvbG9ycy5hY3RpdmV9O1xuICBgLFxufTtcblxuZnVuY3Rpb24gQXBwSGVhZGVyKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGhlYWRlclxuICAgICAgY3NzPXtjc3NgXG4gICAgICAgICR7c2hhZG93cy5kcm9wTWFpbn07XG4gICAgICAgIHBvc2l0aW9uOiBzdGlja3k7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLmZvcmVncm91bmR9O1xuICAgICAgICB6LWluZGV4OiAke3pJbmRleC56SW5kZXgzMDB9O1xuICAgICAgICBoZWlnaHQ6ICR7bGVuZ3Rocy50b3BCYXJIZWlnaHR9O1xuICAgICAgYH1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAvPlxuICApO1xufVxuXG5jb25zdCBBcHBIZWFkZXJDb250ZW50ID0gc3R5bGVkLmRpdmBcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICBtaW4td2lkdGg6IDgwMHB4O1xuICBtYXgtd2lkdGg6IDE0NDBweDtcbiAgcGFkZGluZzogMCAxMnB4O1xuICBtYXJnaW46IDAgYXV0bztcbmA7XG5cbmNvbnN0IEFwcEhlYWRlckJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBjb2xvcjogIzdiODI5MDtcbiAgZm9udC1mYW1pbHk6IGluaGVyaXQ7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gIHBhZGRpbmc6IDE2cHggMjBweDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAke0ljb259IHtcbiAgICBtYXJnaW4tcmlnaHQ6IDRweDtcbiAgICBjb2xvcjogI2IzYjljNDtcbiAgfVxuXG4gICY6aG92ZXIsXG4gICY6YWN0aXZlLFxuICAmOmZvY3VzLXZpc2libGUge1xuICAgICR7c3R5bGVzLmJ1dHRvbkFjdGl2ZX07XG5cbiAgICAke0ljb259IHtcbiAgICAgICR7c3R5bGVzLmJ1dHRvbkFjdGl2ZX07XG4gICAgfVxuICB9XG5cbiAgJHtwcm9wcyA9PiBjc3NgXG4gICAgJi4ke3Byb3BzLmFjdGl2ZUNsYXNzTmFtZX0ge1xuICAgICAgJHtzdHlsZXMuYnV0dG9uQWN0aXZlfTtcblxuICAgICAgJHtJY29ufSB7XG4gICAgICAgICR7c3R5bGVzLmJ1dHRvbkFjdGl2ZX07XG4gICAgICB9XG4gICAgfVxuICBgfTtcbmA7XG5cbmNvbnN0IEFwcEhlYWRlck5hdkxpbmsgPSBBcHBIZWFkZXJCdXR0b24ud2l0aENvbXBvbmVudChOYXZMaW5rKTtcblxuY29uc3QgQXBwSGVhZGVyQWN0aW9ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuYDtcblxuY29uc3QgQXBwSGVhZGVyUXVpY2tOZXdCdXR0b24gPSBzdHlsZWQoU3R5bGVkRHJvcGRvd25CdXR0b24pYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtidXR0b25zLm1lZGl1bX07XG4gICR7YnV0dG9ucy5ncmF5fTtcbiAgbWFyZ2luLXJpZ2h0OiA4cHg7XG5cbiAgJjphZnRlciB7XG4gICAgdG9wOiAxMXB4O1xuICB9XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJOYXZMaXN0ID0gc3R5bGVkLnVsYFxuICBkaXNwbGF5OiBmbGV4O1xuICBtYXJnaW46IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG5gO1xuXG5jb25zdCBBcHBIZWFkZXJMb2dvID0gc3R5bGVkLmxpYFxuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuXG4gIGltZyB7XG4gICAgcGFkZGluZzogMTJweCAyMHB4O1xuICAgIG1heC1oZWlnaHQ6IDU2cHg7XG4gICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgICBvYmplY3QtZml0OiBjb250YWluO1xuICAgIG9iamVjdC1wb3NpdGlvbjogY2VudGVyO1xuICB9XG5gO1xuXG5jbGFzcyBIZWFkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIHVzZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIG9uQ3JlYXRlRW50cnlDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkxvZ291dENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIG9wZW5NZWRpYUxpYnJhcnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBsb2dvVXJsOiBQcm9wVHlwZXMuc3RyaW5nLCAvLyBEZXByZWNhdGVkLCByZXBsYWNlZCBieSBgbG9nby5zcmNgXG4gICAgbG9nbzogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHNyYzogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgc2hvd19pbl9oZWFkZXI6IFByb3BUeXBlcy5ib29sLFxuICAgIH0pLFxuICAgIGlzVGVzdFJlcG86IFByb3BUeXBlcy5ib29sLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgY2hlY2tCYWNrZW5kU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGludGVydmFsSWQ7XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gTWFudWFsbHkgdmFsaWRhdGUgUHJvcFR5cGVzIC0gUmVhY3QgMTkgYnJlYWtpbmcgY2hhbmdlXG4gICAgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKEhlYWRlci5wcm9wVHlwZXMsIHRoaXMucHJvcHMsICdwcm9wJywgJ0hlYWRlcicpO1xuXG4gICAgdGhpcy5pbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgdGhpcy5wcm9wcy5jaGVja0JhY2tlbmRTdGF0dXMoKTtcbiAgICB9LCA1ICogNjAgKiAxMDAwKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbElkKTtcbiAgfVxuXG4gIGhhbmRsZUNyZWF0ZVBvc3RDbGljayA9IGNvbGxlY3Rpb25OYW1lID0+IHtcbiAgICBjb25zdCB7IG9uQ3JlYXRlRW50cnlDbGljayB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAob25DcmVhdGVFbnRyeUNsaWNrKSB7XG4gICAgICBvbkNyZWF0ZUVudHJ5Q2xpY2soY29sbGVjdGlvbk5hbWUpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdXNlcixcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgb25Mb2dvdXRDbGljayxcbiAgICAgIG9wZW5NZWRpYUxpYnJhcnksXG4gICAgICBoYXNXb3JrZmxvdyxcbiAgICAgIGRpc3BsYXlVcmwsXG4gICAgICBsb2dvVXJsLCAvLyBEZXByZWNhdGVkLCByZXBsYWNlZCBieSBgbG9nby5zcmNgXG4gICAgICBsb2dvLFxuICAgICAgaXNUZXN0UmVwbyxcbiAgICAgIHQsXG4gICAgICBzaG93TWVkaWFCdXR0b24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBjcmVhdGFibGVDb2xsZWN0aW9ucyA9IGNvbGxlY3Rpb25zXG4gICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgLnRvTGlzdCgpO1xuXG4gICAgY29uc3Qgc2hvdWxkU2hvd0xvZ28gPSBsb2dvPy5zaG93X2luX2hlYWRlciAmJiBsb2dvPy5zcmM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFwcEhlYWRlcj5cbiAgICAgICAgPEFwcEhlYWRlckNvbnRlbnQ+XG4gICAgICAgICAgPG5hdj5cbiAgICAgICAgICAgIDxBcHBIZWFkZXJOYXZMaXN0PlxuICAgICAgICAgICAgICB7c2hvdWxkU2hvd0xvZ28gJiYgKFxuICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJMb2dvPlxuICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2xvZ28/LnNyYyB8fCBsb2dvVXJsfSBhbHQ9XCJMb2dvXCIgLz5cbiAgICAgICAgICAgICAgICA8L0FwcEhlYWRlckxvZ28+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICA8QXBwSGVhZGVyTmF2TGlua1xuICAgICAgICAgICAgICAgICAgdG89XCIvXCJcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZUNsYXNzTmFtZT1cImhlYWRlci1saW5rLWFjdGl2ZVwiXG4gICAgICAgICAgICAgICAgICBpc0FjdGl2ZT17KG1hdGNoLCBsb2NhdGlvbikgPT4gbG9jYXRpb24ucGF0aG5hbWUuc3RhcnRzV2l0aCgnL2NvbGxlY3Rpb25zLycpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxJY29uIHR5cGU9XCJwYWdlXCIgLz5cbiAgICAgICAgICAgICAgICAgIHt0KCdhcHAuaGVhZGVyLmNvbnRlbnQnKX1cbiAgICAgICAgICAgICAgICA8L0FwcEhlYWRlck5hdkxpbms+XG4gICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgIHtoYXNXb3JrZmxvdyAmJiAoXG4gICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgPEFwcEhlYWRlck5hdkxpbmsgdG89XCIvd29ya2Zsb3dcIiBhY3RpdmVDbGFzc05hbWU9XCJoZWFkZXItbGluay1hY3RpdmVcIj5cbiAgICAgICAgICAgICAgICAgICAgPEljb24gdHlwZT1cIndvcmtmbG93XCIgLz5cbiAgICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIud29ya2Zsb3cnKX1cbiAgICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyTmF2TGluaz5cbiAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7c2hvd01lZGlhQnV0dG9uICYmIChcbiAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICA8QXBwSGVhZGVyQnV0dG9uIG9uQ2xpY2s9e29wZW5NZWRpYUxpYnJhcnl9PlxuICAgICAgICAgICAgICAgICAgICA8SWNvbiB0eXBlPVwibWVkaWEtYWx0XCIgLz5cbiAgICAgICAgICAgICAgICAgICAge3QoJ2FwcC5oZWFkZXIubWVkaWEnKX1cbiAgICAgICAgICAgICAgICAgIDwvQXBwSGVhZGVyQnV0dG9uPlxuICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L0FwcEhlYWRlck5hdkxpc3Q+XG4gICAgICAgICAgPC9uYXY+XG4gICAgICAgICAgPEFwcEhlYWRlckFjdGlvbnM+XG4gICAgICAgICAgICB7Y3JlYXRhYmxlQ29sbGVjdGlvbnMuc2l6ZSA+IDAgJiYgKFxuICAgICAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICAgIDxBcHBIZWFkZXJRdWlja05ld0J1dHRvbj4ge3QoJ2FwcC5oZWFkZXIucXVpY2tBZGQnKX08L0FwcEhlYWRlclF1aWNrTmV3QnV0dG9uPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgZHJvcGRvd25Ub3BPdmVybGFwPVwiMzBweFwiXG4gICAgICAgICAgICAgICAgZHJvcGRvd25XaWR0aD1cIjE2MHB4XCJcbiAgICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXRhYmxlQ29sbGVjdGlvbnMubWFwKGNvbGxlY3Rpb24gPT4gKFxuICAgICAgICAgICAgICAgICAgPERyb3Bkb3duSXRlbVxuICAgICAgICAgICAgICAgICAgICBrZXk9e2NvbGxlY3Rpb24uZ2V0KCduYW1lJyl9XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtjb2xsZWN0aW9uLmdldCgnbGFiZWxfc2luZ3VsYXInKSB8fCBjb2xsZWN0aW9uLmdldCgnbGFiZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gdGhpcy5oYW5kbGVDcmVhdGVQb3N0Q2xpY2soY29sbGVjdGlvbi5nZXQoJ25hbWUnKSl9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxTZXR0aW5nc0Ryb3Bkb3duXG4gICAgICAgICAgICAgIGRpc3BsYXlVcmw9e2Rpc3BsYXlVcmx9XG4gICAgICAgICAgICAgIGlzVGVzdFJlcG89e2lzVGVzdFJlcG99XG4gICAgICAgICAgICAgIGltYWdlVXJsPXt1c2VyPy5hdmF0YXJfdXJsfVxuICAgICAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L0FwcEhlYWRlckFjdGlvbnM+XG4gICAgICAgIDwvQXBwSGVhZGVyQ29udGVudD5cbiAgICAgIDwvQXBwSGVhZGVyPlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0ge1xuICBjaGVja0JhY2tlbmRTdGF0dXMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KG51bGwsIG1hcERpc3BhdGNoVG9Qcm9wcykodHJhbnNsYXRlKCkoSGVhZGVyKSk7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AppHeaderButton = /*#__PURE__*/_styled("button", {
  target: "e1rbzf6g4",
  label: "AppHeaderButton"
})(buttons.button, ";background:none;color:#7b8290;font-family:inherit;font-size:16px;font-weight:500;display:inline-flex;padding:16px 20px;align-items:center;", Icon, "{margin-right:4px;color:#b3b9c4;}&:hover,&:active,&:focus-visible{", styles.buttonActive, ";", Icon, "{", styles.buttonActive, ";}}", props => /*#__PURE__*/css("&.", props.activeClassName, "{", styles.buttonActive, ";", Icon, "{", styles.buttonActive, ";}};label:AppHeaderButton;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const AppHeaderNavLink = AppHeaderButton.withComponent(NavLink, {
  target: "e1rbzf6g6",
  label: "AppHeaderNavLink"
});
const AppHeaderActions = /*#__PURE__*/_styled("div", {
  target: "e1rbzf6g3",
  label: "AppHeaderActions"
})(process.env.NODE_ENV === "production" ? {
  name: "8irbms",
  styles: "display:inline-flex;align-items:center"
} : {
  name: "8irbms",
  styles: "display:inline-flex;align-items:center/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AppHeaderQuickNewButton = /*#__PURE__*/_styled(StyledDropdownButton, {
  target: "e1rbzf6g2",
  label: "AppHeaderQuickNewButton"
})(buttons.button, ";", buttons.medium, ";", buttons.gray, ";margin-right:8px;&:after{top:11px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const AppHeaderNavList = /*#__PURE__*/_styled("ul", {
  target: "e1rbzf6g1",
  label: "AppHeaderNavList"
})(process.env.NODE_ENV === "production" ? {
  name: "1vufzxm",
  styles: "display:flex;margin:0;list-style:none"
} : {
  name: "1vufzxm",
  styles: "display:flex;margin:0;list-style:none/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AppHeaderLogo = /*#__PURE__*/_styled("li", {
  target: "e1rbzf6g0",
  label: "AppHeaderLogo"
})(process.env.NODE_ENV === "production" ? {
  name: "d1300z",
  styles: "display:flex;align-items:center;img{padding:12px 20px;max-height:56px;max-width:300px;object-fit:contain;object-position:center;}"
} : {
  name: "d1300z",
  styles: "display:flex;align-items:center;img{padding:12px 20px;max-height:56px;max-width:300px;object-fit:contain;object-position:center;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
class Header extends React.Component {
  static propTypes = {
    user: PropTypes.object.isRequired,
    collections: ImmutablePropTypes.map.isRequired,
    onCreateEntryClick: PropTypes.func.isRequired,
    onLogoutClick: PropTypes.func.isRequired,
    openMediaLibrary: PropTypes.func.isRequired,
    hasWorkflow: PropTypes.bool.isRequired,
    displayUrl: PropTypes.string,
    logoUrl: PropTypes.string,
    // Deprecated, replaced by `logo.src`
    logo: PropTypes.shape({
      src: PropTypes.string.isRequired,
      show_in_header: PropTypes.bool
    }),
    isTestRepo: PropTypes.bool,
    t: PropTypes.func.isRequired,
    checkBackendStatus: PropTypes.func.isRequired
  };
  intervalId;
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(Header.propTypes, this.props, 'prop', 'Header');
    this.intervalId = setInterval(() => {
      this.props.checkBackendStatus();
    }, 5 * 60 * 1000);
  }
  componentWillUnmount() {
    clearInterval(this.intervalId);
  }
  handleCreatePostClick = collectionName => {
    const {
      onCreateEntryClick
    } = this.props;
    if (onCreateEntryClick) {
      onCreateEntryClick(collectionName);
    }
  };
  render() {
    const {
      user,
      collections,
      onLogoutClick,
      openMediaLibrary,
      hasWorkflow,
      displayUrl,
      logoUrl,
      // Deprecated, replaced by `logo.src`
      logo,
      isTestRepo,
      t,
      showMediaButton
    } = this.props;
    const creatableCollections = collections.filter(collection => collection.get('create')).toList();
    const shouldShowLogo = logo?.show_in_header && logo?.src;
    return ___EmotionJSX(AppHeader, null, ___EmotionJSX(AppHeaderContent, null, ___EmotionJSX("nav", null, ___EmotionJSX(AppHeaderNavList, null, shouldShowLogo && ___EmotionJSX(AppHeaderLogo, null, ___EmotionJSX("img", {
      src: logo?.src || logoUrl,
      alt: "Logo"
    })), ___EmotionJSX("li", null, ___EmotionJSX(AppHeaderNavLink, {
      to: "/",
      activeClassName: "header-link-active",
      isActive: (match, location) => location.pathname.startsWith('/collections/')
    }, ___EmotionJSX(Icon, {
      type: "page"
    }), t('app.header.content'))), hasWorkflow && ___EmotionJSX("li", null, ___EmotionJSX(AppHeaderNavLink, {
      to: "/workflow",
      activeClassName: "header-link-active"
    }, ___EmotionJSX(Icon, {
      type: "workflow"
    }), t('app.header.workflow'))), showMediaButton && ___EmotionJSX("li", null, ___EmotionJSX(AppHeaderButton, {
      onClick: openMediaLibrary
    }, ___EmotionJSX(Icon, {
      type: "media-alt"
    }), t('app.header.media'))))), ___EmotionJSX(AppHeaderActions, null, creatableCollections.size > 0 && ___EmotionJSX(Dropdown, {
      renderButton: () => ___EmotionJSX(AppHeaderQuickNewButton, null, " ", t('app.header.quickAdd')),
      dropdownTopOverlap: "30px",
      dropdownWidth: "160px",
      dropdownPosition: "left"
    }, creatableCollections.map(collection => ___EmotionJSX(DropdownItem, {
      key: collection.get('name'),
      label: collection.get('label_singular') || collection.get('label'),
      onClick: () => this.handleCreatePostClick(collection.get('name'))
    }))), ___EmotionJSX(SettingsDropdown, {
      displayUrl: displayUrl,
      isTestRepo: isTestRepo,
      imageUrl: user?.avatar_url,
      onLogoutClick: onLogoutClick
    }))));
  }
}
const mapDispatchToProps = {
  checkBackendStatus
};
export default connect(null, mapDispatchToProps)(translate()(Header));