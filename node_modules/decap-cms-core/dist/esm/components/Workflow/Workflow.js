import _styled from "@emotion/styled/base";
import PropTypes from 'prop-types';
import React, { Component } from 'react';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { OrderedMap } from 'immutable';
import { translate } from 'react-polyglot';
import { connect } from 'react-redux';
import { Dropdown, DropdownItem, StyledDropdownButton, Loader, lengths, components, shadows } from 'decap-cms-ui-default';
import { createNewEntry } from '../../actions/collections';
import { loadUnpublishedEntries, updateUnpublishedEntryStatus, publishUnpublishedEntry, deleteUnpublishedEntry } from '../../actions/editorialWorkflow';
import { selectUnpublishedEntriesByStatus } from '../../reducers';
import { EDITORIAL_WORKFLOW, status } from '../../constants/publishModes';
import WorkflowList from './WorkflowList';
import { jsx as ___EmotionJSX } from "@emotion/react";
const WorkflowContainer = /*#__PURE__*/_styled("div", {
  target: "e1t9l5ui4",
  label: "WorkflowContainer"
})("padding:", lengths.pageMargin, " 0;height:100vh;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRCb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoV29ya2Zsb3cucHJvcFR5cGVzLCB0aGlzLnByb3BzLCAncHJvcCcsICdXb3JrZmxvdycpO1xuXG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcucHVibGlzaF9tb2RlID09PSBFRElUT1JJQUxfV09SS0ZMT1c7XG4gIGNvbnN0IGlzT3BlbkF1dGhvcmluZyA9IGdsb2JhbFVJLnVzZU9wZW5BdXRob3Jpbmc7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTop = /*#__PURE__*/_styled("div", {
  target: "e1t9l5ui3",
  label: "WorkflowTop"
})(components.cardTop, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlDOEIiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoV29ya2Zsb3cucHJvcFR5cGVzLCB0aGlzLnByb3BzLCAncHJvcCcsICdXb3JrZmxvdycpO1xuXG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcucHVibGlzaF9tb2RlID09PSBFRElUT1JJQUxfV09SS0ZMT1c7XG4gIGNvbnN0IGlzT3BlbkF1dGhvcmluZyA9IGdsb2JhbFVJLnVzZU9wZW5BdXRob3Jpbmc7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTopRow = /*#__PURE__*/_styled("div", {
  target: "e1t9l5ui2",
  label: "WorkflowTopRow"
})("display:flex;justify-content:space-between;span[role='button']{", shadows.dropDeep, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXFDaUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoV29ya2Zsb3cucHJvcFR5cGVzLCB0aGlzLnByb3BzLCAncHJvcCcsICdXb3JrZmxvdycpO1xuXG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcucHVibGlzaF9tb2RlID09PSBFRElUT1JJQUxfV09SS0ZMT1c7XG4gIGNvbnN0IGlzT3BlbkF1dGhvcmluZyA9IGdsb2JhbFVJLnVzZU9wZW5BdXRob3Jpbmc7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTopHeading = /*#__PURE__*/_styled("h1", {
  target: "e1t9l5ui1",
  label: "WorkflowTopHeading"
})(components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThDb0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoV29ya2Zsb3cucHJvcFR5cGVzLCB0aGlzLnByb3BzLCAncHJvcCcsICdXb3JrZmxvdycpO1xuXG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcucHVibGlzaF9tb2RlID09PSBFRElUT1JJQUxfV09SS0ZMT1c7XG4gIGNvbnN0IGlzT3BlbkF1dGhvcmluZyA9IGdsb2JhbFVJLnVzZU9wZW5BdXRob3Jpbmc7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
const WorkflowTopDescription = /*#__PURE__*/_styled("p", {
  target: "e1t9l5ui0",
  label: "WorkflowTopDescription"
})(components.cardTopDescription, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtEdUMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBPcmRlcmVkTWFwIH0gZnJvbSAnaW1tdXRhYmxlJztcbmltcG9ydCB7IHRyYW5zbGF0ZSB9IGZyb20gJ3JlYWN0LXBvbHlnbG90JztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQge1xuICBEcm9wZG93bixcbiAgRHJvcGRvd25JdGVtLFxuICBTdHlsZWREcm9wZG93bkJ1dHRvbixcbiAgTG9hZGVyLFxuICBsZW5ndGhzLFxuICBjb21wb25lbnRzLFxuICBzaGFkb3dzLFxufSBmcm9tICdkZWNhcC1jbXMtdWktZGVmYXVsdCc7XG5cbmltcG9ydCB7IGNyZWF0ZU5ld0VudHJ5IH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9jb2xsZWN0aW9ucyc7XG5pbXBvcnQge1xuICBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLFxuICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzLFxuICBwdWJsaXNoVW5wdWJsaXNoZWRFbnRyeSxcbiAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbn0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lZGl0b3JpYWxXb3JrZmxvdyc7XG5pbXBvcnQgeyBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyB9IGZyb20gJy4uLy4uL3JlZHVjZXJzJztcbmltcG9ydCB7IEVESVRPUklBTF9XT1JLRkxPVywgc3RhdHVzIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3B1Ymxpc2hNb2Rlcyc7XG5pbXBvcnQgV29ya2Zsb3dMaXN0IGZyb20gJy4vV29ya2Zsb3dMaXN0JztcblxuY29uc3QgV29ya2Zsb3dDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke2xlbmd0aHMucGFnZU1hcmdpbn0gMDtcbiAgaGVpZ2h0OiAxMDB2aDtcbmA7XG5cbmNvbnN0IFdvcmtmbG93VG9wID0gc3R5bGVkLmRpdmBcbiAgJHtjb21wb25lbnRzLmNhcmRUb3B9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BSb3cgPSBzdHlsZWQuZGl2YFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG5cbiAgc3Bhbltyb2xlPSdidXR0b24nXSB7XG4gICAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgfVxuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BIZWFkaW5nID0gc3R5bGVkLmgxYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcEhlYWRpbmd9O1xuYDtcblxuY29uc3QgV29ya2Zsb3dUb3BEZXNjcmlwdGlvbiA9IHN0eWxlZC5wYFxuICAke2NvbXBvbmVudHMuY2FyZFRvcERlc2NyaXB0aW9ufTtcbmA7XG5cbmNsYXNzIFdvcmtmbG93IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBjb2xsZWN0aW9uczogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICAgIGlzRWRpdG9yaWFsV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0ZldGNoaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB1bnB1Ymxpc2hlZEVudHJpZXM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAsXG4gICAgbG9hZFVucHVibGlzaGVkRW50cmllczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB1cGRhdGVVbnB1Ymxpc2hlZEVudHJ5U3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGRlbGV0ZVVucHVibGlzaGVkRW50cnk6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgdDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgfTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBNYW51YWxseSB2YWxpZGF0ZSBQcm9wVHlwZXMgLSBSZWFjdCAxOSBicmVha2luZyBjaGFuZ2VcbiAgICBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoV29ya2Zsb3cucHJvcFR5cGVzLCB0aGlzLnByb3BzLCAncHJvcCcsICdXb3JrZmxvdycpO1xuXG4gICAgY29uc3QgeyBsb2FkVW5wdWJsaXNoZWRFbnRyaWVzLCBpc0VkaXRvcmlhbFdvcmtmbG93LCBjb2xsZWN0aW9ucyB9ID0gdGhpcy5wcm9wcztcbiAgICBpZiAoaXNFZGl0b3JpYWxXb3JrZmxvdykge1xuICAgICAgbG9hZFVucHVibGlzaGVkRW50cmllcyhjb2xsZWN0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGlzRWRpdG9yaWFsV29ya2Zsb3csXG4gICAgICBpc09wZW5BdXRob3JpbmcsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgdW5wdWJsaXNoZWRFbnRyaWVzLFxuICAgICAgdXBkYXRlVW5wdWJsaXNoZWRFbnRyeVN0YXR1cyxcbiAgICAgIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICAgICAgZGVsZXRlVW5wdWJsaXNoZWRFbnRyeSxcbiAgICAgIGNvbGxlY3Rpb25zLFxuICAgICAgdCxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghaXNFZGl0b3JpYWxXb3JrZmxvdykgcmV0dXJuIG51bGw7XG4gICAgaWYgKGlzRmV0Y2hpbmcpIHJldHVybiA8TG9hZGVyIGFjdGl2ZT57dCgnd29ya2Zsb3cud29ya2Zsb3cubG9hZGluZycpfTwvTG9hZGVyPjtcbiAgICBjb25zdCByZXZpZXdDb3VudCA9IHVucHVibGlzaGVkRW50cmllcy5nZXQoJ3BlbmRpbmdfcmV2aWV3Jykuc2l6ZTtcbiAgICBjb25zdCByZWFkeUNvdW50ID0gdW5wdWJsaXNoZWRFbnRyaWVzLmdldCgncGVuZGluZ19wdWJsaXNoJykuc2l6ZTtcblxuICAgIHJldHVybiAoXG4gICAgICA8V29ya2Zsb3dDb250YWluZXI+XG4gICAgICAgIDxXb3JrZmxvd1RvcD5cbiAgICAgICAgICA8V29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgICA8V29ya2Zsb3dUb3BIZWFkaW5nPnt0KCd3b3JrZmxvdy53b3JrZmxvdy53b3JrZmxvd0hlYWRpbmcnKX08L1dvcmtmbG93VG9wSGVhZGluZz5cbiAgICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgICBkcm9wZG93bldpZHRoPVwiMTYwcHhcIlxuICAgICAgICAgICAgICBkcm9wZG93blBvc2l0aW9uPVwibGVmdFwiXG4gICAgICAgICAgICAgIGRyb3Bkb3duVG9wT3ZlcmxhcD1cIjQwcHhcIlxuICAgICAgICAgICAgICByZW5kZXJCdXR0b249eygpID0+IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRHJvcGRvd25CdXR0b24+e3QoJ3dvcmtmbG93LndvcmtmbG93Lm5ld1Bvc3QnKX08L1N0eWxlZERyb3Bkb3duQnV0dG9uPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Y29sbGVjdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGNvbGxlY3Rpb24gPT4gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpKVxuICAgICAgICAgICAgICAgIC50b0xpc3QoKVxuICAgICAgICAgICAgICAgIC5tYXAoY29sbGVjdGlvbiA9PiAoXG4gICAgICAgICAgICAgICAgICA8RHJvcGRvd25JdGVtXG4gICAgICAgICAgICAgICAgICAgIGtleT17Y29sbGVjdGlvbi5nZXQoJ25hbWUnKX1cbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9e2NvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBjcmVhdGVOZXdFbnRyeShjb2xsZWN0aW9uLmdldCgnbmFtZScpKX1cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKSl9XG4gICAgICAgICAgICA8L0Ryb3Bkb3duPlxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BSb3c+XG4gICAgICAgICAgPFdvcmtmbG93VG9wRGVzY3JpcHRpb24+XG4gICAgICAgICAgICB7dCgnd29ya2Zsb3cud29ya2Zsb3cuZGVzY3JpcHRpb24nLCB7XG4gICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiByZXZpZXdDb3VudCxcbiAgICAgICAgICAgICAgcmVhZHlDb3VudCxcbiAgICAgICAgICAgIH0pfVxuICAgICAgICAgIDwvV29ya2Zsb3dUb3BEZXNjcmlwdGlvbj5cbiAgICAgICAgPC9Xb3JrZmxvd1RvcD5cbiAgICAgICAgPFdvcmtmbG93TGlzdFxuICAgICAgICAgIGVudHJpZXM9e3VucHVibGlzaGVkRW50cmllc31cbiAgICAgICAgICBoYW5kbGVDaGFuZ2VTdGF0dXM9e3VwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXN9XG4gICAgICAgICAgaGFuZGxlUHVibGlzaD17cHVibGlzaFVucHVibGlzaGVkRW50cnl9XG4gICAgICAgICAgaGFuZGxlRGVsZXRlPXtkZWxldGVVbnB1Ymxpc2hlZEVudHJ5fVxuICAgICAgICAgIGlzT3BlbkF1dGhvcmluZz17aXNPcGVuQXV0aG9yaW5nfVxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgLz5cbiAgICAgIDwvV29ya2Zsb3dDb250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcbiAgY29uc3QgeyBjb2xsZWN0aW9ucywgY29uZmlnLCBnbG9iYWxVSSB9ID0gc3RhdGU7XG4gIGNvbnN0IGlzRWRpdG9yaWFsV29ya2Zsb3cgPSBjb25maWcucHVibGlzaF9tb2RlID09PSBFRElUT1JJQUxfV09SS0ZMT1c7XG4gIGNvbnN0IGlzT3BlbkF1dGhvcmluZyA9IGdsb2JhbFVJLnVzZU9wZW5BdXRob3Jpbmc7XG4gIGNvbnN0IHJldHVybk9iaiA9IHsgY29sbGVjdGlvbnMsIGlzRWRpdG9yaWFsV29ya2Zsb3csIGlzT3BlbkF1dGhvcmluZyB9O1xuXG4gIGlmIChpc0VkaXRvcmlhbFdvcmtmbG93KSB7XG4gICAgcmV0dXJuT2JqLmlzRmV0Y2hpbmcgPSBzdGF0ZS5lZGl0b3JpYWxXb3JrZmxvdy5nZXRJbihbJ3BhZ2VzJywgJ2lzRmV0Y2hpbmcnXSwgZmFsc2UpO1xuXG4gICAgLypcbiAgICAgKiBHZW5lcmF0ZXMgYW4gb3JkZXJlZCBNYXAgb2YgdGhlIGF2YWlsYWJsZSBzdGF0dXMgYXMga2V5cy5cbiAgICAgKiBFYWNoIGtleSBjb250YWluaW5nIGEgU2VxdWVuY2Ugb2YgYXZhaWxhYmxlIHVucHViaGxpc2hlZCBlbnRyaWVzXG4gICAgICogRWcuOiBPcmRlcmVkTWFweydkcmFmdCc6U2VxKCksICdwZW5kaW5nX3Jldmlldyc6U2VxKCksICdwZW5kaW5nX3B1Ymxpc2gnOlNlcSgpfVxuICAgICAqL1xuICAgIHJldHVybk9iai51bnB1Ymxpc2hlZEVudHJpZXMgPSBzdGF0dXMucmVkdWNlKChhY2MsIGN1cnJTdGF0dXMpID0+IHtcbiAgICAgIGNvbnN0IGVudHJpZXMgPSBzZWxlY3RVbnB1Ymxpc2hlZEVudHJpZXNCeVN0YXR1cyhzdGF0ZSwgY3VyclN0YXR1cyk7XG4gICAgICByZXR1cm4gYWNjLnNldChjdXJyU3RhdHVzLCBlbnRyaWVzKTtcbiAgICB9LCBPcmRlcmVkTWFwKCkpO1xuICB9XG4gIHJldHVybiByZXR1cm5PYmo7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCB7XG4gIGxvYWRVbnB1Ymxpc2hlZEVudHJpZXMsXG4gIHVwZGF0ZVVucHVibGlzaGVkRW50cnlTdGF0dXMsXG4gIHB1Ymxpc2hVbnB1Ymxpc2hlZEVudHJ5LFxuICBkZWxldGVVbnB1Ymxpc2hlZEVudHJ5LFxufSkodHJhbnNsYXRlKCkoV29ya2Zsb3cpKTtcbiJdfQ== */"));
class Workflow extends Component {
  static propTypes = {
    collections: ImmutablePropTypes.map.isRequired,
    isEditorialWorkflow: PropTypes.bool.isRequired,
    isOpenAuthoring: PropTypes.bool,
    isFetching: PropTypes.bool,
    unpublishedEntries: ImmutablePropTypes.map,
    loadUnpublishedEntries: PropTypes.func.isRequired,
    updateUnpublishedEntryStatus: PropTypes.func.isRequired,
    publishUnpublishedEntry: PropTypes.func.isRequired,
    deleteUnpublishedEntry: PropTypes.func.isRequired,
    t: PropTypes.func.isRequired
  };
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(Workflow.propTypes, this.props, 'prop', 'Workflow');
    const {
      loadUnpublishedEntries,
      isEditorialWorkflow,
      collections
    } = this.props;
    if (isEditorialWorkflow) {
      loadUnpublishedEntries(collections);
    }
  }
  render() {
    const {
      isEditorialWorkflow,
      isOpenAuthoring,
      isFetching,
      unpublishedEntries,
      updateUnpublishedEntryStatus,
      publishUnpublishedEntry,
      deleteUnpublishedEntry,
      collections,
      t
    } = this.props;
    if (!isEditorialWorkflow) return null;
    if (isFetching) return ___EmotionJSX(Loader, {
      active: true
    }, t('workflow.workflow.loading'));
    const reviewCount = unpublishedEntries.get('pending_review').size;
    const readyCount = unpublishedEntries.get('pending_publish').size;
    return ___EmotionJSX(WorkflowContainer, null, ___EmotionJSX(WorkflowTop, null, ___EmotionJSX(WorkflowTopRow, null, ___EmotionJSX(WorkflowTopHeading, null, t('workflow.workflow.workflowHeading')), ___EmotionJSX(Dropdown, {
      dropdownWidth: "160px",
      dropdownPosition: "left",
      dropdownTopOverlap: "40px",
      renderButton: () => ___EmotionJSX(StyledDropdownButton, null, t('workflow.workflow.newPost'))
    }, collections.filter(collection => collection.get('create')).toList().map(collection => ___EmotionJSX(DropdownItem, {
      key: collection.get('name'),
      label: collection.get('label'),
      onClick: () => createNewEntry(collection.get('name'))
    })))), ___EmotionJSX(WorkflowTopDescription, null, t('workflow.workflow.description', {
      smart_count: reviewCount,
      readyCount
    }))), ___EmotionJSX(WorkflowList, {
      entries: unpublishedEntries,
      handleChangeStatus: updateUnpublishedEntryStatus,
      handlePublish: publishUnpublishedEntry,
      handleDelete: deleteUnpublishedEntry,
      isOpenAuthoring: isOpenAuthoring,
      collections: collections
    }));
  }
}
function mapStateToProps(state) {
  const {
    collections,
    config,
    globalUI
  } = state;
  const isEditorialWorkflow = config.publish_mode === EDITORIAL_WORKFLOW;
  const isOpenAuthoring = globalUI.useOpenAuthoring;
  const returnObj = {
    collections,
    isEditorialWorkflow,
    isOpenAuthoring
  };
  if (isEditorialWorkflow) {
    returnObj.isFetching = state.editorialWorkflow.getIn(['pages', 'isFetching'], false);

    /*
     * Generates an ordered Map of the available status as keys.
     * Each key containing a Sequence of available unpubhlished entries
     * Eg.: OrderedMap{'draft':Seq(), 'pending_review':Seq(), 'pending_publish':Seq()}
     */
    returnObj.unpublishedEntries = status.reduce((acc, currStatus) => {
      const entries = selectUnpublishedEntriesByStatus(state, currStatus);
      return acc.set(currStatus, entries);
    }, OrderedMap());
  }
  return returnObj;
}
export default connect(mapStateToProps, {
  loadUnpublishedEntries,
  updateUnpublishedEntryStatus,
  publishUnpublishedEntry,
  deleteUnpublishedEntry
})(translate()(Workflow));