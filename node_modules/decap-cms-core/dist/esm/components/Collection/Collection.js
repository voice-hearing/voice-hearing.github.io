import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { connect } from 'react-redux';
import { translate } from 'react-polyglot';
import { lengths, components } from 'decap-cms-ui-default';
import { getNewEntryUrl } from '../../lib/urlHelper';
import Sidebar from './Sidebar';
import CollectionTop from './CollectionTop';
import EntriesCollection from './Entries/EntriesCollection';
import EntriesSearch from './Entries/EntriesSearch';
import CollectionControls from './CollectionControls';
import { sortByField, filterByField, changeViewStyle, groupByField } from '../../actions/entries';
import { selectSortableFields, selectViewFilters, selectViewGroups } from '../../reducers/collections';
import { selectEntriesSort, selectEntriesFilter, selectEntriesGroup, selectViewStyle } from '../../reducers/entries';
import { jsx as ___EmotionJSX } from "@emotion/react";
const CollectionContainer = /*#__PURE__*/_styled("div", {
  target: "e1sogrfi3",
  label: "CollectionContainer"
})("margin:", lengths.pageMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CollectionMain = /*#__PURE__*/_styled("main", {
  target: "e1sogrfi2",
  label: "CollectionMain"
})(process.env.NODE_ENV === "production" ? {
  name: "tka7ew",
  styles: "padding-left:280px"
} : {
  name: "tka7ew",
  styles: "padding-left:280px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const SearchResultContainer = /*#__PURE__*/_styled("div", {
  target: "e1sogrfi1",
  label: "SearchResultContainer"
})(components.cardTop, ";margin-bottom:22px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SearchResultHeading = /*#__PURE__*/_styled("h1", {
  target: "e1sogrfi0",
  label: "SearchResultHeading"
})(components.cardTopHeading, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3Q3FDIiwiZmlsZSI6Ii4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyB0cmFuc2xhdGUgfSBmcm9tICdyZWFjdC1wb2x5Z2xvdCc7XG5pbXBvcnQgeyBsZW5ndGhzLCBjb21wb25lbnRzIH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuXG5pbXBvcnQgeyBnZXROZXdFbnRyeVVybCB9IGZyb20gJy4uLy4uL2xpYi91cmxIZWxwZXInO1xuaW1wb3J0IFNpZGViYXIgZnJvbSAnLi9TaWRlYmFyJztcbmltcG9ydCBDb2xsZWN0aW9uVG9wIGZyb20gJy4vQ29sbGVjdGlvblRvcCc7XG5pbXBvcnQgRW50cmllc0NvbGxlY3Rpb24gZnJvbSAnLi9FbnRyaWVzL0VudHJpZXNDb2xsZWN0aW9uJztcbmltcG9ydCBFbnRyaWVzU2VhcmNoIGZyb20gJy4vRW50cmllcy9FbnRyaWVzU2VhcmNoJztcbmltcG9ydCBDb2xsZWN0aW9uQ29udHJvbHMgZnJvbSAnLi9Db2xsZWN0aW9uQ29udHJvbHMnO1xuaW1wb3J0IHsgc29ydEJ5RmllbGQsIGZpbHRlckJ5RmllbGQsIGNoYW5nZVZpZXdTdHlsZSwgZ3JvdXBCeUZpZWxkIH0gZnJvbSAnLi4vLi4vYWN0aW9ucy9lbnRyaWVzJztcbmltcG9ydCB7XG4gIHNlbGVjdFNvcnRhYmxlRmllbGRzLFxuICBzZWxlY3RWaWV3RmlsdGVycyxcbiAgc2VsZWN0Vmlld0dyb3Vwcyxcbn0gZnJvbSAnLi4vLi4vcmVkdWNlcnMvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHtcbiAgc2VsZWN0RW50cmllc1NvcnQsXG4gIHNlbGVjdEVudHJpZXNGaWx0ZXIsXG4gIHNlbGVjdEVudHJpZXNHcm91cCxcbiAgc2VsZWN0Vmlld1N0eWxlLFxufSBmcm9tICcuLi8uLi9yZWR1Y2Vycy9lbnRyaWVzJztcblxuY29uc3QgQ29sbGVjdGlvbkNvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gIG1hcmdpbjogJHtsZW5ndGhzLnBhZ2VNYXJnaW59O1xuYDtcblxuY29uc3QgQ29sbGVjdGlvbk1haW4gPSBzdHlsZWQubWFpbmBcbiAgcGFkZGluZy1sZWZ0OiAyODBweDtcbmA7XG5cbmNvbnN0IFNlYXJjaFJlc3VsdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXG4gICR7Y29tcG9uZW50cy5jYXJkVG9wfTtcbiAgbWFyZ2luLWJvdHRvbTogMjJweDtcbmA7XG5cbmNvbnN0IFNlYXJjaFJlc3VsdEhlYWRpbmcgPSBzdHlsZWQuaDFgXG4gICR7Y29tcG9uZW50cy5jYXJkVG9wSGVhZGluZ307XG5gO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgc2VhcmNoVGVybTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xsZWN0aW9uTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBpc1NlYXJjaFJlc3VsdHM6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzU2luZ2xlU2VhcmNoUmVzdWx0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBjb2xsZWN0aW9uOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLmlzUmVxdWlyZWQsXG4gICAgY29sbGVjdGlvbnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgICBzb3J0YWJsZUZpZWxkczogUHJvcFR5cGVzLmFycmF5LFxuICAgIHNvcnQ6IEltbXV0YWJsZVByb3BUeXBlcy5vcmRlcmVkTWFwLFxuICAgIG9uU29ydENsaWNrOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIC8vIE1hbnVhbGx5IHZhbGlkYXRlIFByb3BUeXBlcyAtIFJlYWN0IDE5IGJyZWFraW5nIGNoYW5nZVxuICAgIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyhDb2xsZWN0aW9uLnByb3BUeXBlcywgdGhpcy5wcm9wcywgJ3Byb3AnLCAnQ29sbGVjdGlvbicpO1xuICB9XG5cbiAgcmVuZGVyRW50cmllc0NvbGxlY3Rpb24gPSAoKSA9PiB7XG4gICAgY29uc3QgeyBjb2xsZWN0aW9uLCBmaWx0ZXJUZXJtLCB2aWV3U3R5bGUgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFbnRyaWVzQ29sbGVjdGlvbiBjb2xsZWN0aW9uPXtjb2xsZWN0aW9ufSB2aWV3U3R5bGU9e3ZpZXdTdHlsZX0gZmlsdGVyVGVybT17ZmlsdGVyVGVybX0gLz5cbiAgICApO1xuICB9O1xuXG4gIHJlbmRlckVudHJpZXNTZWFyY2ggPSAoKSA9PiB7XG4gICAgY29uc3QgeyBzZWFyY2hUZXJtLCBjb2xsZWN0aW9ucywgY29sbGVjdGlvbiwgaXNTaW5nbGVTZWFyY2hSZXN1bHQgfSA9IHRoaXMucHJvcHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxFbnRyaWVzU2VhcmNoXG4gICAgICAgIGNvbGxlY3Rpb25zPXtpc1NpbmdsZVNlYXJjaFJlc3VsdCA/IGNvbGxlY3Rpb25zLmZpbHRlcihjID0+IGMgPT09IGNvbGxlY3Rpb24pIDogY29sbGVjdGlvbnN9XG4gICAgICAgIHNlYXJjaFRlcm09e3NlYXJjaFRlcm19XG4gICAgICAvPlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBjb2xsZWN0aW9ucyxcbiAgICAgIGNvbGxlY3Rpb25OYW1lLFxuICAgICAgaXNTZWFyY2hFbmFibGVkLFxuICAgICAgaXNTZWFyY2hSZXN1bHRzLFxuICAgICAgaXNTaW5nbGVTZWFyY2hSZXN1bHQsXG4gICAgICBzZWFyY2hUZXJtLFxuICAgICAgc29ydGFibGVGaWVsZHMsXG4gICAgICBvblNvcnRDbGljayxcbiAgICAgIHNvcnQsXG4gICAgICB2aWV3RmlsdGVycyxcbiAgICAgIHZpZXdHcm91cHMsXG4gICAgICBmaWx0ZXJUZXJtLFxuICAgICAgdCxcbiAgICAgIG9uRmlsdGVyQ2xpY2ssXG4gICAgICBvbkdyb3VwQ2xpY2ssXG4gICAgICBmaWx0ZXIsXG4gICAgICBncm91cCxcbiAgICAgIG9uQ2hhbmdlVmlld1N0eWxlLFxuICAgICAgdmlld1N0eWxlLFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IG5ld0VudHJ5VXJsID0gY29sbGVjdGlvbi5nZXQoJ2NyZWF0ZScpID8gZ2V0TmV3RW50cnlVcmwoY29sbGVjdGlvbk5hbWUpIDogJyc7XG4gICAgaWYgKG5ld0VudHJ5VXJsICYmIGZpbHRlclRlcm0pIHtcbiAgICAgIG5ld0VudHJ5VXJsID0gZ2V0TmV3RW50cnlVcmwoY29sbGVjdGlvbk5hbWUpO1xuICAgICAgaWYgKGZpbHRlclRlcm0pIHtcbiAgICAgICAgbmV3RW50cnlVcmwgPSBgJHtuZXdFbnRyeVVybH0/cGF0aD0ke2ZpbHRlclRlcm19YDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZWFyY2hSZXN1bHRLZXkgPVxuICAgICAgJ2NvbGxlY3Rpb24uY29sbGVjdGlvblRvcC5zZWFyY2hSZXN1bHRzJyArIChpc1NpbmdsZVNlYXJjaFJlc3VsdCA/ICdJbkNvbGxlY3Rpb24nIDogJycpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxDb2xsZWN0aW9uQ29udGFpbmVyPlxuICAgICAgICA8U2lkZWJhclxuICAgICAgICAgIGNvbGxlY3Rpb25zPXtjb2xsZWN0aW9uc31cbiAgICAgICAgICBjb2xsZWN0aW9uPXsoIWlzU2VhcmNoUmVzdWx0cyB8fCBpc1NpbmdsZVNlYXJjaFJlc3VsdCkgJiYgY29sbGVjdGlvbn1cbiAgICAgICAgICBpc1NlYXJjaEVuYWJsZWQ9e2lzU2VhcmNoRW5hYmxlZH1cbiAgICAgICAgICBzZWFyY2hUZXJtPXtzZWFyY2hUZXJtfVxuICAgICAgICAgIGZpbHRlclRlcm09e2ZpbHRlclRlcm19XG4gICAgICAgIC8+XG4gICAgICAgIDxDb2xsZWN0aW9uTWFpbj5cbiAgICAgICAgICB7aXNTZWFyY2hSZXN1bHRzID8gKFxuICAgICAgICAgICAgPFNlYXJjaFJlc3VsdENvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPFNlYXJjaFJlc3VsdEhlYWRpbmc+XG4gICAgICAgICAgICAgICAge3Qoc2VhcmNoUmVzdWx0S2V5LCB7IHNlYXJjaFRlcm0sIGNvbGxlY3Rpb246IGNvbGxlY3Rpb24uZ2V0KCdsYWJlbCcpIH0pfVxuICAgICAgICAgICAgICA8L1NlYXJjaFJlc3VsdEhlYWRpbmc+XG4gICAgICAgICAgICA8L1NlYXJjaFJlc3VsdENvbnRhaW5lcj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgPENvbGxlY3Rpb25Ub3AgY29sbGVjdGlvbj17Y29sbGVjdGlvbn0gbmV3RW50cnlVcmw9e25ld0VudHJ5VXJsfSAvPlxuICAgICAgICAgICAgICA8Q29sbGVjdGlvbkNvbnRyb2xzXG4gICAgICAgICAgICAgICAgdmlld1N0eWxlPXt2aWV3U3R5bGV9XG4gICAgICAgICAgICAgICAgb25DaGFuZ2VWaWV3U3R5bGU9e29uQ2hhbmdlVmlld1N0eWxlfVxuICAgICAgICAgICAgICAgIHNvcnRhYmxlRmllbGRzPXtzb3J0YWJsZUZpZWxkc31cbiAgICAgICAgICAgICAgICBvblNvcnRDbGljaz17b25Tb3J0Q2xpY2t9XG4gICAgICAgICAgICAgICAgc29ydD17c29ydH1cbiAgICAgICAgICAgICAgICB2aWV3RmlsdGVycz17dmlld0ZpbHRlcnN9XG4gICAgICAgICAgICAgICAgdmlld0dyb3Vwcz17dmlld0dyb3Vwc31cbiAgICAgICAgICAgICAgICB0PXt0fVxuICAgICAgICAgICAgICAgIG9uRmlsdGVyQ2xpY2s9e29uRmlsdGVyQ2xpY2t9XG4gICAgICAgICAgICAgICAgb25Hcm91cENsaWNrPXtvbkdyb3VwQ2xpY2t9XG4gICAgICAgICAgICAgICAgZmlsdGVyPXtmaWx0ZXJ9XG4gICAgICAgICAgICAgICAgZ3JvdXA9e2dyb3VwfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC8+XG4gICAgICAgICAgKX1cbiAgICAgICAgICB7aXNTZWFyY2hSZXN1bHRzID8gdGhpcy5yZW5kZXJFbnRyaWVzU2VhcmNoKCkgOiB0aGlzLnJlbmRlckVudHJpZXNDb2xsZWN0aW9uKCl9XG4gICAgICAgIDwvQ29sbGVjdGlvbk1haW4+XG4gICAgICA8L0NvbGxlY3Rpb25Db250YWluZXI+XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKSB7XG4gIGNvbnN0IHsgY29sbGVjdGlvbnMgfSA9IHN0YXRlO1xuICBjb25zdCBpc1NlYXJjaEVuYWJsZWQgPSBzdGF0ZS5jb25maWcgJiYgc3RhdGUuY29uZmlnLnNlYXJjaCAhPSBmYWxzZTtcbiAgY29uc3QgeyBpc1NlYXJjaFJlc3VsdHMsIG1hdGNoLCB0IH0gPSBvd25Qcm9wcztcbiAgY29uc3QgeyBuYW1lLCBzZWFyY2hUZXJtID0gJycsIGZpbHRlclRlcm0gPSAnJyB9ID0gbWF0Y2gucGFyYW1zO1xuICBjb25zdCBjb2xsZWN0aW9uID0gbmFtZSA/IGNvbGxlY3Rpb25zLmdldChuYW1lKSA6IGNvbGxlY3Rpb25zLmZpcnN0KCk7XG4gIGNvbnN0IHNvcnQgPSBzZWxlY3RFbnRyaWVzU29ydChzdGF0ZS5lbnRyaWVzLCBjb2xsZWN0aW9uLmdldCgnbmFtZScpKTtcbiAgY29uc3Qgc29ydGFibGVGaWVsZHMgPSBzZWxlY3RTb3J0YWJsZUZpZWxkcyhjb2xsZWN0aW9uLCB0KTtcbiAgY29uc3Qgdmlld0ZpbHRlcnMgPSBzZWxlY3RWaWV3RmlsdGVycyhjb2xsZWN0aW9uKTtcbiAgY29uc3Qgdmlld0dyb3VwcyA9IHNlbGVjdFZpZXdHcm91cHMoY29sbGVjdGlvbik7XG4gIGNvbnN0IGZpbHRlciA9IHNlbGVjdEVudHJpZXNGaWx0ZXIoc3RhdGUuZW50cmllcywgY29sbGVjdGlvbi5nZXQoJ25hbWUnKSk7XG4gIGNvbnN0IGdyb3VwID0gc2VsZWN0RW50cmllc0dyb3VwKHN0YXRlLmVudHJpZXMsIGNvbGxlY3Rpb24uZ2V0KCduYW1lJykpO1xuICBjb25zdCB2aWV3U3R5bGUgPSBzZWxlY3RWaWV3U3R5bGUoc3RhdGUuZW50cmllcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBjb2xsZWN0aW9uLFxuICAgIGNvbGxlY3Rpb25zLFxuICAgIGNvbGxlY3Rpb25OYW1lOiBuYW1lLFxuICAgIGlzU2VhcmNoRW5hYmxlZCxcbiAgICBpc1NlYXJjaFJlc3VsdHMsXG4gICAgc2VhcmNoVGVybSxcbiAgICBmaWx0ZXJUZXJtLFxuICAgIHNvcnQsXG4gICAgc29ydGFibGVGaWVsZHMsXG4gICAgdmlld0ZpbHRlcnMsXG4gICAgdmlld0dyb3VwcyxcbiAgICBmaWx0ZXIsXG4gICAgZ3JvdXAsXG4gICAgdmlld1N0eWxlLFxuICB9O1xufVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSB7XG4gIHNvcnRCeUZpZWxkLFxuICBmaWx0ZXJCeUZpZWxkLFxuICBjaGFuZ2VWaWV3U3R5bGUsXG4gIGdyb3VwQnlGaWVsZCxcbn07XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZVByb3BzLFxuICAgIC4uLm93blByb3BzLFxuICAgIG9uU29ydENsaWNrOiAoa2V5LCBkaXJlY3Rpb24pID0+XG4gICAgICBkaXNwYXRjaFByb3BzLnNvcnRCeUZpZWxkKHN0YXRlUHJvcHMuY29sbGVjdGlvbiwga2V5LCBkaXJlY3Rpb24pLFxuICAgIG9uRmlsdGVyQ2xpY2s6IGZpbHRlciA9PiBkaXNwYXRjaFByb3BzLmZpbHRlckJ5RmllbGQoc3RhdGVQcm9wcy5jb2xsZWN0aW9uLCBmaWx0ZXIpLFxuICAgIG9uR3JvdXBDbGljazogZ3JvdXAgPT4gZGlzcGF0Y2hQcm9wcy5ncm91cEJ5RmllbGQoc3RhdGVQcm9wcy5jb2xsZWN0aW9uLCBncm91cCksXG4gICAgb25DaGFuZ2VWaWV3U3R5bGU6IHZpZXdTdHlsZSA9PiBkaXNwYXRjaFByb3BzLmNoYW5nZVZpZXdTdHlsZSh2aWV3U3R5bGUpLFxuICB9O1xufVxuXG5jb25zdCBDb25uZWN0ZWRDb2xsZWN0aW9uID0gY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcykoQ29sbGVjdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IHRyYW5zbGF0ZSgpKENvbm5lY3RlZENvbGxlY3Rpb24pO1xuIl19 */"));
export class Collection extends React.Component {
  static propTypes = {
    searchTerm: PropTypes.string,
    collectionName: PropTypes.string,
    isSearchResults: PropTypes.bool,
    isSingleSearchResult: PropTypes.bool,
    collection: ImmutablePropTypes.map.isRequired,
    collections: ImmutablePropTypes.map.isRequired,
    sortableFields: PropTypes.array,
    sort: ImmutablePropTypes.orderedMap,
    onSortClick: PropTypes.func.isRequired
  };
  componentDidMount() {
    // Manually validate PropTypes - React 19 breaking change
    PropTypes.checkPropTypes(Collection.propTypes, this.props, 'prop', 'Collection');
  }
  renderEntriesCollection = () => {
    const {
      collection,
      filterTerm,
      viewStyle
    } = this.props;
    return ___EmotionJSX(EntriesCollection, {
      collection: collection,
      viewStyle: viewStyle,
      filterTerm: filterTerm
    });
  };
  renderEntriesSearch = () => {
    const {
      searchTerm,
      collections,
      collection,
      isSingleSearchResult
    } = this.props;
    return ___EmotionJSX(EntriesSearch, {
      collections: isSingleSearchResult ? collections.filter(c => c === collection) : collections,
      searchTerm: searchTerm
    });
  };
  render() {
    const {
      collection,
      collections,
      collectionName,
      isSearchEnabled,
      isSearchResults,
      isSingleSearchResult,
      searchTerm,
      sortableFields,
      onSortClick,
      sort,
      viewFilters,
      viewGroups,
      filterTerm,
      t,
      onFilterClick,
      onGroupClick,
      filter,
      group,
      onChangeViewStyle,
      viewStyle
    } = this.props;
    let newEntryUrl = collection.get('create') ? getNewEntryUrl(collectionName) : '';
    if (newEntryUrl && filterTerm) {
      newEntryUrl = getNewEntryUrl(collectionName);
      if (filterTerm) {
        newEntryUrl = `${newEntryUrl}?path=${filterTerm}`;
      }
    }
    const searchResultKey = 'collection.collectionTop.searchResults' + (isSingleSearchResult ? 'InCollection' : '');
    return ___EmotionJSX(CollectionContainer, null, ___EmotionJSX(Sidebar, {
      collections: collections,
      collection: (!isSearchResults || isSingleSearchResult) && collection,
      isSearchEnabled: isSearchEnabled,
      searchTerm: searchTerm,
      filterTerm: filterTerm
    }), ___EmotionJSX(CollectionMain, null, isSearchResults ? ___EmotionJSX(SearchResultContainer, null, ___EmotionJSX(SearchResultHeading, null, t(searchResultKey, {
      searchTerm,
      collection: collection.get('label')
    }))) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX(CollectionTop, {
      collection: collection,
      newEntryUrl: newEntryUrl
    }), ___EmotionJSX(CollectionControls, {
      viewStyle: viewStyle,
      onChangeViewStyle: onChangeViewStyle,
      sortableFields: sortableFields,
      onSortClick: onSortClick,
      sort: sort,
      viewFilters: viewFilters,
      viewGroups: viewGroups,
      t: t,
      onFilterClick: onFilterClick,
      onGroupClick: onGroupClick,
      filter: filter,
      group: group
    })), isSearchResults ? this.renderEntriesSearch() : this.renderEntriesCollection()));
  }
}
function mapStateToProps(state, ownProps) {
  const {
    collections
  } = state;
  const isSearchEnabled = state.config && state.config.search != false;
  const {
    isSearchResults,
    match,
    t
  } = ownProps;
  const {
    name,
    searchTerm = '',
    filterTerm = ''
  } = match.params;
  const collection = name ? collections.get(name) : collections.first();
  const sort = selectEntriesSort(state.entries, collection.get('name'));
  const sortableFields = selectSortableFields(collection, t);
  const viewFilters = selectViewFilters(collection);
  const viewGroups = selectViewGroups(collection);
  const filter = selectEntriesFilter(state.entries, collection.get('name'));
  const group = selectEntriesGroup(state.entries, collection.get('name'));
  const viewStyle = selectViewStyle(state.entries);
  return {
    collection,
    collections,
    collectionName: name,
    isSearchEnabled,
    isSearchResults,
    searchTerm,
    filterTerm,
    sort,
    sortableFields,
    viewFilters,
    viewGroups,
    filter,
    group,
    viewStyle
  };
}
const mapDispatchToProps = {
  sortByField,
  filterByField,
  changeViewStyle,
  groupByField
};
function mergeProps(stateProps, dispatchProps, ownProps) {
  return {
    ...stateProps,
    ...ownProps,
    onSortClick: (key, direction) => dispatchProps.sortByField(stateProps.collection, key, direction),
    onFilterClick: filter => dispatchProps.filterByField(stateProps.collection, filter),
    onGroupClick: group => dispatchProps.groupByField(stateProps.collection, group),
    onChangeViewStyle: viewStyle => dispatchProps.changeViewStyle(viewStyle)
  };
}
const ConnectedCollection = connect(mapStateToProps, mapDispatchToProps, mergeProps)(Collection);
export default translate()(ConnectedCollection);