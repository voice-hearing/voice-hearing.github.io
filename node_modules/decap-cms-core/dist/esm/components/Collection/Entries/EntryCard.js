import _styled from "@emotion/styled/base";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import { connect } from 'react-redux';
import { Link } from 'react-router-dom';
import { colors, colorsRaw, components, lengths, zIndex } from 'decap-cms-ui-default';
import { translate } from 'react-polyglot';
import { boundGetAsset } from '../../../actions/media';
import { VIEW_STYLE_LIST, VIEW_STYLE_GRID } from '../../../constants/collectionViews';
import { selectIsLoadingAsset } from '../../../reducers/medias';
import { selectEntryCollectionTitle } from '../../../reducers/collections';
import { jsx as ___EmotionJSX } from "@emotion/react";
const ListCard = /*#__PURE__*/_styled("li", {
  target: "effeus410",
  label: "ListCard"
})(components.card, ";width:", lengths.topCardWidth, ";margin-left:12px;margin-bottom:10px;overflow:hidden;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ListCardLink = /*#__PURE__*/_styled(Link, {
  target: "effeus49",
  label: "ListCardLink"
})("display:block;max-width:100%;padding:16px 20px;&:hover{background-color:", colors.foreground, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0JpQyIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuXG5pbXBvcnQgeyBib3VuZEdldEFzc2V0IH0gZnJvbSAnLi4vLi4vLi4vYWN0aW9ucy9tZWRpYSc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc2VsZWN0SXNMb2FkaW5nQXNzZXQgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9tZWRpYXMnO1xuaW1wb3J0IHsgc2VsZWN0RW50cnlDb2xsZWN0aW9uVGl0bGUgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9jb2xsZWN0aW9ucyc7XG5cbmNvbnN0IExpc3RDYXJkID0gc3R5bGVkLmxpYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIHdpZHRoOiAke2xlbmd0aHMudG9wQ2FyZFdpZHRofTtcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5gO1xuXG5jb25zdCBMaXN0Q2FyZExpbmsgPSBzdHlsZWQoTGluaylgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDE2cHggMjBweDtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogMTAwJTtcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XG5cbiAgJixcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5gO1xuXG5jb25zdCBDb2xsZWN0aW9uTGFiZWwgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5cbmNvbnN0IExpc3RDYXJkVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbi1ib3R0b206IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMHB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogJHt6SW5kZXguekluZGV4MX07XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IC0yMCU7XG4gICAgaGVpZ2h0OiAxNDAlO1xuICAgIHdpZHRoOiAxNDAlO1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTE1cHggMjRweCAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIH1cbmA7XG5cbmNvbnN0IENhcmRJbWFnZSA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke3Byb3BzID0+IHByb3BzLnNyY30pO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBoZWlnaHQ6IDE1MHB4O1xuYDtcblxuY29uc3QgVGl0bGVJY29ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuYDtcblxuY29uc3QgV29ya2Zsb3dCYWRnZSA9IHN0eWxlZC5zcGFuYFxuICBwYWRkaW5nOiAycHggNnB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5zdGF0dXMpIHtcbiAgICAgIGNhc2UgJ2RyYWZ0JzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNEcmFmdEJhY2tncm91bmQ7XG4gICAgICBjYXNlICdwZW5kaW5nX3Jldmlldyc6XG4gICAgICAgIHJldHVybiBjb2xvcnMuc3RhdHVzUmV2aWV3QmFja2dyb3VuZDtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICAgIHJldHVybiBjb2xvcnMuc3RhdHVzUmVhZHlCYWNrZ3JvdW5kO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5iYWNrZ3JvdW5kO1xuICAgIH1cbiAgfX07XG4gIGNvbG9yOiAke3Byb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgY2FzZSAnZHJhZnQnOlxuICAgICAgICByZXR1cm4gY29sb3JzLnN0YXR1c0RyYWZ0VGV4dDtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcmV2aWV3JzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNSZXZpZXdUZXh0O1xuICAgICAgY2FzZSAncGVuZGluZ19wdWJsaXNoJzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNSZWFkeVRleHQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY29sb3JzLnRleHQ7XG4gICAgfVxuICB9fTtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgd29ya2Zsb3dTdGF0dXMsXG4gIGdldEFzc2V0LFxuICB0LFxufSkge1xuICBmdW5jdGlvbiBnZXRTdGF0dXNMYWJlbChzdGF0dXMpIHtcbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSAncGVuZGluZ19yZXZpZXcnOlxuICAgICAgICByZXR1cm4gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKTtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICAgIHJldHVybiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpO1xuICAgICAgY2FzZSAnZHJhZnQnOlxuICAgICAgICByZXR1cm4gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9MSVNUKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxMaXN0Q2FyZD5cbiAgICAgICAgPExpc3RDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAge2NvbGxlY3Rpb25MYWJlbCA/IDxDb2xsZWN0aW9uTGFiZWw+e2NvbGxlY3Rpb25MYWJlbH08L0NvbGxlY3Rpb25MYWJlbD4gOiBudWxsfVxuICAgICAgICAgIDxMaXN0Q2FyZFRpdGxlPlxuICAgICAgICAgICAge3N1bW1hcnl9XG4gICAgICAgICAgICA8VGl0bGVJY29ucz5cbiAgICAgICAgICAgICAge3dvcmtmbG93U3RhdHVzICYmIChcbiAgICAgICAgICAgICAgICA8V29ya2Zsb3dCYWRnZSBzdGF0dXM9e3dvcmtmbG93U3RhdHVzfT5cbiAgICAgICAgICAgICAgICAgIHtnZXRTdGF0dXNMYWJlbCh3b3JrZmxvd1N0YXR1cyl9XG4gICAgICAgICAgICAgICAgPC9Xb3JrZmxvd0JhZGdlPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UaXRsZUljb25zPlxuICAgICAgICAgIDwvTGlzdENhcmRUaXRsZT5cbiAgICAgICAgPC9MaXN0Q2FyZExpbms+XG4gICAgICA8L0xpc3RDYXJkPlxuICAgICk7XG4gIH1cblxuICBpZiAodmlld1N0eWxlID09PSBWSUVXX1NUWUxFX0dSSUQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEdyaWRDYXJkPlxuICAgICAgICA8R3JpZENhcmRMaW5rIHRvPXtwYXRofT5cbiAgICAgICAgICA8Q2FyZEJvZHkgaGFzSW1hZ2U9e2ltYWdlfT5cbiAgICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICAgIDxDYXJkSGVhZGluZz5cbiAgICAgICAgICAgICAge3N1bW1hcnl9XG4gICAgICAgICAgICAgIDxUaXRsZUljb25zPlxuICAgICAgICAgICAgICAgIHt3b3JrZmxvd1N0YXR1cyAmJiAoXG4gICAgICAgICAgICAgICAgICA8V29ya2Zsb3dCYWRnZSBzdGF0dXM9e3dvcmtmbG93U3RhdHVzfT5cbiAgICAgICAgICAgICAgICAgICAge2dldFN0YXR1c0xhYmVsKHdvcmtmbG93U3RhdHVzKX1cbiAgICAgICAgICAgICAgICAgIDwvV29ya2Zsb3dCYWRnZT5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L1RpdGxlSWNvbnM+XG4gICAgICAgICAgICA8L0NhcmRIZWFkaW5nPlxuICAgICAgICAgIDwvQ2FyZEJvZHk+XG4gICAgICAgICAge2ltYWdlID8gPENhcmRJbWFnZSBzcmM9e2dldEFzc2V0KGltYWdlLCBpbWFnZUZpZWxkKS50b1N0cmluZygpfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBlbnRyeSwgaW5mZXJyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVycmVkRmllbGRzLmltYWdlRmllbGQpO1xuICBpZiAoaW1hZ2UpIHtcbiAgICBpbWFnZSA9IGVuY29kZVVSSShpbWFnZSk7XG4gIH1cblxuICBjb25zdCBpc0xvYWRpbmdBc3NldCA9IHNlbGVjdElzTG9hZGluZ0Fzc2V0KHN0YXRlLm1lZGlhcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgICBpbWFnZUZvbGRlcjogY29sbGVjdGlvblxuICAgICAgLmdldCgnZmllbGRzJylcbiAgICAgID8uZmluZChmID0+IGYuZ2V0KCduYW1lJykgPT09IGluZmVycmVkRmllbGRzLmltYWdlRmllbGQgJiYgZi5nZXQoJ3dpZGdldCcpID09PSAnaW1hZ2UnKSxcbiAgICBpc0xvYWRpbmdBc3NldCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiBib3VuZEdldEFzc2V0KGRpc3BhdGNoLCBjb2xsZWN0aW9uLCBlbnRyeSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZVByb3BzLFxuICAgIC4uLmRpc3BhdGNoUHJvcHMsXG4gICAgLi4ub3duUHJvcHMsXG4gICAgZ2V0QXNzZXQ6IGRpc3BhdGNoUHJvcHMuYm91bmRHZXRBc3NldChvd25Qcm9wcy5jb2xsZWN0aW9uLCBvd25Qcm9wcy5lbnRyeSksXG4gIH07XG59XG5cbmNvbnN0IENvbm5lY3RlZEVudHJ5Q2FyZCA9IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuICBtZXJnZVByb3BzLFxuKSh0cmFuc2xhdGUoKShFbnRyeUNhcmQpKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));
const GridCard = /*#__PURE__*/_styled("li", {
  target: "effeus48",
  label: "GridCard"
})(components.card, ";flex:0 0 335px;height:240px;overflow:hidden;margin-left:12px;margin-bottom:16px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const GridCardLink = /*#__PURE__*/_styled(Link, {
  target: "effeus47",
  label: "GridCardLink"
})("display:block;height:100%;outline-offset:-2px;&,&:hover{background-color:", colors.foreground, ";color:", colors.text, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const CollectionLabel = /*#__PURE__*/_styled("h2", {
  target: "effeus46",
  label: "CollectionLabel"
})("font-size:12px;color:", colors.textLead, ";text-transform:uppercase;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ListCardTitle = /*#__PURE__*/_styled("h2", {
  target: "effeus45",
  label: "ListCardTitle"
})(process.env.NODE_ENV === "production" ? {
  name: "rmz9aj",
  styles: "margin-bottom:0;display:flex;justify-content:space-between"
} : {
  name: "rmz9aj",
  styles: "margin-bottom:0;display:flex;justify-content:space-between/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUQrQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuXG5pbXBvcnQgeyBib3VuZEdldEFzc2V0IH0gZnJvbSAnLi4vLi4vLi4vYWN0aW9ucy9tZWRpYSc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc2VsZWN0SXNMb2FkaW5nQXNzZXQgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9tZWRpYXMnO1xuaW1wb3J0IHsgc2VsZWN0RW50cnlDb2xsZWN0aW9uVGl0bGUgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9jb2xsZWN0aW9ucyc7XG5cbmNvbnN0IExpc3RDYXJkID0gc3R5bGVkLmxpYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIHdpZHRoOiAke2xlbmd0aHMudG9wQ2FyZFdpZHRofTtcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5gO1xuXG5jb25zdCBMaXN0Q2FyZExpbmsgPSBzdHlsZWQoTGluaylgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDE2cHggMjBweDtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogMTAwJTtcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XG5cbiAgJixcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5gO1xuXG5jb25zdCBDb2xsZWN0aW9uTGFiZWwgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5cbmNvbnN0IExpc3RDYXJkVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbi1ib3R0b206IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMHB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogJHt6SW5kZXguekluZGV4MX07XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IC0yMCU7XG4gICAgaGVpZ2h0OiAxNDAlO1xuICAgIHdpZHRoOiAxNDAlO1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTE1cHggMjRweCAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIH1cbmA7XG5cbmNvbnN0IENhcmRJbWFnZSA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke3Byb3BzID0+IHByb3BzLnNyY30pO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBoZWlnaHQ6IDE1MHB4O1xuYDtcblxuY29uc3QgVGl0bGVJY29ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuYDtcblxuY29uc3QgV29ya2Zsb3dCYWRnZSA9IHN0eWxlZC5zcGFuYFxuICBwYWRkaW5nOiAycHggNnB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5zdGF0dXMpIHtcbiAgICAgIGNhc2UgJ2RyYWZ0JzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNEcmFmdEJhY2tncm91bmQ7XG4gICAgICBjYXNlICdwZW5kaW5nX3Jldmlldyc6XG4gICAgICAgIHJldHVybiBjb2xvcnMuc3RhdHVzUmV2aWV3QmFja2dyb3VuZDtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICAgIHJldHVybiBjb2xvcnMuc3RhdHVzUmVhZHlCYWNrZ3JvdW5kO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5iYWNrZ3JvdW5kO1xuICAgIH1cbiAgfX07XG4gIGNvbG9yOiAke3Byb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgY2FzZSAnZHJhZnQnOlxuICAgICAgICByZXR1cm4gY29sb3JzLnN0YXR1c0RyYWZ0VGV4dDtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcmV2aWV3JzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNSZXZpZXdUZXh0O1xuICAgICAgY2FzZSAncGVuZGluZ19wdWJsaXNoJzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNSZWFkeVRleHQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY29sb3JzLnRleHQ7XG4gICAgfVxuICB9fTtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgd29ya2Zsb3dTdGF0dXMsXG4gIGdldEFzc2V0LFxuICB0LFxufSkge1xuICBmdW5jdGlvbiBnZXRTdGF0dXNMYWJlbChzdGF0dXMpIHtcbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSAncGVuZGluZ19yZXZpZXcnOlxuICAgICAgICByZXR1cm4gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKTtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICAgIHJldHVybiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpO1xuICAgICAgY2FzZSAnZHJhZnQnOlxuICAgICAgICByZXR1cm4gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9MSVNUKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxMaXN0Q2FyZD5cbiAgICAgICAgPExpc3RDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAge2NvbGxlY3Rpb25MYWJlbCA/IDxDb2xsZWN0aW9uTGFiZWw+e2NvbGxlY3Rpb25MYWJlbH08L0NvbGxlY3Rpb25MYWJlbD4gOiBudWxsfVxuICAgICAgICAgIDxMaXN0Q2FyZFRpdGxlPlxuICAgICAgICAgICAge3N1bW1hcnl9XG4gICAgICAgICAgICA8VGl0bGVJY29ucz5cbiAgICAgICAgICAgICAge3dvcmtmbG93U3RhdHVzICYmIChcbiAgICAgICAgICAgICAgICA8V29ya2Zsb3dCYWRnZSBzdGF0dXM9e3dvcmtmbG93U3RhdHVzfT5cbiAgICAgICAgICAgICAgICAgIHtnZXRTdGF0dXNMYWJlbCh3b3JrZmxvd1N0YXR1cyl9XG4gICAgICAgICAgICAgICAgPC9Xb3JrZmxvd0JhZGdlPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UaXRsZUljb25zPlxuICAgICAgICAgIDwvTGlzdENhcmRUaXRsZT5cbiAgICAgICAgPC9MaXN0Q2FyZExpbms+XG4gICAgICA8L0xpc3RDYXJkPlxuICAgICk7XG4gIH1cblxuICBpZiAodmlld1N0eWxlID09PSBWSUVXX1NUWUxFX0dSSUQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEdyaWRDYXJkPlxuICAgICAgICA8R3JpZENhcmRMaW5rIHRvPXtwYXRofT5cbiAgICAgICAgICA8Q2FyZEJvZHkgaGFzSW1hZ2U9e2ltYWdlfT5cbiAgICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICAgIDxDYXJkSGVhZGluZz5cbiAgICAgICAgICAgICAge3N1bW1hcnl9XG4gICAgICAgICAgICAgIDxUaXRsZUljb25zPlxuICAgICAgICAgICAgICAgIHt3b3JrZmxvd1N0YXR1cyAmJiAoXG4gICAgICAgICAgICAgICAgICA8V29ya2Zsb3dCYWRnZSBzdGF0dXM9e3dvcmtmbG93U3RhdHVzfT5cbiAgICAgICAgICAgICAgICAgICAge2dldFN0YXR1c0xhYmVsKHdvcmtmbG93U3RhdHVzKX1cbiAgICAgICAgICAgICAgICAgIDwvV29ya2Zsb3dCYWRnZT5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L1RpdGxlSWNvbnM+XG4gICAgICAgICAgICA8L0NhcmRIZWFkaW5nPlxuICAgICAgICAgIDwvQ2FyZEJvZHk+XG4gICAgICAgICAge2ltYWdlID8gPENhcmRJbWFnZSBzcmM9e2dldEFzc2V0KGltYWdlLCBpbWFnZUZpZWxkKS50b1N0cmluZygpfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBlbnRyeSwgaW5mZXJyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVycmVkRmllbGRzLmltYWdlRmllbGQpO1xuICBpZiAoaW1hZ2UpIHtcbiAgICBpbWFnZSA9IGVuY29kZVVSSShpbWFnZSk7XG4gIH1cblxuICBjb25zdCBpc0xvYWRpbmdBc3NldCA9IHNlbGVjdElzTG9hZGluZ0Fzc2V0KHN0YXRlLm1lZGlhcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgICBpbWFnZUZvbGRlcjogY29sbGVjdGlvblxuICAgICAgLmdldCgnZmllbGRzJylcbiAgICAgID8uZmluZChmID0+IGYuZ2V0KCduYW1lJykgPT09IGluZmVycmVkRmllbGRzLmltYWdlRmllbGQgJiYgZi5nZXQoJ3dpZGdldCcpID09PSAnaW1hZ2UnKSxcbiAgICBpc0xvYWRpbmdBc3NldCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiBib3VuZEdldEFzc2V0KGRpc3BhdGNoLCBjb2xsZWN0aW9uLCBlbnRyeSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZVByb3BzLFxuICAgIC4uLmRpc3BhdGNoUHJvcHMsXG4gICAgLi4ub3duUHJvcHMsXG4gICAgZ2V0QXNzZXQ6IGRpc3BhdGNoUHJvcHMuYm91bmRHZXRBc3NldChvd25Qcm9wcy5jb2xsZWN0aW9uLCBvd25Qcm9wcy5lbnRyeSksXG4gIH07XG59XG5cbmNvbnN0IENvbm5lY3RlZEVudHJ5Q2FyZCA9IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuICBtZXJnZVByb3BzLFxuKSh0cmFuc2xhdGUoKShFbnRyeUNhcmQpKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardHeading = /*#__PURE__*/_styled("h2", {
  target: "effeus44",
  label: "CardHeading"
})(process.env.NODE_ENV === "production" ? {
  name: "1969ag7",
  styles: "margin:0 0 2px;display:flex;justify-content:space-between"
} : {
  name: "1969ag7",
  styles: "margin:0 0 2px;display:flex;justify-content:space-between/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const CardBody = /*#__PURE__*/_styled("div", {
  target: "effeus43",
  label: "CardBody"
})("padding:16px 20px;height:90px;position:relative;margin-bottom:", props => props.hasImage && 0, ";&:after{content:'';position:absolute;display:block;z-index:", zIndex.zIndex1, ";bottom:0;left:-20%;height:140%;width:140%;box-shadow:inset 0 -15px 24px ", colorsRaw.white, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0NvbGxlY3Rpb24vRW50cmllcy9FbnRyeUNhcmQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUUyQiIsImZpbGUiOiIuLi8uLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9Db2xsZWN0aW9uL0VudHJpZXMvRW50cnlDYXJkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCc7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgbGVuZ3RocywgekluZGV4IH0gZnJvbSAnZGVjYXAtY21zLXVpLWRlZmF1bHQnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuXG5pbXBvcnQgeyBib3VuZEdldEFzc2V0IH0gZnJvbSAnLi4vLi4vLi4vYWN0aW9ucy9tZWRpYSc7XG5pbXBvcnQgeyBWSUVXX1NUWUxFX0xJU1QsIFZJRVdfU1RZTEVfR1JJRCB9IGZyb20gJy4uLy4uLy4uL2NvbnN0YW50cy9jb2xsZWN0aW9uVmlld3MnO1xuaW1wb3J0IHsgc2VsZWN0SXNMb2FkaW5nQXNzZXQgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9tZWRpYXMnO1xuaW1wb3J0IHsgc2VsZWN0RW50cnlDb2xsZWN0aW9uVGl0bGUgfSBmcm9tICcuLi8uLi8uLi9yZWR1Y2Vycy9jb2xsZWN0aW9ucyc7XG5cbmNvbnN0IExpc3RDYXJkID0gc3R5bGVkLmxpYFxuICAke2NvbXBvbmVudHMuY2FyZH07XG4gIHdpZHRoOiAke2xlbmd0aHMudG9wQ2FyZFdpZHRofTtcbiAgbWFyZ2luLWxlZnQ6IDEycHg7XG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG5gO1xuXG5jb25zdCBMaXN0Q2FyZExpbmsgPSBzdHlsZWQoTGluaylgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIHBhZGRpbmc6IDE2cHggMjBweDtcblxuICAmOmhvdmVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5mb3JlZ3JvdW5kfTtcbiAgfVxuYDtcblxuY29uc3QgR3JpZENhcmQgPSBzdHlsZWQubGlgXG4gICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgZmxleDogMCAwIDMzNXB4O1xuICBoZWlnaHQ6IDI0MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBtYXJnaW4tbGVmdDogMTJweDtcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcbmA7XG5cbmNvbnN0IEdyaWRDYXJkTGluayA9IHN0eWxlZChMaW5rKWBcbiAgZGlzcGxheTogYmxvY2s7XG4gIGhlaWdodDogMTAwJTtcbiAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7XG5cbiAgJixcbiAgJjpob3ZlciB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuZm9yZWdyb3VuZH07XG4gICAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB9XG5gO1xuXG5jb25zdCBDb2xsZWN0aW9uTGFiZWwgPSBzdHlsZWQuaDJgXG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHRMZWFkfTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG5cbmNvbnN0IExpc3RDYXJkVGl0bGUgPSBzdHlsZWQuaDJgXG4gIG1hcmdpbi1ib3R0b206IDA7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IENhcmRIZWFkaW5nID0gc3R5bGVkLmgyYFxuICBtYXJnaW46IDAgMCAycHg7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbmA7XG5cbmNvbnN0IENhcmRCb2R5ID0gc3R5bGVkLmRpdmBcbiAgcGFkZGluZzogMTZweCAyMHB4O1xuICBoZWlnaHQ6IDkwcHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbWFyZ2luLWJvdHRvbTogJHtwcm9wcyA9PiBwcm9wcy5oYXNJbWFnZSAmJiAwfTtcblxuICAmOmFmdGVyIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogJHt6SW5kZXguekluZGV4MX07XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IC0yMCU7XG4gICAgaGVpZ2h0OiAxNDAlO1xuICAgIHdpZHRoOiAxNDAlO1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgLTE1cHggMjRweCAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIH1cbmA7XG5cbmNvbnN0IENhcmRJbWFnZSA9IHN0eWxlZC5kaXZgXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgke3Byb3BzID0+IHByb3BzLnNyY30pO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgY2VudGVyO1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvdmVyO1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBoZWlnaHQ6IDE1MHB4O1xuYDtcblxuY29uc3QgVGl0bGVJY29ucyA9IHN0eWxlZC5kaXZgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogOHB4O1xuYDtcblxuY29uc3QgV29ya2Zsb3dCYWRnZSA9IHN0eWxlZC5zcGFuYFxuICBwYWRkaW5nOiAycHggNnB4O1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIGZvbnQtc2l6ZTogMTFweDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgYmFja2dyb3VuZC1jb2xvcjogJHtwcm9wcyA9PiB7XG4gICAgc3dpdGNoIChwcm9wcy5zdGF0dXMpIHtcbiAgICAgIGNhc2UgJ2RyYWZ0JzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNEcmFmdEJhY2tncm91bmQ7XG4gICAgICBjYXNlICdwZW5kaW5nX3Jldmlldyc6XG4gICAgICAgIHJldHVybiBjb2xvcnMuc3RhdHVzUmV2aWV3QmFja2dyb3VuZDtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICAgIHJldHVybiBjb2xvcnMuc3RhdHVzUmVhZHlCYWNrZ3JvdW5kO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5iYWNrZ3JvdW5kO1xuICAgIH1cbiAgfX07XG4gIGNvbG9yOiAke3Byb3BzID0+IHtcbiAgICBzd2l0Y2ggKHByb3BzLnN0YXR1cykge1xuICAgICAgY2FzZSAnZHJhZnQnOlxuICAgICAgICByZXR1cm4gY29sb3JzLnN0YXR1c0RyYWZ0VGV4dDtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcmV2aWV3JzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNSZXZpZXdUZXh0O1xuICAgICAgY2FzZSAncGVuZGluZ19wdWJsaXNoJzpcbiAgICAgICAgcmV0dXJuIGNvbG9ycy5zdGF0dXNSZWFkeVRleHQ7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gY29sb3JzLnRleHQ7XG4gICAgfVxuICB9fTtcbmA7XG5cbmZ1bmN0aW9uIEVudHJ5Q2FyZCh7XG4gIHBhdGgsXG4gIHN1bW1hcnksXG4gIGltYWdlLFxuICBpbWFnZUZpZWxkLFxuICBjb2xsZWN0aW9uTGFiZWwsXG4gIHZpZXdTdHlsZSA9IFZJRVdfU1RZTEVfTElTVCxcbiAgd29ya2Zsb3dTdGF0dXMsXG4gIGdldEFzc2V0LFxuICB0LFxufSkge1xuICBmdW5jdGlvbiBnZXRTdGF0dXNMYWJlbChzdGF0dXMpIHtcbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSAncGVuZGluZ19yZXZpZXcnOlxuICAgICAgICByZXR1cm4gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuaW5SZXZpZXcnKTtcbiAgICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICAgIHJldHVybiB0KCdlZGl0b3IuZWRpdG9yVG9vbGJhci5yZWFkeScpO1xuICAgICAgY2FzZSAnZHJhZnQnOlxuICAgICAgICByZXR1cm4gdCgnZWRpdG9yLmVkaXRvclRvb2xiYXIuZHJhZnQnKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBzdGF0dXM7XG4gICAgfVxuICB9XG5cbiAgaWYgKHZpZXdTdHlsZSA9PT0gVklFV19TVFlMRV9MSVNUKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxMaXN0Q2FyZD5cbiAgICAgICAgPExpc3RDYXJkTGluayB0bz17cGF0aH0+XG4gICAgICAgICAge2NvbGxlY3Rpb25MYWJlbCA/IDxDb2xsZWN0aW9uTGFiZWw+e2NvbGxlY3Rpb25MYWJlbH08L0NvbGxlY3Rpb25MYWJlbD4gOiBudWxsfVxuICAgICAgICAgIDxMaXN0Q2FyZFRpdGxlPlxuICAgICAgICAgICAge3N1bW1hcnl9XG4gICAgICAgICAgICA8VGl0bGVJY29ucz5cbiAgICAgICAgICAgICAge3dvcmtmbG93U3RhdHVzICYmIChcbiAgICAgICAgICAgICAgICA8V29ya2Zsb3dCYWRnZSBzdGF0dXM9e3dvcmtmbG93U3RhdHVzfT5cbiAgICAgICAgICAgICAgICAgIHtnZXRTdGF0dXNMYWJlbCh3b3JrZmxvd1N0YXR1cyl9XG4gICAgICAgICAgICAgICAgPC9Xb3JrZmxvd0JhZGdlPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UaXRsZUljb25zPlxuICAgICAgICAgIDwvTGlzdENhcmRUaXRsZT5cbiAgICAgICAgPC9MaXN0Q2FyZExpbms+XG4gICAgICA8L0xpc3RDYXJkPlxuICAgICk7XG4gIH1cblxuICBpZiAodmlld1N0eWxlID09PSBWSUVXX1NUWUxFX0dSSUQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPEdyaWRDYXJkPlxuICAgICAgICA8R3JpZENhcmRMaW5rIHRvPXtwYXRofT5cbiAgICAgICAgICA8Q2FyZEJvZHkgaGFzSW1hZ2U9e2ltYWdlfT5cbiAgICAgICAgICAgIHtjb2xsZWN0aW9uTGFiZWwgPyA8Q29sbGVjdGlvbkxhYmVsPntjb2xsZWN0aW9uTGFiZWx9PC9Db2xsZWN0aW9uTGFiZWw+IDogbnVsbH1cbiAgICAgICAgICAgIDxDYXJkSGVhZGluZz5cbiAgICAgICAgICAgICAge3N1bW1hcnl9XG4gICAgICAgICAgICAgIDxUaXRsZUljb25zPlxuICAgICAgICAgICAgICAgIHt3b3JrZmxvd1N0YXR1cyAmJiAoXG4gICAgICAgICAgICAgICAgICA8V29ya2Zsb3dCYWRnZSBzdGF0dXM9e3dvcmtmbG93U3RhdHVzfT5cbiAgICAgICAgICAgICAgICAgICAge2dldFN0YXR1c0xhYmVsKHdvcmtmbG93U3RhdHVzKX1cbiAgICAgICAgICAgICAgICAgIDwvV29ya2Zsb3dCYWRnZT5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L1RpdGxlSWNvbnM+XG4gICAgICAgICAgICA8L0NhcmRIZWFkaW5nPlxuICAgICAgICAgIDwvQ2FyZEJvZHk+XG4gICAgICAgICAge2ltYWdlID8gPENhcmRJbWFnZSBzcmM9e2dldEFzc2V0KGltYWdlLCBpbWFnZUZpZWxkKS50b1N0cmluZygpfSAvPiA6IG51bGx9XG4gICAgICAgIDwvR3JpZENhcmRMaW5rPlxuICAgICAgPC9HcmlkQ2FyZD5cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpIHtcbiAgY29uc3QgeyBlbnRyeSwgaW5mZXJyZWRGaWVsZHMsIGNvbGxlY3Rpb24gfSA9IG93blByb3BzO1xuICBjb25zdCBlbnRyeURhdGEgPSBlbnRyeS5nZXQoJ2RhdGEnKTtcbiAgY29uc3Qgc3VtbWFyeSA9IHNlbGVjdEVudHJ5Q29sbGVjdGlvblRpdGxlKGNvbGxlY3Rpb24sIGVudHJ5KTtcblxuICBsZXQgaW1hZ2UgPSBlbnRyeURhdGEuZ2V0KGluZmVycmVkRmllbGRzLmltYWdlRmllbGQpO1xuICBpZiAoaW1hZ2UpIHtcbiAgICBpbWFnZSA9IGVuY29kZVVSSShpbWFnZSk7XG4gIH1cblxuICBjb25zdCBpc0xvYWRpbmdBc3NldCA9IHNlbGVjdElzTG9hZGluZ0Fzc2V0KHN0YXRlLm1lZGlhcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBzdW1tYXJ5LFxuICAgIHBhdGg6IGAvY29sbGVjdGlvbnMvJHtjb2xsZWN0aW9uLmdldCgnbmFtZScpfS9lbnRyaWVzLyR7ZW50cnkuZ2V0KCdzbHVnJyl9YCxcbiAgICBpbWFnZSxcbiAgICBpbWFnZUZvbGRlcjogY29sbGVjdGlvblxuICAgICAgLmdldCgnZmllbGRzJylcbiAgICAgID8uZmluZChmID0+IGYuZ2V0KCduYW1lJykgPT09IGluZmVycmVkRmllbGRzLmltYWdlRmllbGQgJiYgZi5nZXQoJ3dpZGdldCcpID09PSAnaW1hZ2UnKSxcbiAgICBpc0xvYWRpbmdBc3NldCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoKSB7XG4gIHJldHVybiB7XG4gICAgYm91bmRHZXRBc3NldDogKGNvbGxlY3Rpb24sIGVudHJ5KSA9PiBib3VuZEdldEFzc2V0KGRpc3BhdGNoLCBjb2xsZWN0aW9uLCBlbnRyeSksXG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZVByb3BzLFxuICAgIC4uLmRpc3BhdGNoUHJvcHMsXG4gICAgLi4ub3duUHJvcHMsXG4gICAgZ2V0QXNzZXQ6IGRpc3BhdGNoUHJvcHMuYm91bmRHZXRBc3NldChvd25Qcm9wcy5jb2xsZWN0aW9uLCBvd25Qcm9wcy5lbnRyeSksXG4gIH07XG59XG5cbmNvbnN0IENvbm5lY3RlZEVudHJ5Q2FyZCA9IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzLFxuICBtZXJnZVByb3BzLFxuKSh0cmFuc2xhdGUoKShFbnRyeUNhcmQpKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkRW50cnlDYXJkO1xuIl19 */"));
const CardImage = /*#__PURE__*/_styled("div", {
  target: "effeus42",
  label: "CardImage"
})("background-image:url(", props => props.src, ");background-position:center center;background-size:cover;background-repeat:no-repeat;height:150px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const TitleIcons = /*#__PURE__*/_styled("div", {
  target: "effeus41",
  label: "TitleIcons"
})(process.env.NODE_ENV === "production" ? {
  name: "1yydxi7",
  styles: "display:flex;align-items:center;gap:8px"
} : {
  name: "1yydxi7",
  styles: "display:flex;align-items:center;gap:8px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const WorkflowBadge = /*#__PURE__*/_styled("span", {
  target: "effeus40",
  label: "WorkflowBadge"
})("padding:2px 6px;border-radius:3px;font-size:11px;text-transform:uppercase;background-color:", props => {
  switch (props.status) {
    case 'draft':
      return colors.statusDraftBackground;
    case 'pending_review':
      return colors.statusReviewBackground;
    case 'pending_publish':
      return colors.statusReadyBackground;
    default:
      return colors.background;
  }
}, ";color:", props => {
  switch (props.status) {
    case 'draft':
      return colors.statusDraftText;
    case 'pending_review':
      return colors.statusReviewText;
    case 'pending_publish':
      return colors.statusReadyText;
    default:
      return colors.text;
  }
}, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function EntryCard({
  path,
  summary,
  image,
  imageField,
  collectionLabel,
  viewStyle = VIEW_STYLE_LIST,
  workflowStatus,
  getAsset,
  t
}) {
  function getStatusLabel(status) {
    switch (status) {
      case 'pending_review':
        return t('editor.editorToolbar.inReview');
      case 'pending_publish':
        return t('editor.editorToolbar.ready');
      case 'draft':
        return t('editor.editorToolbar.draft');
      default:
        return status;
    }
  }
  if (viewStyle === VIEW_STYLE_LIST) {
    return ___EmotionJSX(ListCard, null, ___EmotionJSX(ListCardLink, {
      to: path
    }, collectionLabel ? ___EmotionJSX(CollectionLabel, null, collectionLabel) : null, ___EmotionJSX(ListCardTitle, null, summary, ___EmotionJSX(TitleIcons, null, workflowStatus && ___EmotionJSX(WorkflowBadge, {
      status: workflowStatus
    }, getStatusLabel(workflowStatus))))));
  }
  if (viewStyle === VIEW_STYLE_GRID) {
    return ___EmotionJSX(GridCard, null, ___EmotionJSX(GridCardLink, {
      to: path
    }, ___EmotionJSX(CardBody, {
      hasImage: image
    }, collectionLabel ? ___EmotionJSX(CollectionLabel, null, collectionLabel) : null, ___EmotionJSX(CardHeading, null, summary, ___EmotionJSX(TitleIcons, null, workflowStatus && ___EmotionJSX(WorkflowBadge, {
      status: workflowStatus
    }, getStatusLabel(workflowStatus))))), image ? ___EmotionJSX(CardImage, {
      src: getAsset(image, imageField).toString()
    }) : null));
  }
}
function mapStateToProps(state, ownProps) {
  const {
    entry,
    inferredFields,
    collection
  } = ownProps;
  const entryData = entry.get('data');
  const summary = selectEntryCollectionTitle(collection, entry);
  let image = entryData.get(inferredFields.imageField);
  if (image) {
    image = encodeURI(image);
  }
  const isLoadingAsset = selectIsLoadingAsset(state.medias);
  return {
    summary,
    path: `/collections/${collection.get('name')}/entries/${entry.get('slug')}`,
    image,
    imageFolder: collection.get('fields')?.find(f => f.get('name') === inferredFields.imageField && f.get('widget') === 'image'),
    isLoadingAsset
  };
}
function mapDispatchToProps(dispatch) {
  return {
    boundGetAsset: (collection, entry) => boundGetAsset(dispatch, collection, entry)
  };
}
function mergeProps(stateProps, dispatchProps, ownProps) {
  return {
    ...stateProps,
    ...dispatchProps,
    ...ownProps,
    getAsset: dispatchProps.boundGetAsset(ownProps.collection, ownProps.entry)
  };
}
const ConnectedEntryCard = connect(mapStateToProps, mapDispatchToProps, mergeProps)(translate()(EntryCard));
export default ConnectedEntryCard;