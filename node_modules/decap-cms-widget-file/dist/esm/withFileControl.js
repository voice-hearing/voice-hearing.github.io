import _styled from "@emotion/styled/base";
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
import React from 'react';
import PropTypes from 'prop-types';
import ImmutablePropTypes from 'react-immutable-proptypes';
import { css } from '@emotion/react';
import { Map, List } from 'immutable';
import once from 'lodash/once';
import { v4 as uuid } from 'uuid';
import { oneLine } from 'common-tags';
import { lengths, components, buttons, borders, effects, shadows, IconButton } from 'decap-cms-ui-default';
import { basename } from 'decap-cms-lib-util';
import { arrayMoveImmutable as arrayMove } from 'array-move';
import { DndContext, MouseSensor, TouchSensor, closestCenter, useSensor, useSensors } from '@dnd-kit/core';
import { SortableContext, useSortable } from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { restrictToParentElement } from '@dnd-kit/modifiers';
import { jsx as ___EmotionJSX } from "@emotion/react";
const MAX_DISPLAY_LENGTH = 50;
const ImageWrapper = /*#__PURE__*/_styled("div", {
  target: "e1hax4ql7",
  label: "ImageWrapper"
})("flex-basis:155px;width:155px;height:100px;margin-right:20px;margin-bottom:20px;border:", borders.textField, ";border-radius:", lengths.borderRadius, ";overflow:hidden;", effects.checkerboard, ";", shadows.inset, ";cursor:", props => props.sortable ? 'pointer' : 'auto', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const SortableImageButtonsWrapper = /*#__PURE__*/_styled("div", {
  target: "e1hax4ql6",
  label: "SortableImageButtonsWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "1ekgmip",
  styles: "display:flex;justify-content:center;column-gap:10px;margin-right:20px;margin-top:-10px;margin-bottom:10px"
} : {
  name: "1ekgmip",
  styles: "display:flex;justify-content:center;column-gap:10px;margin-right:20px;margin-top:-10px;margin-bottom:10px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const StyledImage = /*#__PURE__*/_styled("img", {
  target: "e1hax4ql5",
  label: "StyledImage"
})(process.env.NODE_ENV === "production" ? {
  name: "ukfjzf",
  styles: "width:100%;height:100%;object-fit:contain"
} : {
  name: "ukfjzf",
  styles: "width:100%;height:100%;object-fit:contain/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
function Image(props) {
  return ___EmotionJSX(StyledImage, _extends({
    role: "presentation"
  }, props));
}
function SortableImageButtons({
  onRemove,
  onReplace
}) {
  return ___EmotionJSX(SortableImageButtonsWrapper, null, ___EmotionJSX(IconButton, {
    size: "small",
    type: "media",
    onClick: onReplace
  }), ___EmotionJSX(IconButton, {
    size: "small",
    type: "close",
    onClick: onRemove
  }));
}
function SortableImage(props) {
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition
  } = useSortable({
    id: props.id
  });
  const style = {
    transform: CSS.Transform.toString(transform),
    transition
  };
  const {
    itemValue,
    getAsset,
    field,
    onRemove,
    onReplace
  } = props;
  return ___EmotionJSX("div", _extends({
    ref: setNodeRef,
    style: style
  }, attributes, listeners), ___EmotionJSX(ImageWrapper, {
    sortable: true
  }, ___EmotionJSX(Image, {
    src: getAsset(itemValue, field) || ''
  })), ___EmotionJSX(SortableImageButtons, {
    item: itemValue,
    onRemove: onRemove,
    onReplace: onReplace
  }));
}
var _ref = process.env.NODE_ENV === "production" ? {
  name: "a42x49-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;label:SortableMultiImageWrapper;"
} : {
  name: "a42x49-SortableMultiImageWrapper",
  styles: "display:flex;flex-wrap:wrap;label:SortableMultiImageWrapper;/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
function SortableMultiImageWrapper({
  items,
  getAsset,
  field,
  onSortEnd,
  onRemoveOne,
  onReplaceOne
}) {
  const activationConstraint = {
    distance: 4
  };
  const sensors = useSensors(useSensor(MouseSensor, {
    activationConstraint
  }), useSensor(TouchSensor, {
    activationConstraint
  }));
  function handleSortEnd({
    active,
    over
  }) {
    onSortEnd({
      oldIndex: items.findIndex(item => item.id === active.id),
      newIndex: items.findIndex(item => item.id === over.id)
    });
  }
  return ___EmotionJSX("div", {
    // eslint-disable-next-line react/no-unknown-property
    css: _ref
  }, ___EmotionJSX(DndContext, {
    modifiers: [restrictToParentElement],
    collisionDetection: closestCenter,
    sensors: sensors,
    onDragEnd: handleSortEnd
  }, ___EmotionJSX(SortableContext, {
    items: items
  }, items.map((item, index) => ___EmotionJSX(SortableImage, {
    key: item.id,
    id: item.id,
    index: index,
    itemValue: item.value,
    getAsset: getAsset,
    field: field,
    onRemove: onRemoveOne(index),
    onReplace: onReplaceOne(index)
  })))));
}
const FileLink = /*#__PURE__*/_styled("a", {
  target: "e1hax4ql4",
  label: "FileLink"
})(process.env.NODE_ENV === "production" ? {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}"
} : {
  name: "7mbjrw",
  styles: "margin-bottom:20px;font-weight:normal;color:inherit;&:hover,&:active,&:focus{text-decoration:underline;}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinks = /*#__PURE__*/_styled("div", {
  target: "e1hax4ql3",
  label: "FileLinks"
})(process.env.NODE_ENV === "production" ? {
  name: "cn3xcj",
  styles: "margin-bottom:12px"
} : {
  name: "cn3xcj",
  styles: "margin-bottom:12px/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileLinkList = /*#__PURE__*/_styled("ul", {
  target: "e1hax4ql2",
  label: "FileLinkList"
})(process.env.NODE_ENV === "production" ? {
  name: "ffhm6p",
  styles: "list-style-type:none"
} : {
  name: "ffhm6p",
  styles: "list-style-type:none/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const FileWidgetButton = /*#__PURE__*/_styled("button", {
  target: "e1hax4ql1",
  label: "FileWidgetButton"
})(buttons.button, ";", components.badge, ";margin-bottom:12px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const FileWidgetButtonRemove = /*#__PURE__*/_styled("button", {
  target: "e1hax4ql0",
  label: "FileWidgetButtonRemove"
})(buttons.button, ";", components.badgeDanger, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
function isMultiple(value) {
  return Array.isArray(value) || List.isList(value);
}
function sizeOfValue(value) {
  if (Array.isArray(value)) {
    return value.length;
  }
  if (List.isList(value)) {
    return value.size;
  }
  return value ? 1 : 0;
}
function valueListToArray(value) {
  return List.isList(value) ? value.toArray() : value ?? '';
}
function valueListToSortableArray(value) {
  if (!isMultiple(value)) {
    return value;
  }
  const valueArray = valueListToArray(value).map(value => ({
    id: uuid(),
    value
  }));
  return valueArray;
}
const warnDeprecatedOptions = once(field => console.warn(oneLine`
  Decap CMS config: ${field.get('name')} field: property "options" has been deprecated for the
  ${field.get('widget')} widget and will be removed in the next major release. Rather than
  \`field.options.media_library\`, apply media library options for this widget under
  \`field.media_library\`.
`));
export default function withFileControl({
  forImage
} = {}) {
  return class FileControl extends React.Component {
    static propTypes = {
      field: PropTypes.object.isRequired,
      getAsset: PropTypes.func.isRequired,
      mediaPaths: ImmutablePropTypes.map.isRequired,
      onAddAsset: PropTypes.func.isRequired,
      onChange: PropTypes.func.isRequired,
      onRemoveInsertedMedia: PropTypes.func.isRequired,
      onOpenMediaLibrary: PropTypes.func.isRequired,
      onClearMediaControl: PropTypes.func.isRequired,
      onRemoveMediaControl: PropTypes.func.isRequired,
      classNameWrapper: PropTypes.string.isRequired,
      value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string), ImmutablePropTypes.listOf(PropTypes.string)]),
      t: PropTypes.func.isRequired
    };
    static defaultProps = {
      value: ''
    };
    constructor(props) {
      super(props);
      this.controlID = uuid();
    }
    componentDidMount() {
      // Manually validate PropTypes - React 19 breaking change
      PropTypes.checkPropTypes(FileControl.propTypes, this.props, 'prop', 'FileControl');
    }
    shouldComponentUpdate(nextProps) {
      /**
       * Always update if the value or getAsset changes.
       */
      if (this.props.value !== nextProps.value || this.props.getAsset !== nextProps.getAsset) {
        return true;
      }

      /**
       * If there is a media path for this control in the state object, and that
       * path is different than the value in `nextProps`, update.
       */
      const mediaPath = nextProps.mediaPaths.get(this.controlID);
      if (mediaPath && nextProps.value !== mediaPath) {
        return true;
      }
      return false;
    }
    componentDidUpdate() {
      const {
        mediaPaths,
        value,
        onRemoveInsertedMedia,
        onChange
      } = this.props;
      const mediaPath = mediaPaths.get(this.controlID);
      if (mediaPath && mediaPath !== value) {
        onChange(mediaPath);
      } else if (mediaPath && mediaPath === value) {
        onRemoveInsertedMedia(this.controlID);
      }
    }
    componentWillUnmount() {
      this.props.onRemoveMediaControl(this.controlID);
    }
    handleChange = e => {
      const {
        field,
        onOpenMediaLibrary,
        value
      } = this.props;
      e.preventDefault();
      const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
      return onOpenMediaLibrary({
        controlID: this.controlID,
        forImage,
        privateUpload: field.get('private'),
        value: valueListToArray(value),
        allowMultiple: !!mediaLibraryFieldOptions.get('allow_multiple', true),
        config: mediaLibraryFieldOptions.get('config'),
        field
      });
    };
    handleUrl = subject => e => {
      e.preventDefault();
      const url = window.prompt(this.props.t(`editor.editorWidgets.${subject}.promptUrl`));
      if (url) {
        return this.props.onChange(url);
      }
    };
    handleRemove = e => {
      e.preventDefault();
      this.props.onClearMediaControl(this.controlID);
      return this.props.onChange('');
    };
    onRemoveOne = index => () => {
      const value = valueListToArray(this.props.value);
      value.splice(index, 1);
      return this.props.onChange(sizeOfValue(value) > 0 ? [...value] : null);
    };
    onReplaceOne = index => () => {
      const {
        field,
        onOpenMediaLibrary,
        value
      } = this.props;
      const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
      return onOpenMediaLibrary({
        controlID: this.controlID,
        forImage,
        privateUpload: field.get('private'),
        value: valueListToArray(value),
        replaceIndex: index,
        allowMultiple: false,
        config: mediaLibraryFieldOptions.get('config'),
        field
      });
    };
    getMediaLibraryFieldOptions = () => {
      const {
        field
      } = this.props;
      if (field.hasIn(['options', 'media_library'])) {
        warnDeprecatedOptions(field);
        return field.getIn(['options', 'media_library'], Map());
      }
      return field.get('media_library', Map());
    };
    allowsMultiple = () => {
      const mediaLibraryFieldOptions = this.getMediaLibraryFieldOptions();
      return mediaLibraryFieldOptions.get('config', false) && mediaLibraryFieldOptions.get('config').get('multiple', false);
    };
    onSortEnd = ({
      oldIndex,
      newIndex
    }) => {
      const {
        value
      } = this.props;
      const newValue = arrayMove(value, oldIndex, newIndex);
      return this.props.onChange(newValue);
    };
    getValidateValue = () => {
      const {
        value
      } = this.props;
      if (value) {
        return isMultiple(value) ? value.map(v => basename(v)) : basename(value);
      }
      return value;
    };
    renderFileLink = value => {
      const size = MAX_DISPLAY_LENGTH;
      if (!value || value.length <= size) {
        return value;
      }
      const text = `${value.slice(0, size / 2)}\u2026${value.slice(-(size / 2) + 1)}`;
      return ___EmotionJSX(FileLink, {
        href: value,
        rel: "noopener",
        target: "_blank"
      }, text);
    };
    renderFileLinks = () => {
      const {
        value
      } = this.props;
      if (isMultiple(value)) {
        return ___EmotionJSX(FileLinks, null, ___EmotionJSX(FileLinkList, null, value.map(val => ___EmotionJSX("li", {
          key: val
        }, this.renderFileLink(val)))));
      }
      return ___EmotionJSX(FileLinks, null, this.renderFileLink(value));
    };
    renderImages = () => {
      const {
        getAsset,
        value,
        field
      } = this.props;
      const items = valueListToSortableArray(value);
      if (isMultiple(value)) {
        return ___EmotionJSX(SortableMultiImageWrapper, {
          items: items,
          onSortEnd: this.onSortEnd,
          onRemoveOne: this.onRemoveOne,
          onReplaceOne: this.onReplaceOne,
          distance: 4,
          getAsset: getAsset,
          field: field,
          axis: "xy",
          lockToContainerEdges: true
        });
      }
      const src = getAsset(value, field);
      return ___EmotionJSX(ImageWrapper, null, ___EmotionJSX(Image, {
        src: src || ''
      }));
    };
    renderSelection = subject => {
      const {
        t,
        field
      } = this.props;
      const allowsMultiple = this.allowsMultiple();
      return ___EmotionJSX("div", null, forImage ? this.renderImages() : null, ___EmotionJSX("div", null, forImage ? null : this.renderFileLinks(), ___EmotionJSX(FileWidgetButton, {
        onClick: this.handleChange
      }, t(`editor.editorWidgets.${subject}.${this.allowsMultiple() ? 'addMore' : 'chooseDifferent'}`)), field.get('choose_url', true) && !this.allowsMultiple() ? ___EmotionJSX(FileWidgetButton, {
        onClick: this.handleUrl(subject)
      }, t(`editor.editorWidgets.${subject}.replaceUrl`)) : null, ___EmotionJSX(FileWidgetButtonRemove, {
        onClick: this.handleRemove
      }, t(`editor.editorWidgets.${subject}.remove${allowsMultiple ? 'All' : ''}`))));
    };
    renderNoSelection = subject => {
      const {
        t,
        field
      } = this.props;
      return ___EmotionJSX(React.Fragment, null, ___EmotionJSX(FileWidgetButton, {
        onClick: this.handleChange
      }, t(`editor.editorWidgets.${subject}.choose${this.allowsMultiple() ? 'Multiple' : ''}`)), field.get('choose_url', true) ? ___EmotionJSX(FileWidgetButton, {
        onClick: this.handleUrl(subject)
      }, t(`editor.editorWidgets.${subject}.chooseUrl`)) : null);
    };
    render() {
      const {
        value,
        classNameWrapper
      } = this.props;
      const subject = forImage ? 'image' : 'file';
      return ___EmotionJSX("div", {
        className: classNameWrapper
      }, ___EmotionJSX("span", null, value ? this.renderSelection(subject) : this.renderNoSelection(subject)));
    }
  };
}